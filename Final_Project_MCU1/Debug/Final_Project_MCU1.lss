
Final_Project_MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ba2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  00002ba2  00002c36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000fc  008000fc  00002cd2  2**0
                  ALLOC
  3 .stab         00002e14  00000000  00000000  00002cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015c5  00000000  00000000  00005ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000070ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000071ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000735d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009e91  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ac40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ada0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b02d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b7fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 30       	cpi	r26, 0x05	; 5
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <main>
      8a:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ef       	ldi	r26, 0xF2	; 242
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 ef       	ldi	r24, 0xF2	; 242
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <UART_init+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9c 83       	std	Y+4, r25	; 0x04
     b56:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     b58:	1a 82       	std	Y+2, r1	; 0x02
     b5a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     b5c:	eb e2       	ldi	r30, 0x2B	; 43
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
     b64:	ea e2       	ldi	r30, 0x2A	; 42
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	88 e1       	ldi	r24, 0x18	; 24
     b6a:	80 83       	st	Z, r24

	UCSRC = (1<<URSEL);
     b6c:	e0 e4       	ldi	r30, 0x40	; 64
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 e8       	ldi	r24, 0x80	; 128
     b72:	80 83       	st	Z, r24
	UCSRC |= ((Config_Ptr->stop_bit <<USBS)) | (Config_Ptr->parity <<UPM0);
     b74:	a0 e4       	ldi	r26, 0x40	; 64
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e0 e4       	ldi	r30, 0x40	; 64
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	38 2f       	mov	r19, r24
     b80:	eb 81       	ldd	r30, Y+3	; 0x03
     b82:	fc 81       	ldd	r31, Y+4	; 0x04
     b84:	82 81       	ldd	r24, Z+2	; 0x02
     b86:	88 2f       	mov	r24, r24
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	88 0f       	add	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	28 2f       	mov	r18, r24
     b98:	eb 81       	ldd	r30, Y+3	; 0x03
     b9a:	fc 81       	ldd	r31, Y+4	; 0x04
     b9c:	81 81       	ldd	r24, Z+1	; 0x01
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	82 95       	swap	r24
     ba4:	92 95       	swap	r25
     ba6:	90 7f       	andi	r25, 0xF0	; 240
     ba8:	98 27       	eor	r25, r24
     baa:	80 7f       	andi	r24, 0xF0	; 240
     bac:	98 27       	eor	r25, r24
     bae:	82 2b       	or	r24, r18
     bb0:	83 2b       	or	r24, r19
     bb2:	8c 93       	st	X, r24
	switch (Config_Ptr->bit_data) {
     bb4:	eb 81       	ldd	r30, Y+3	; 0x03
     bb6:	fc 81       	ldd	r31, Y+4	; 0x04
     bb8:	80 81       	ld	r24, Z
     bba:	28 2f       	mov	r18, r24
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	3e 83       	std	Y+6, r19	; 0x06
     bc0:	2d 83       	std	Y+5, r18	; 0x05
     bc2:	8d 81       	ldd	r24, Y+5	; 0x05
     bc4:	9e 81       	ldd	r25, Y+6	; 0x06
     bc6:	87 30       	cpi	r24, 0x07	; 7
     bc8:	91 05       	cpc	r25, r1
     bca:	19 f1       	breq	.+70     	; 0xc12 <UART_init+0xcc>
     bcc:	2d 81       	ldd	r18, Y+5	; 0x05
     bce:	3e 81       	ldd	r19, Y+6	; 0x06
     bd0:	28 30       	cpi	r18, 0x08	; 8
     bd2:	31 05       	cpc	r19, r1
     bd4:	5c f4       	brge	.+22     	; 0xbec <UART_init+0xa6>
     bd6:	8d 81       	ldd	r24, Y+5	; 0x05
     bd8:	9e 81       	ldd	r25, Y+6	; 0x06
     bda:	85 30       	cpi	r24, 0x05	; 5
     bdc:	91 05       	cpc	r25, r1
     bde:	b9 f1       	breq	.+110    	; 0xc4e <UART_init+0x108>
     be0:	2d 81       	ldd	r18, Y+5	; 0x05
     be2:	3e 81       	ldd	r19, Y+6	; 0x06
     be4:	26 30       	cpi	r18, 0x06	; 6
     be6:	31 05       	cpc	r19, r1
     be8:	61 f0       	breq	.+24     	; 0xc02 <UART_init+0xbc>
     bea:	31 c0       	rjmp	.+98     	; 0xc4e <UART_init+0x108>
     bec:	8d 81       	ldd	r24, Y+5	; 0x05
     bee:	9e 81       	ldd	r25, Y+6	; 0x06
     bf0:	88 30       	cpi	r24, 0x08	; 8
     bf2:	91 05       	cpc	r25, r1
     bf4:	b1 f0       	breq	.+44     	; 0xc22 <UART_init+0xdc>
     bf6:	2d 81       	ldd	r18, Y+5	; 0x05
     bf8:	3e 81       	ldd	r19, Y+6	; 0x06
     bfa:	29 30       	cpi	r18, 0x09	; 9
     bfc:	31 05       	cpc	r19, r1
     bfe:	c9 f0       	breq	.+50     	; 0xc32 <UART_init+0xec>
     c00:	26 c0       	rjmp	.+76     	; 0xc4e <UART_init+0x108>
	        case 5:
	            // UCSZ1:0 = 00 for 5-bit data mode
	            break;
	        case 6:
	            UCSRC |= (1 << UCSZ0);  // UCSZ1:0 = 01 for 6-bit data mode
     c02:	a0 e4       	ldi	r26, 0x40	; 64
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e0 e4       	ldi	r30, 0x40	; 64
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	82 60       	ori	r24, 0x02	; 2
     c0e:	8c 93       	st	X, r24
     c10:	1e c0       	rjmp	.+60     	; 0xc4e <UART_init+0x108>
	            break;
	        case 7:
	            UCSRC |= (1 << UCSZ1);  // UCSZ1:0 = 10 for 7-bit data mode
     c12:	a0 e4       	ldi	r26, 0x40	; 64
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e0 e4       	ldi	r30, 0x40	; 64
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	84 60       	ori	r24, 0x04	; 4
     c1e:	8c 93       	st	X, r24
     c20:	16 c0       	rjmp	.+44     	; 0xc4e <UART_init+0x108>
	            break;
	        case 8:
	            UCSRC |= (1 << UCSZ0) | (1 << UCSZ1);  // UCSZ1:0 = 11 for 8-bit data mode
     c22:	a0 e4       	ldi	r26, 0x40	; 64
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	e0 e4       	ldi	r30, 0x40	; 64
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	86 60       	ori	r24, 0x06	; 6
     c2e:	8c 93       	st	X, r24
     c30:	0e c0       	rjmp	.+28     	; 0xc4e <UART_init+0x108>
	            break;
	        case 9:
	            UCSRC |= (1 << UCSZ0) | (1 << UCSZ1);  // UCSZ1:0 = 11 and UCSZ2 in UCSRB for 9-bit data mode
     c32:	a0 e4       	ldi	r26, 0x40	; 64
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e0 e4       	ldi	r30, 0x40	; 64
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	86 60       	ori	r24, 0x06	; 6
     c3e:	8c 93       	st	X, r24
	            UCSRB |= (1 << UCSZ2);
     c40:	aa e2       	ldi	r26, 0x2A	; 42
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	ea e2       	ldi	r30, 0x2A	; 42
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	84 60       	ori	r24, 0x04	; 4
     c4c:	8c 93       	st	X, r24
	            break;
	    }

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baudrate * 8UL))) - 1);
     c4e:	eb 81       	ldd	r30, Y+3	; 0x03
     c50:	fc 81       	ldd	r31, Y+4	; 0x04
     c52:	83 81       	ldd	r24, Z+3	; 0x03
     c54:	94 81       	ldd	r25, Z+4	; 0x04
     c56:	a5 81       	ldd	r26, Z+5	; 0x05
     c58:	b6 81       	ldd	r27, Z+6	; 0x06
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	aa 1f       	adc	r26, r26
     c60:	bb 1f       	adc	r27, r27
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	aa 1f       	adc	r26, r26
     c68:	bb 1f       	adc	r27, r27
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	aa 1f       	adc	r26, r26
     c70:	bb 1f       	adc	r27, r27
     c72:	9c 01       	movw	r18, r24
     c74:	ad 01       	movw	r20, r26
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	92 e1       	ldi	r25, 0x12	; 18
     c7a:	aa e7       	ldi	r26, 0x7A	; 122
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	bc 01       	movw	r22, r24
     c80:	cd 01       	movw	r24, r26
     c82:	0e 94 31 15 	call	0x2a62	; 0x2a62 <__udivmodsi4>
     c86:	da 01       	movw	r26, r20
     c88:	c9 01       	movw	r24, r18
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	9a 83       	std	Y+2, r25	; 0x02
     c8e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     c90:	e0 e4       	ldi	r30, 0x40	; 64
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	9a 81       	ldd	r25, Y+2	; 0x02
     c98:	89 2f       	mov	r24, r25
     c9a:	99 27       	eor	r25, r25
     c9c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     c9e:	e9 e2       	ldi	r30, 0x29	; 41
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	80 83       	st	Z, r24
}
     ca6:	26 96       	adiw	r28, 0x06	; 6
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	0f 92       	push	r0
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
     cc2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     cc4:	eb e2       	ldi	r30, 0x2B	; 43
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	88 2f       	mov	r24, r24
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	80 72       	andi	r24, 0x20	; 32
     cd0:	90 70       	andi	r25, 0x00	; 0
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	b9 f3       	breq	.-18     	; 0xcc4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     cd6:	ec e2       	ldi	r30, 0x2C	; 44
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	80 83       	st	Z, r24

}
     cde:	0f 90       	pop	r0
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     cee:	eb e2       	ldi	r30, 0x2B	; 43
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	88 23       	and	r24, r24
     cf6:	dc f7       	brge	.-10     	; 0xcee <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
     cf8:	ec e2       	ldi	r30, 0x2C	; 44
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
}
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	00 d0       	rcall	.+0      	; 0xd0a <UART_sendString+0x6>
     d0a:	0f 92       	push	r0
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	9b 83       	std	Y+3, r25	; 0x03
     d12:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d14:	19 82       	std	Y+1, r1	; 0x01
     d16:	0e c0       	rjmp	.+28     	; 0xd34 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	9b 81       	ldd	r25, Y+3	; 0x03
     d22:	fc 01       	movw	r30, r24
     d24:	e2 0f       	add	r30, r18
     d26:	f3 1f       	adc	r31, r19
     d28:	80 81       	ld	r24, Z
     d2a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <UART_sendByte>
		i++;
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	8f 5f       	subi	r24, 0xFF	; 255
     d32:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	9b 81       	ldd	r25, Y+3	; 0x03
     d3e:	fc 01       	movw	r30, r24
     d40:	e2 0f       	add	r30, r18
     d42:	f3 1f       	adc	r31, r19
     d44:	80 81       	ld	r24, Z
     d46:	88 23       	and	r24, r24
     d48:	39 f7       	brne	.-50     	; 0xd18 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <UART_receiveString+0xa>
     d60:	0f 92       	push	r0
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	9b 83       	std	Y+3, r25	; 0x03
     d68:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d6a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	9b 81       	ldd	r25, Y+3	; 0x03
     d76:	8c 01       	movw	r16, r24
     d78:	02 0f       	add	r16, r18
     d7a:	13 1f       	adc	r17, r19
     d7c:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
     d80:	f8 01       	movw	r30, r16
     d82:	80 83       	st	Z, r24
     d84:	0f c0       	rjmp	.+30     	; 0xda4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	8f 5f       	subi	r24, 0xFF	; 255
     d8a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	9b 81       	ldd	r25, Y+3	; 0x03
     d96:	8c 01       	movw	r16, r24
     d98:	02 0f       	add	r16, r18
     d9a:	13 1f       	adc	r17, r19
     d9c:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
     da0:	f8 01       	movw	r30, r16
     da2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	9b 81       	ldd	r25, Y+3	; 0x03
     dae:	fc 01       	movw	r30, r24
     db0:	e2 0f       	add	r30, r18
     db2:	f3 1f       	adc	r31, r19
     db4:	80 81       	ld	r24, Z
     db6:	83 32       	cpi	r24, 0x23	; 35
     db8:	31 f7       	brne	.-52     	; 0xd86 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	9b 81       	ldd	r25, Y+3	; 0x03
     dc4:	fc 01       	movw	r30, r24
     dc6:	e2 0f       	add	r30, r18
     dc8:	f3 1f       	adc	r31, r19
     dca:	10 82       	st	Z, r1
}
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	08 95       	ret

00000ddc <__vector_9>:

static volatile void(*callback_ptr)(void) = NULL;


ISR(TIMER1_OVF_vect)
{
     ddc:	1f 92       	push	r1
     dde:	0f 92       	push	r0
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	0f 92       	push	r0
     de4:	11 24       	eor	r1, r1
     de6:	2f 93       	push	r18
     de8:	3f 93       	push	r19
     dea:	4f 93       	push	r20
     dec:	5f 93       	push	r21
     dee:	6f 93       	push	r22
     df0:	7f 93       	push	r23
     df2:	8f 93       	push	r24
     df4:	9f 93       	push	r25
     df6:	af 93       	push	r26
     df8:	bf 93       	push	r27
     dfa:	ef 93       	push	r30
     dfc:	ff 93       	push	r31
     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
	if(callback_ptr != NULL){
     e06:	80 91 fc 00 	lds	r24, 0x00FC
     e0a:	90 91 fd 00 	lds	r25, 0x00FD
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	29 f0       	breq	.+10     	; 0xe1c <__vector_9+0x40>
		(*callback_ptr)();
     e12:	e0 91 fc 00 	lds	r30, 0x00FC
     e16:	f0 91 fd 00 	lds	r31, 0x00FD
     e1a:	09 95       	icall
	}
}
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	ff 91       	pop	r31
     e22:	ef 91       	pop	r30
     e24:	bf 91       	pop	r27
     e26:	af 91       	pop	r26
     e28:	9f 91       	pop	r25
     e2a:	8f 91       	pop	r24
     e2c:	7f 91       	pop	r23
     e2e:	6f 91       	pop	r22
     e30:	5f 91       	pop	r21
     e32:	4f 91       	pop	r20
     e34:	3f 91       	pop	r19
     e36:	2f 91       	pop	r18
     e38:	0f 90       	pop	r0
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	0f 90       	pop	r0
     e3e:	1f 90       	pop	r1
     e40:	18 95       	reti

00000e42 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
     e42:	1f 92       	push	r1
     e44:	0f 92       	push	r0
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	0f 92       	push	r0
     e4a:	11 24       	eor	r1, r1
     e4c:	2f 93       	push	r18
     e4e:	3f 93       	push	r19
     e50:	4f 93       	push	r20
     e52:	5f 93       	push	r21
     e54:	6f 93       	push	r22
     e56:	7f 93       	push	r23
     e58:	8f 93       	push	r24
     e5a:	9f 93       	push	r25
     e5c:	af 93       	push	r26
     e5e:	bf 93       	push	r27
     e60:	ef 93       	push	r30
     e62:	ff 93       	push	r31
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
	if(callback_ptr != NULL){
     e6c:	80 91 fc 00 	lds	r24, 0x00FC
     e70:	90 91 fd 00 	lds	r25, 0x00FD
     e74:	00 97       	sbiw	r24, 0x00	; 0
     e76:	29 f0       	breq	.+10     	; 0xe82 <__vector_7+0x40>
		(*callback_ptr)();
     e78:	e0 91 fc 00 	lds	r30, 0x00FC
     e7c:	f0 91 fd 00 	lds	r31, 0x00FD
     e80:	09 95       	icall
	}
}
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	ff 91       	pop	r31
     e88:	ef 91       	pop	r30
     e8a:	bf 91       	pop	r27
     e8c:	af 91       	pop	r26
     e8e:	9f 91       	pop	r25
     e90:	8f 91       	pop	r24
     e92:	7f 91       	pop	r23
     e94:	6f 91       	pop	r22
     e96:	5f 91       	pop	r21
     e98:	4f 91       	pop	r20
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0
     ea4:	1f 90       	pop	r1
     ea6:	18 95       	reti

00000ea8 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType* config_ptr)
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	00 d0       	rcall	.+0      	; 0xeae <Timer1_init+0x6>
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = config_ptr->intial_value;
     eb6:	ac e4       	ldi	r26, 0x4C	; 76
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e9 81       	ldd	r30, Y+1	; 0x01
     ebc:	fa 81       	ldd	r31, Y+2	; 0x02
     ebe:	80 81       	ld	r24, Z
     ec0:	91 81       	ldd	r25, Z+1	; 0x01
     ec2:	11 96       	adiw	r26, 0x01	; 1
     ec4:	9c 93       	st	X, r25
     ec6:	8e 93       	st	-X, r24
	TCCR1A = (1<<FOC1A);
     ec8:	ef e4       	ldi	r30, 0x4F	; 79
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	88 e0       	ldi	r24, 0x08	; 8
     ece:	80 83       	st	Z, r24
	if(config_ptr->mode == normal)
     ed0:	e9 81       	ldd	r30, Y+1	; 0x01
     ed2:	fa 81       	ldd	r31, Y+2	; 0x02
     ed4:	85 81       	ldd	r24, Z+5	; 0x05
     ed6:	88 23       	and	r24, r24
     ed8:	91 f4       	brne	.+36     	; 0xefe <Timer1_init+0x56>
	{
		TIMSK |= (1<<TOIE1); //enable interrupt for overflow/normal mode
     eda:	a9 e5       	ldi	r26, 0x59	; 89
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e9 e5       	ldi	r30, 0x59	; 89
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	84 60       	ori	r24, 0x04	; 4
     ee6:	8c 93       	st	X, r24
		TCCR1B |= (config_ptr->prescaler<<CS10);
     ee8:	ae e4       	ldi	r26, 0x4E	; 78
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	ee e4       	ldi	r30, 0x4E	; 78
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	90 81       	ld	r25, Z
     ef2:	e9 81       	ldd	r30, Y+1	; 0x01
     ef4:	fa 81       	ldd	r31, Y+2	; 0x02
     ef6:	84 81       	ldd	r24, Z+4	; 0x04
     ef8:	89 2b       	or	r24, r25
     efa:	8c 93       	st	X, r24
     efc:	17 c0       	rjmp	.+46     	; 0xf2c <Timer1_init+0x84>
	}
	else{
		OCR1A = config_ptr->compare_value; // insert compare value
     efe:	aa e4       	ldi	r26, 0x4A	; 74
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e9 81       	ldd	r30, Y+1	; 0x01
     f04:	fa 81       	ldd	r31, Y+2	; 0x02
     f06:	82 81       	ldd	r24, Z+2	; 0x02
     f08:	93 81       	ldd	r25, Z+3	; 0x03
     f0a:	11 96       	adiw	r26, 0x01	; 1
     f0c:	9c 93       	st	X, r25
     f0e:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A); //enable interrupt for compare A match
     f10:	a9 e5       	ldi	r26, 0x59	; 89
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e9 e5       	ldi	r30, 0x59	; 89
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	80 61       	ori	r24, 0x10	; 16
     f1c:	8c 93       	st	X, r24
		TCCR1B = (1<<WGM12) | (config_ptr->prescaler<<CS10); // set prescaler and ctc mode
     f1e:	ae e4       	ldi	r26, 0x4E	; 78
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e9 81       	ldd	r30, Y+1	; 0x01
     f24:	fa 81       	ldd	r31, Y+2	; 0x02
     f26:	84 81       	ldd	r24, Z+4	; 0x04
     f28:	88 60       	ori	r24, 0x08	; 8
     f2a:	8c 93       	st	X, r24
	}
}
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <Timer1_deInit>:

void Timer1_deInit(void)
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
	//Clear Timer1 Registers.
	TCCR1A=0;	TCCR1B=0;	TCNT1=0;	OCR1A=0;	TIMSK=0;
     f3e:	ef e4       	ldi	r30, 0x4F	; 79
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	10 82       	st	Z, r1
     f44:	ee e4       	ldi	r30, 0x4E	; 78
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	10 82       	st	Z, r1
     f4a:	ec e4       	ldi	r30, 0x4C	; 76
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	11 82       	std	Z+1, r1	; 0x01
     f50:	10 82       	st	Z, r1
     f52:	ea e4       	ldi	r30, 0x4A	; 74
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	11 82       	std	Z+1, r1	; 0x01
     f58:	10 82       	st	Z, r1
     f5a:	e9 e5       	ldi	r30, 0x59	; 89
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	10 82       	st	Z, r1
}
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <Timer1_setCallBack+0x6>
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	9a 83       	std	Y+2, r25	; 0x02
     f72:	89 83       	std	Y+1, r24	; 0x01
	callback_ptr = a_ptr;
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	9a 81       	ldd	r25, Y+2	; 0x02
     f78:	90 93 fd 00 	sts	0x00FD, r25
     f7c:	80 93 fc 00 	sts	0x00FC, r24
}
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <LCD_init>:
#include"../utils/common_macros.h"
#include "../GPIO/GPIO.h"


void LCD_init(void)
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	2e 97       	sbiw	r28, 0x0e	; 14
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPin(LCD_RS_PORT_ID, LCD_RS_PIN_ID,PIN_OUTPUT);
     f9e:	83 e0       	ldi	r24, 0x03	; 3
     fa0:	66 e0       	ldi	r22, 0x06	; 6
     fa2:	41 e0       	ldi	r20, 0x01	; 1
     fa4:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <GPIO_setupPin>
	GPIO_setupPin(LCD_E_PORT_ID, LCD_E_PIN_ID,PIN_OUTPUT);
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	67 e0       	ldi	r22, 0x07	; 7
     fac:	41 e0       	ldi	r20, 0x01	; 1
     fae:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <GPIO_setupPin>
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	a0 ea       	ldi	r26, 0xA0	; 160
     fb8:	b1 e4       	ldi	r27, 0x41	; 65
     fba:	8b 87       	std	Y+11, r24	; 0x0b
     fbc:	9c 87       	std	Y+12, r25	; 0x0c
     fbe:	ad 87       	std	Y+13, r26	; 0x0d
     fc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc4:	7c 85       	ldd	r23, Y+12	; 0x0c
     fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	4a ef       	ldi	r20, 0xFA	; 250
     fd0:	54 e4       	ldi	r21, 0x44	; 68
     fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	8f 83       	std	Y+7, r24	; 0x07
     fdc:	98 87       	std	Y+8, r25	; 0x08
     fde:	a9 87       	std	Y+9, r26	; 0x09
     fe0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fe2:	6f 81       	ldd	r22, Y+7	; 0x07
     fe4:	78 85       	ldd	r23, Y+8	; 0x08
     fe6:	89 85       	ldd	r24, Y+9	; 0x09
     fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e8       	ldi	r20, 0x80	; 128
     ff0:	5f e3       	ldi	r21, 0x3F	; 63
     ff2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ff6:	88 23       	and	r24, r24
     ff8:	2c f4       	brge	.+10     	; 0x1004 <LCD_init+0x7a>
		__ticks = 1;
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	9e 83       	std	Y+6, r25	; 0x06
    1000:	8d 83       	std	Y+5, r24	; 0x05
    1002:	3f c0       	rjmp	.+126    	; 0x1082 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1004:	6f 81       	ldd	r22, Y+7	; 0x07
    1006:	78 85       	ldd	r23, Y+8	; 0x08
    1008:	89 85       	ldd	r24, Y+9	; 0x09
    100a:	9a 85       	ldd	r25, Y+10	; 0x0a
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	3f ef       	ldi	r19, 0xFF	; 255
    1010:	4f e7       	ldi	r20, 0x7F	; 127
    1012:	57 e4       	ldi	r21, 0x47	; 71
    1014:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1018:	18 16       	cp	r1, r24
    101a:	4c f5       	brge	.+82     	; 0x106e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    101c:	6b 85       	ldd	r22, Y+11	; 0x0b
    101e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1020:	8d 85       	ldd	r24, Y+13	; 0x0d
    1022:	9e 85       	ldd	r25, Y+14	; 0x0e
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	40 e2       	ldi	r20, 0x20	; 32
    102a:	51 e4       	ldi	r21, 0x41	; 65
    102c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	bc 01       	movw	r22, r24
    1036:	cd 01       	movw	r24, r26
    1038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	9e 83       	std	Y+6, r25	; 0x06
    1042:	8d 83       	std	Y+5, r24	; 0x05
    1044:	0f c0       	rjmp	.+30     	; 0x1064 <LCD_init+0xda>
    1046:	88 ec       	ldi	r24, 0xC8	; 200
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	9c 83       	std	Y+4, r25	; 0x04
    104c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	9c 81       	ldd	r25, Y+4	; 0x04
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	f1 f7       	brne	.-4      	; 0x1052 <LCD_init+0xc8>
    1056:	9c 83       	std	Y+4, r25	; 0x04
    1058:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105a:	8d 81       	ldd	r24, Y+5	; 0x05
    105c:	9e 81       	ldd	r25, Y+6	; 0x06
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	9e 83       	std	Y+6, r25	; 0x06
    1062:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1064:	8d 81       	ldd	r24, Y+5	; 0x05
    1066:	9e 81       	ldd	r25, Y+6	; 0x06
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	69 f7       	brne	.-38     	; 0x1046 <LCD_init+0xbc>
    106c:	14 c0       	rjmp	.+40     	; 0x1096 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    106e:	6f 81       	ldd	r22, Y+7	; 0x07
    1070:	78 85       	ldd	r23, Y+8	; 0x08
    1072:	89 85       	ldd	r24, Y+9	; 0x09
    1074:	9a 85       	ldd	r25, Y+10	; 0x0a
    1076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	9e 83       	std	Y+6, r25	; 0x06
    1080:	8d 83       	std	Y+5, r24	; 0x05
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	9a 83       	std	Y+2, r25	; 0x02
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	f1 f7       	brne	.-4      	; 0x108e <LCD_init+0x104>
    1092:	9a 83       	std	Y+2, r25	; 0x02
    1094:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPort(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1096:	82 e0       	ldi	r24, 0x02	; 2
    1098:	6f ef       	ldi	r22, 0xFF	; 255
    109a:	0e 94 07 11 	call	0x220e	; 0x220e <GPIO_setupPort>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    109e:	88 e3       	ldi	r24, 0x38	; 56
    10a0:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_sendCommand>

#endif
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    10a4:	8c e0       	ldi	r24, 0x0C	; 12
    10a6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_sendCommand>

}
    10b0:	2e 96       	adiw	r28, 0x0e	; 14
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	e9 97       	sbiw	r28, 0x39	; 57
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    10d8:	83 e0       	ldi	r24, 0x03	; 3
    10da:	66 e0       	ldi	r22, 0x06	; 6
    10dc:	40 e0       	ldi	r20, 0x00	; 0
    10de:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <GPIO_writePin>
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	a0 e8       	ldi	r26, 0x80	; 128
    10e8:	bf e3       	ldi	r27, 0x3F	; 63
    10ea:	8d ab       	std	Y+53, r24	; 0x35
    10ec:	9e ab       	std	Y+54, r25	; 0x36
    10ee:	af ab       	std	Y+55, r26	; 0x37
    10f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f2:	6d a9       	ldd	r22, Y+53	; 0x35
    10f4:	7e a9       	ldd	r23, Y+54	; 0x36
    10f6:	8f a9       	ldd	r24, Y+55	; 0x37
    10f8:	98 ad       	ldd	r25, Y+56	; 0x38
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	4a ef       	ldi	r20, 0xFA	; 250
    1100:	54 e4       	ldi	r21, 0x44	; 68
    1102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	89 ab       	std	Y+49, r24	; 0x31
    110c:	9a ab       	std	Y+50, r25	; 0x32
    110e:	ab ab       	std	Y+51, r26	; 0x33
    1110:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1112:	69 a9       	ldd	r22, Y+49	; 0x31
    1114:	7a a9       	ldd	r23, Y+50	; 0x32
    1116:	8b a9       	ldd	r24, Y+51	; 0x33
    1118:	9c a9       	ldd	r25, Y+52	; 0x34
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e8       	ldi	r20, 0x80	; 128
    1120:	5f e3       	ldi	r21, 0x3F	; 63
    1122:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1126:	88 23       	and	r24, r24
    1128:	2c f4       	brge	.+10     	; 0x1134 <LCD_sendCommand+0x72>
		__ticks = 1;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	98 ab       	std	Y+48, r25	; 0x30
    1130:	8f a7       	std	Y+47, r24	; 0x2f
    1132:	3f c0       	rjmp	.+126    	; 0x11b2 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1134:	69 a9       	ldd	r22, Y+49	; 0x31
    1136:	7a a9       	ldd	r23, Y+50	; 0x32
    1138:	8b a9       	ldd	r24, Y+51	; 0x33
    113a:	9c a9       	ldd	r25, Y+52	; 0x34
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	3f ef       	ldi	r19, 0xFF	; 255
    1140:	4f e7       	ldi	r20, 0x7F	; 127
    1142:	57 e4       	ldi	r21, 0x47	; 71
    1144:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1148:	18 16       	cp	r1, r24
    114a:	4c f5       	brge	.+82     	; 0x119e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    114c:	6d a9       	ldd	r22, Y+53	; 0x35
    114e:	7e a9       	ldd	r23, Y+54	; 0x36
    1150:	8f a9       	ldd	r24, Y+55	; 0x37
    1152:	98 ad       	ldd	r25, Y+56	; 0x38
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e2       	ldi	r20, 0x20	; 32
    115a:	51 e4       	ldi	r21, 0x41	; 65
    115c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	bc 01       	movw	r22, r24
    1166:	cd 01       	movw	r24, r26
    1168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	98 ab       	std	Y+48, r25	; 0x30
    1172:	8f a7       	std	Y+47, r24	; 0x2f
    1174:	0f c0       	rjmp	.+30     	; 0x1194 <LCD_sendCommand+0xd2>
    1176:	88 ec       	ldi	r24, 0xC8	; 200
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	9e a7       	std	Y+46, r25	; 0x2e
    117c:	8d a7       	std	Y+45, r24	; 0x2d
    117e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1180:	9e a5       	ldd	r25, Y+46	; 0x2e
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	f1 f7       	brne	.-4      	; 0x1182 <LCD_sendCommand+0xc0>
    1186:	9e a7       	std	Y+46, r25	; 0x2e
    1188:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118a:	8f a5       	ldd	r24, Y+47	; 0x2f
    118c:	98 a9       	ldd	r25, Y+48	; 0x30
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	98 ab       	std	Y+48, r25	; 0x30
    1192:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1194:	8f a5       	ldd	r24, Y+47	; 0x2f
    1196:	98 a9       	ldd	r25, Y+48	; 0x30
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	69 f7       	brne	.-38     	; 0x1176 <LCD_sendCommand+0xb4>
    119c:	14 c0       	rjmp	.+40     	; 0x11c6 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119e:	69 a9       	ldd	r22, Y+49	; 0x31
    11a0:	7a a9       	ldd	r23, Y+50	; 0x32
    11a2:	8b a9       	ldd	r24, Y+51	; 0x33
    11a4:	9c a9       	ldd	r25, Y+52	; 0x34
    11a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	98 ab       	std	Y+48, r25	; 0x30
    11b0:	8f a7       	std	Y+47, r24	; 0x2f
    11b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    11b4:	98 a9       	ldd	r25, Y+48	; 0x30
    11b6:	9c a7       	std	Y+44, r25	; 0x2c
    11b8:	8b a7       	std	Y+43, r24	; 0x2b
    11ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    11bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	f1 f7       	brne	.-4      	; 0x11be <LCD_sendCommand+0xfc>
    11c2:	9c a7       	std	Y+44, r25	; 0x2c
    11c4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    11c6:	83 e0       	ldi	r24, 0x03	; 3
    11c8:	67 e0       	ldi	r22, 0x07	; 7
    11ca:	41 e0       	ldi	r20, 0x01	; 1
    11cc:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <GPIO_writePin>
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	a0 e8       	ldi	r26, 0x80	; 128
    11d6:	bf e3       	ldi	r27, 0x3F	; 63
    11d8:	8f a3       	std	Y+39, r24	; 0x27
    11da:	98 a7       	std	Y+40, r25	; 0x28
    11dc:	a9 a7       	std	Y+41, r26	; 0x29
    11de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e0:	6f a1       	ldd	r22, Y+39	; 0x27
    11e2:	78 a5       	ldd	r23, Y+40	; 0x28
    11e4:	89 a5       	ldd	r24, Y+41	; 0x29
    11e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	4a ef       	ldi	r20, 0xFA	; 250
    11ee:	54 e4       	ldi	r21, 0x44	; 68
    11f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	8b a3       	std	Y+35, r24	; 0x23
    11fa:	9c a3       	std	Y+36, r25	; 0x24
    11fc:	ad a3       	std	Y+37, r26	; 0x25
    11fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1200:	6b a1       	ldd	r22, Y+35	; 0x23
    1202:	7c a1       	ldd	r23, Y+36	; 0x24
    1204:	8d a1       	ldd	r24, Y+37	; 0x25
    1206:	9e a1       	ldd	r25, Y+38	; 0x26
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e8       	ldi	r20, 0x80	; 128
    120e:	5f e3       	ldi	r21, 0x3F	; 63
    1210:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1214:	88 23       	and	r24, r24
    1216:	2c f4       	brge	.+10     	; 0x1222 <LCD_sendCommand+0x160>
		__ticks = 1;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	9a a3       	std	Y+34, r25	; 0x22
    121e:	89 a3       	std	Y+33, r24	; 0x21
    1220:	3f c0       	rjmp	.+126    	; 0x12a0 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1222:	6b a1       	ldd	r22, Y+35	; 0x23
    1224:	7c a1       	ldd	r23, Y+36	; 0x24
    1226:	8d a1       	ldd	r24, Y+37	; 0x25
    1228:	9e a1       	ldd	r25, Y+38	; 0x26
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	3f ef       	ldi	r19, 0xFF	; 255
    122e:	4f e7       	ldi	r20, 0x7F	; 127
    1230:	57 e4       	ldi	r21, 0x47	; 71
    1232:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1236:	18 16       	cp	r1, r24
    1238:	4c f5       	brge	.+82     	; 0x128c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    123a:	6f a1       	ldd	r22, Y+39	; 0x27
    123c:	78 a5       	ldd	r23, Y+40	; 0x28
    123e:	89 a5       	ldd	r24, Y+41	; 0x29
    1240:	9a a5       	ldd	r25, Y+42	; 0x2a
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e2       	ldi	r20, 0x20	; 32
    1248:	51 e4       	ldi	r21, 0x41	; 65
    124a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	bc 01       	movw	r22, r24
    1254:	cd 01       	movw	r24, r26
    1256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	9a a3       	std	Y+34, r25	; 0x22
    1260:	89 a3       	std	Y+33, r24	; 0x21
    1262:	0f c0       	rjmp	.+30     	; 0x1282 <LCD_sendCommand+0x1c0>
    1264:	88 ec       	ldi	r24, 0xC8	; 200
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	98 a3       	std	Y+32, r25	; 0x20
    126a:	8f 8f       	std	Y+31, r24	; 0x1f
    126c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    126e:	98 a1       	ldd	r25, Y+32	; 0x20
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	f1 f7       	brne	.-4      	; 0x1270 <LCD_sendCommand+0x1ae>
    1274:	98 a3       	std	Y+32, r25	; 0x20
    1276:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1278:	89 a1       	ldd	r24, Y+33	; 0x21
    127a:	9a a1       	ldd	r25, Y+34	; 0x22
    127c:	01 97       	sbiw	r24, 0x01	; 1
    127e:	9a a3       	std	Y+34, r25	; 0x22
    1280:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1282:	89 a1       	ldd	r24, Y+33	; 0x21
    1284:	9a a1       	ldd	r25, Y+34	; 0x22
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	69 f7       	brne	.-38     	; 0x1264 <LCD_sendCommand+0x1a2>
    128a:	14 c0       	rjmp	.+40     	; 0x12b4 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    128c:	6b a1       	ldd	r22, Y+35	; 0x23
    128e:	7c a1       	ldd	r23, Y+36	; 0x24
    1290:	8d a1       	ldd	r24, Y+37	; 0x25
    1292:	9e a1       	ldd	r25, Y+38	; 0x26
    1294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	9a a3       	std	Y+34, r25	; 0x22
    129e:	89 a3       	std	Y+33, r24	; 0x21
    12a0:	89 a1       	ldd	r24, Y+33	; 0x21
    12a2:	9a a1       	ldd	r25, Y+34	; 0x22
    12a4:	9e 8f       	std	Y+30, r25	; 0x1e
    12a6:	8d 8f       	std	Y+29, r24	; 0x1d
    12a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <LCD_sendCommand+0x1ea>
    12b0:	9e 8f       	std	Y+30, r25	; 0x1e
    12b2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    12b4:	82 e0       	ldi	r24, 0x02	; 2
    12b6:	69 ad       	ldd	r22, Y+57	; 0x39
    12b8:	0e 94 4b 11 	call	0x2296	; 0x2296 <GPIO_writePort>
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	a0 e8       	ldi	r26, 0x80	; 128
    12c2:	bf e3       	ldi	r27, 0x3F	; 63
    12c4:	89 8f       	std	Y+25, r24	; 0x19
    12c6:	9a 8f       	std	Y+26, r25	; 0x1a
    12c8:	ab 8f       	std	Y+27, r26	; 0x1b
    12ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12cc:	69 8d       	ldd	r22, Y+25	; 0x19
    12ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	4a ef       	ldi	r20, 0xFA	; 250
    12da:	54 e4       	ldi	r21, 0x44	; 68
    12dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	8d 8b       	std	Y+21, r24	; 0x15
    12e6:	9e 8b       	std	Y+22, r25	; 0x16
    12e8:	af 8b       	std	Y+23, r26	; 0x17
    12ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12ec:	6d 89       	ldd	r22, Y+21	; 0x15
    12ee:	7e 89       	ldd	r23, Y+22	; 0x16
    12f0:	8f 89       	ldd	r24, Y+23	; 0x17
    12f2:	98 8d       	ldd	r25, Y+24	; 0x18
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	40 e8       	ldi	r20, 0x80	; 128
    12fa:	5f e3       	ldi	r21, 0x3F	; 63
    12fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1300:	88 23       	and	r24, r24
    1302:	2c f4       	brge	.+10     	; 0x130e <LCD_sendCommand+0x24c>
		__ticks = 1;
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	9c 8b       	std	Y+20, r25	; 0x14
    130a:	8b 8b       	std	Y+19, r24	; 0x13
    130c:	3f c0       	rjmp	.+126    	; 0x138c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    130e:	6d 89       	ldd	r22, Y+21	; 0x15
    1310:	7e 89       	ldd	r23, Y+22	; 0x16
    1312:	8f 89       	ldd	r24, Y+23	; 0x17
    1314:	98 8d       	ldd	r25, Y+24	; 0x18
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	3f ef       	ldi	r19, 0xFF	; 255
    131a:	4f e7       	ldi	r20, 0x7F	; 127
    131c:	57 e4       	ldi	r21, 0x47	; 71
    131e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1322:	18 16       	cp	r1, r24
    1324:	4c f5       	brge	.+82     	; 0x1378 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1326:	69 8d       	ldd	r22, Y+25	; 0x19
    1328:	7a 8d       	ldd	r23, Y+26	; 0x1a
    132a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    132c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e2       	ldi	r20, 0x20	; 32
    1334:	51 e4       	ldi	r21, 0x41	; 65
    1336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	bc 01       	movw	r22, r24
    1340:	cd 01       	movw	r24, r26
    1342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	9c 8b       	std	Y+20, r25	; 0x14
    134c:	8b 8b       	std	Y+19, r24	; 0x13
    134e:	0f c0       	rjmp	.+30     	; 0x136e <LCD_sendCommand+0x2ac>
    1350:	88 ec       	ldi	r24, 0xC8	; 200
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	9a 8b       	std	Y+18, r25	; 0x12
    1356:	89 8b       	std	Y+17, r24	; 0x11
    1358:	89 89       	ldd	r24, Y+17	; 0x11
    135a:	9a 89       	ldd	r25, Y+18	; 0x12
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	f1 f7       	brne	.-4      	; 0x135c <LCD_sendCommand+0x29a>
    1360:	9a 8b       	std	Y+18, r25	; 0x12
    1362:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1364:	8b 89       	ldd	r24, Y+19	; 0x13
    1366:	9c 89       	ldd	r25, Y+20	; 0x14
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	9c 8b       	std	Y+20, r25	; 0x14
    136c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    136e:	8b 89       	ldd	r24, Y+19	; 0x13
    1370:	9c 89       	ldd	r25, Y+20	; 0x14
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	69 f7       	brne	.-38     	; 0x1350 <LCD_sendCommand+0x28e>
    1376:	14 c0       	rjmp	.+40     	; 0x13a0 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1378:	6d 89       	ldd	r22, Y+21	; 0x15
    137a:	7e 89       	ldd	r23, Y+22	; 0x16
    137c:	8f 89       	ldd	r24, Y+23	; 0x17
    137e:	98 8d       	ldd	r25, Y+24	; 0x18
    1380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	9c 8b       	std	Y+20, r25	; 0x14
    138a:	8b 8b       	std	Y+19, r24	; 0x13
    138c:	8b 89       	ldd	r24, Y+19	; 0x13
    138e:	9c 89       	ldd	r25, Y+20	; 0x14
    1390:	98 8b       	std	Y+16, r25	; 0x10
    1392:	8f 87       	std	Y+15, r24	; 0x0f
    1394:	8f 85       	ldd	r24, Y+15	; 0x0f
    1396:	98 89       	ldd	r25, Y+16	; 0x10
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	f1 f7       	brne	.-4      	; 0x1398 <LCD_sendCommand+0x2d6>
    139c:	98 8b       	std	Y+16, r25	; 0x10
    139e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    13a0:	83 e0       	ldi	r24, 0x03	; 3
    13a2:	67 e0       	ldi	r22, 0x07	; 7
    13a4:	40 e0       	ldi	r20, 0x00	; 0
    13a6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <GPIO_writePin>
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	a0 e8       	ldi	r26, 0x80	; 128
    13b0:	bf e3       	ldi	r27, 0x3F	; 63
    13b2:	8b 87       	std	Y+11, r24	; 0x0b
    13b4:	9c 87       	std	Y+12, r25	; 0x0c
    13b6:	ad 87       	std	Y+13, r26	; 0x0d
    13b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    13bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    13be:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	4a ef       	ldi	r20, 0xFA	; 250
    13c8:	54 e4       	ldi	r21, 0x44	; 68
    13ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	8f 83       	std	Y+7, r24	; 0x07
    13d4:	98 87       	std	Y+8, r25	; 0x08
    13d6:	a9 87       	std	Y+9, r26	; 0x09
    13d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13da:	6f 81       	ldd	r22, Y+7	; 0x07
    13dc:	78 85       	ldd	r23, Y+8	; 0x08
    13de:	89 85       	ldd	r24, Y+9	; 0x09
    13e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e8       	ldi	r20, 0x80	; 128
    13e8:	5f e3       	ldi	r21, 0x3F	; 63
    13ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ee:	88 23       	and	r24, r24
    13f0:	2c f4       	brge	.+10     	; 0x13fc <LCD_sendCommand+0x33a>
		__ticks = 1;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	9e 83       	std	Y+6, r25	; 0x06
    13f8:	8d 83       	std	Y+5, r24	; 0x05
    13fa:	3f c0       	rjmp	.+126    	; 0x147a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    13fc:	6f 81       	ldd	r22, Y+7	; 0x07
    13fe:	78 85       	ldd	r23, Y+8	; 0x08
    1400:	89 85       	ldd	r24, Y+9	; 0x09
    1402:	9a 85       	ldd	r25, Y+10	; 0x0a
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	3f ef       	ldi	r19, 0xFF	; 255
    1408:	4f e7       	ldi	r20, 0x7F	; 127
    140a:	57 e4       	ldi	r21, 0x47	; 71
    140c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1410:	18 16       	cp	r1, r24
    1412:	4c f5       	brge	.+82     	; 0x1466 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1414:	6b 85       	ldd	r22, Y+11	; 0x0b
    1416:	7c 85       	ldd	r23, Y+12	; 0x0c
    1418:	8d 85       	ldd	r24, Y+13	; 0x0d
    141a:	9e 85       	ldd	r25, Y+14	; 0x0e
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e2       	ldi	r20, 0x20	; 32
    1422:	51 e4       	ldi	r21, 0x41	; 65
    1424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	bc 01       	movw	r22, r24
    142e:	cd 01       	movw	r24, r26
    1430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	9e 83       	std	Y+6, r25	; 0x06
    143a:	8d 83       	std	Y+5, r24	; 0x05
    143c:	0f c0       	rjmp	.+30     	; 0x145c <LCD_sendCommand+0x39a>
    143e:	88 ec       	ldi	r24, 0xC8	; 200
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	9c 83       	std	Y+4, r25	; 0x04
    1444:	8b 83       	std	Y+3, r24	; 0x03
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	f1 f7       	brne	.-4      	; 0x144a <LCD_sendCommand+0x388>
    144e:	9c 83       	std	Y+4, r25	; 0x04
    1450:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	9e 83       	std	Y+6, r25	; 0x06
    145a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	69 f7       	brne	.-38     	; 0x143e <LCD_sendCommand+0x37c>
    1464:	14 c0       	rjmp	.+40     	; 0x148e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1466:	6f 81       	ldd	r22, Y+7	; 0x07
    1468:	78 85       	ldd	r23, Y+8	; 0x08
    146a:	89 85       	ldd	r24, Y+9	; 0x09
    146c:	9a 85       	ldd	r25, Y+10	; 0x0a
    146e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	9e 83       	std	Y+6, r25	; 0x06
    1478:	8d 83       	std	Y+5, r24	; 0x05
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	9a 83       	std	Y+2, r25	; 0x02
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	9a 81       	ldd	r25, Y+2	; 0x02
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	f1 f7       	brne	.-4      	; 0x1486 <LCD_sendCommand+0x3c4>
    148a:	9a 83       	std	Y+2, r25	; 0x02
    148c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    148e:	e9 96       	adiw	r28, 0x39	; 57
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	e9 97       	sbiw	r28, 0x39	; 57
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    14b6:	83 e0       	ldi	r24, 0x03	; 3
    14b8:	66 e0       	ldi	r22, 0x06	; 6
    14ba:	41 e0       	ldi	r20, 0x01	; 1
    14bc:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <GPIO_writePin>
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	a0 e8       	ldi	r26, 0x80	; 128
    14c6:	bf e3       	ldi	r27, 0x3F	; 63
    14c8:	8d ab       	std	Y+53, r24	; 0x35
    14ca:	9e ab       	std	Y+54, r25	; 0x36
    14cc:	af ab       	std	Y+55, r26	; 0x37
    14ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d0:	6d a9       	ldd	r22, Y+53	; 0x35
    14d2:	7e a9       	ldd	r23, Y+54	; 0x36
    14d4:	8f a9       	ldd	r24, Y+55	; 0x37
    14d6:	98 ad       	ldd	r25, Y+56	; 0x38
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	4a ef       	ldi	r20, 0xFA	; 250
    14de:	54 e4       	ldi	r21, 0x44	; 68
    14e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	89 ab       	std	Y+49, r24	; 0x31
    14ea:	9a ab       	std	Y+50, r25	; 0x32
    14ec:	ab ab       	std	Y+51, r26	; 0x33
    14ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14f0:	69 a9       	ldd	r22, Y+49	; 0x31
    14f2:	7a a9       	ldd	r23, Y+50	; 0x32
    14f4:	8b a9       	ldd	r24, Y+51	; 0x33
    14f6:	9c a9       	ldd	r25, Y+52	; 0x34
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e8       	ldi	r20, 0x80	; 128
    14fe:	5f e3       	ldi	r21, 0x3F	; 63
    1500:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1504:	88 23       	and	r24, r24
    1506:	2c f4       	brge	.+10     	; 0x1512 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	98 ab       	std	Y+48, r25	; 0x30
    150e:	8f a7       	std	Y+47, r24	; 0x2f
    1510:	3f c0       	rjmp	.+126    	; 0x1590 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1512:	69 a9       	ldd	r22, Y+49	; 0x31
    1514:	7a a9       	ldd	r23, Y+50	; 0x32
    1516:	8b a9       	ldd	r24, Y+51	; 0x33
    1518:	9c a9       	ldd	r25, Y+52	; 0x34
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	3f ef       	ldi	r19, 0xFF	; 255
    151e:	4f e7       	ldi	r20, 0x7F	; 127
    1520:	57 e4       	ldi	r21, 0x47	; 71
    1522:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1526:	18 16       	cp	r1, r24
    1528:	4c f5       	brge	.+82     	; 0x157c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152a:	6d a9       	ldd	r22, Y+53	; 0x35
    152c:	7e a9       	ldd	r23, Y+54	; 0x36
    152e:	8f a9       	ldd	r24, Y+55	; 0x37
    1530:	98 ad       	ldd	r25, Y+56	; 0x38
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	40 e2       	ldi	r20, 0x20	; 32
    1538:	51 e4       	ldi	r21, 0x41	; 65
    153a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	bc 01       	movw	r22, r24
    1544:	cd 01       	movw	r24, r26
    1546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	98 ab       	std	Y+48, r25	; 0x30
    1550:	8f a7       	std	Y+47, r24	; 0x2f
    1552:	0f c0       	rjmp	.+30     	; 0x1572 <LCD_displayCharacter+0xd2>
    1554:	88 ec       	ldi	r24, 0xC8	; 200
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	9e a7       	std	Y+46, r25	; 0x2e
    155a:	8d a7       	std	Y+45, r24	; 0x2d
    155c:	8d a5       	ldd	r24, Y+45	; 0x2d
    155e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	f1 f7       	brne	.-4      	; 0x1560 <LCD_displayCharacter+0xc0>
    1564:	9e a7       	std	Y+46, r25	; 0x2e
    1566:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1568:	8f a5       	ldd	r24, Y+47	; 0x2f
    156a:	98 a9       	ldd	r25, Y+48	; 0x30
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	98 ab       	std	Y+48, r25	; 0x30
    1570:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1572:	8f a5       	ldd	r24, Y+47	; 0x2f
    1574:	98 a9       	ldd	r25, Y+48	; 0x30
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	69 f7       	brne	.-38     	; 0x1554 <LCD_displayCharacter+0xb4>
    157a:	14 c0       	rjmp	.+40     	; 0x15a4 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    157c:	69 a9       	ldd	r22, Y+49	; 0x31
    157e:	7a a9       	ldd	r23, Y+50	; 0x32
    1580:	8b a9       	ldd	r24, Y+51	; 0x33
    1582:	9c a9       	ldd	r25, Y+52	; 0x34
    1584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	98 ab       	std	Y+48, r25	; 0x30
    158e:	8f a7       	std	Y+47, r24	; 0x2f
    1590:	8f a5       	ldd	r24, Y+47	; 0x2f
    1592:	98 a9       	ldd	r25, Y+48	; 0x30
    1594:	9c a7       	std	Y+44, r25	; 0x2c
    1596:	8b a7       	std	Y+43, r24	; 0x2b
    1598:	8b a5       	ldd	r24, Y+43	; 0x2b
    159a:	9c a5       	ldd	r25, Y+44	; 0x2c
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <LCD_displayCharacter+0xfc>
    15a0:	9c a7       	std	Y+44, r25	; 0x2c
    15a2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    15a4:	83 e0       	ldi	r24, 0x03	; 3
    15a6:	67 e0       	ldi	r22, 0x07	; 7
    15a8:	41 e0       	ldi	r20, 0x01	; 1
    15aa:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <GPIO_writePin>
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	a0 e8       	ldi	r26, 0x80	; 128
    15b4:	bf e3       	ldi	r27, 0x3F	; 63
    15b6:	8f a3       	std	Y+39, r24	; 0x27
    15b8:	98 a7       	std	Y+40, r25	; 0x28
    15ba:	a9 a7       	std	Y+41, r26	; 0x29
    15bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15be:	6f a1       	ldd	r22, Y+39	; 0x27
    15c0:	78 a5       	ldd	r23, Y+40	; 0x28
    15c2:	89 a5       	ldd	r24, Y+41	; 0x29
    15c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	4a ef       	ldi	r20, 0xFA	; 250
    15cc:	54 e4       	ldi	r21, 0x44	; 68
    15ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	8b a3       	std	Y+35, r24	; 0x23
    15d8:	9c a3       	std	Y+36, r25	; 0x24
    15da:	ad a3       	std	Y+37, r26	; 0x25
    15dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15de:	6b a1       	ldd	r22, Y+35	; 0x23
    15e0:	7c a1       	ldd	r23, Y+36	; 0x24
    15e2:	8d a1       	ldd	r24, Y+37	; 0x25
    15e4:	9e a1       	ldd	r25, Y+38	; 0x26
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 e8       	ldi	r20, 0x80	; 128
    15ec:	5f e3       	ldi	r21, 0x3F	; 63
    15ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15f2:	88 23       	and	r24, r24
    15f4:	2c f4       	brge	.+10     	; 0x1600 <LCD_displayCharacter+0x160>
		__ticks = 1;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	9a a3       	std	Y+34, r25	; 0x22
    15fc:	89 a3       	std	Y+33, r24	; 0x21
    15fe:	3f c0       	rjmp	.+126    	; 0x167e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1600:	6b a1       	ldd	r22, Y+35	; 0x23
    1602:	7c a1       	ldd	r23, Y+36	; 0x24
    1604:	8d a1       	ldd	r24, Y+37	; 0x25
    1606:	9e a1       	ldd	r25, Y+38	; 0x26
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	3f ef       	ldi	r19, 0xFF	; 255
    160c:	4f e7       	ldi	r20, 0x7F	; 127
    160e:	57 e4       	ldi	r21, 0x47	; 71
    1610:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1614:	18 16       	cp	r1, r24
    1616:	4c f5       	brge	.+82     	; 0x166a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1618:	6f a1       	ldd	r22, Y+39	; 0x27
    161a:	78 a5       	ldd	r23, Y+40	; 0x28
    161c:	89 a5       	ldd	r24, Y+41	; 0x29
    161e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e2       	ldi	r20, 0x20	; 32
    1626:	51 e4       	ldi	r21, 0x41	; 65
    1628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	bc 01       	movw	r22, r24
    1632:	cd 01       	movw	r24, r26
    1634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	9a a3       	std	Y+34, r25	; 0x22
    163e:	89 a3       	std	Y+33, r24	; 0x21
    1640:	0f c0       	rjmp	.+30     	; 0x1660 <LCD_displayCharacter+0x1c0>
    1642:	88 ec       	ldi	r24, 0xC8	; 200
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	98 a3       	std	Y+32, r25	; 0x20
    1648:	8f 8f       	std	Y+31, r24	; 0x1f
    164a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    164c:	98 a1       	ldd	r25, Y+32	; 0x20
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	f1 f7       	brne	.-4      	; 0x164e <LCD_displayCharacter+0x1ae>
    1652:	98 a3       	std	Y+32, r25	; 0x20
    1654:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1656:	89 a1       	ldd	r24, Y+33	; 0x21
    1658:	9a a1       	ldd	r25, Y+34	; 0x22
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	9a a3       	std	Y+34, r25	; 0x22
    165e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1660:	89 a1       	ldd	r24, Y+33	; 0x21
    1662:	9a a1       	ldd	r25, Y+34	; 0x22
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	69 f7       	brne	.-38     	; 0x1642 <LCD_displayCharacter+0x1a2>
    1668:	14 c0       	rjmp	.+40     	; 0x1692 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    166a:	6b a1       	ldd	r22, Y+35	; 0x23
    166c:	7c a1       	ldd	r23, Y+36	; 0x24
    166e:	8d a1       	ldd	r24, Y+37	; 0x25
    1670:	9e a1       	ldd	r25, Y+38	; 0x26
    1672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	9a a3       	std	Y+34, r25	; 0x22
    167c:	89 a3       	std	Y+33, r24	; 0x21
    167e:	89 a1       	ldd	r24, Y+33	; 0x21
    1680:	9a a1       	ldd	r25, Y+34	; 0x22
    1682:	9e 8f       	std	Y+30, r25	; 0x1e
    1684:	8d 8f       	std	Y+29, r24	; 0x1d
    1686:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1688:	9e 8d       	ldd	r25, Y+30	; 0x1e
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	f1 f7       	brne	.-4      	; 0x168a <LCD_displayCharacter+0x1ea>
    168e:	9e 8f       	std	Y+30, r25	; 0x1e
    1690:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	69 ad       	ldd	r22, Y+57	; 0x39
    1696:	0e 94 4b 11 	call	0x2296	; 0x2296 <GPIO_writePort>
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	a0 e8       	ldi	r26, 0x80	; 128
    16a0:	bf e3       	ldi	r27, 0x3F	; 63
    16a2:	89 8f       	std	Y+25, r24	; 0x19
    16a4:	9a 8f       	std	Y+26, r25	; 0x1a
    16a6:	ab 8f       	std	Y+27, r26	; 0x1b
    16a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16aa:	69 8d       	ldd	r22, Y+25	; 0x19
    16ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	4a ef       	ldi	r20, 0xFA	; 250
    16b8:	54 e4       	ldi	r21, 0x44	; 68
    16ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	8d 8b       	std	Y+21, r24	; 0x15
    16c4:	9e 8b       	std	Y+22, r25	; 0x16
    16c6:	af 8b       	std	Y+23, r26	; 0x17
    16c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16ca:	6d 89       	ldd	r22, Y+21	; 0x15
    16cc:	7e 89       	ldd	r23, Y+22	; 0x16
    16ce:	8f 89       	ldd	r24, Y+23	; 0x17
    16d0:	98 8d       	ldd	r25, Y+24	; 0x18
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	40 e8       	ldi	r20, 0x80	; 128
    16d8:	5f e3       	ldi	r21, 0x3F	; 63
    16da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16de:	88 23       	and	r24, r24
    16e0:	2c f4       	brge	.+10     	; 0x16ec <LCD_displayCharacter+0x24c>
		__ticks = 1;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	9c 8b       	std	Y+20, r25	; 0x14
    16e8:	8b 8b       	std	Y+19, r24	; 0x13
    16ea:	3f c0       	rjmp	.+126    	; 0x176a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    16ec:	6d 89       	ldd	r22, Y+21	; 0x15
    16ee:	7e 89       	ldd	r23, Y+22	; 0x16
    16f0:	8f 89       	ldd	r24, Y+23	; 0x17
    16f2:	98 8d       	ldd	r25, Y+24	; 0x18
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	3f ef       	ldi	r19, 0xFF	; 255
    16f8:	4f e7       	ldi	r20, 0x7F	; 127
    16fa:	57 e4       	ldi	r21, 0x47	; 71
    16fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1700:	18 16       	cp	r1, r24
    1702:	4c f5       	brge	.+82     	; 0x1756 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1704:	69 8d       	ldd	r22, Y+25	; 0x19
    1706:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1708:	8b 8d       	ldd	r24, Y+27	; 0x1b
    170a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e2       	ldi	r20, 0x20	; 32
    1712:	51 e4       	ldi	r21, 0x41	; 65
    1714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	bc 01       	movw	r22, r24
    171e:	cd 01       	movw	r24, r26
    1720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	9c 8b       	std	Y+20, r25	; 0x14
    172a:	8b 8b       	std	Y+19, r24	; 0x13
    172c:	0f c0       	rjmp	.+30     	; 0x174c <LCD_displayCharacter+0x2ac>
    172e:	88 ec       	ldi	r24, 0xC8	; 200
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	9a 8b       	std	Y+18, r25	; 0x12
    1734:	89 8b       	std	Y+17, r24	; 0x11
    1736:	89 89       	ldd	r24, Y+17	; 0x11
    1738:	9a 89       	ldd	r25, Y+18	; 0x12
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	f1 f7       	brne	.-4      	; 0x173a <LCD_displayCharacter+0x29a>
    173e:	9a 8b       	std	Y+18, r25	; 0x12
    1740:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1742:	8b 89       	ldd	r24, Y+19	; 0x13
    1744:	9c 89       	ldd	r25, Y+20	; 0x14
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	9c 8b       	std	Y+20, r25	; 0x14
    174a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174c:	8b 89       	ldd	r24, Y+19	; 0x13
    174e:	9c 89       	ldd	r25, Y+20	; 0x14
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	69 f7       	brne	.-38     	; 0x172e <LCD_displayCharacter+0x28e>
    1754:	14 c0       	rjmp	.+40     	; 0x177e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1756:	6d 89       	ldd	r22, Y+21	; 0x15
    1758:	7e 89       	ldd	r23, Y+22	; 0x16
    175a:	8f 89       	ldd	r24, Y+23	; 0x17
    175c:	98 8d       	ldd	r25, Y+24	; 0x18
    175e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	9c 8b       	std	Y+20, r25	; 0x14
    1768:	8b 8b       	std	Y+19, r24	; 0x13
    176a:	8b 89       	ldd	r24, Y+19	; 0x13
    176c:	9c 89       	ldd	r25, Y+20	; 0x14
    176e:	98 8b       	std	Y+16, r25	; 0x10
    1770:	8f 87       	std	Y+15, r24	; 0x0f
    1772:	8f 85       	ldd	r24, Y+15	; 0x0f
    1774:	98 89       	ldd	r25, Y+16	; 0x10
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <LCD_displayCharacter+0x2d6>
    177a:	98 8b       	std	Y+16, r25	; 0x10
    177c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    177e:	83 e0       	ldi	r24, 0x03	; 3
    1780:	67 e0       	ldi	r22, 0x07	; 7
    1782:	40 e0       	ldi	r20, 0x00	; 0
    1784:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <GPIO_writePin>
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a0 e8       	ldi	r26, 0x80	; 128
    178e:	bf e3       	ldi	r27, 0x3F	; 63
    1790:	8b 87       	std	Y+11, r24	; 0x0b
    1792:	9c 87       	std	Y+12, r25	; 0x0c
    1794:	ad 87       	std	Y+13, r26	; 0x0d
    1796:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1798:	6b 85       	ldd	r22, Y+11	; 0x0b
    179a:	7c 85       	ldd	r23, Y+12	; 0x0c
    179c:	8d 85       	ldd	r24, Y+13	; 0x0d
    179e:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	4a ef       	ldi	r20, 0xFA	; 250
    17a6:	54 e4       	ldi	r21, 0x44	; 68
    17a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	8f 83       	std	Y+7, r24	; 0x07
    17b2:	98 87       	std	Y+8, r25	; 0x08
    17b4:	a9 87       	std	Y+9, r26	; 0x09
    17b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17b8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ba:	78 85       	ldd	r23, Y+8	; 0x08
    17bc:	89 85       	ldd	r24, Y+9	; 0x09
    17be:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e8       	ldi	r20, 0x80	; 128
    17c6:	5f e3       	ldi	r21, 0x3F	; 63
    17c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17cc:	88 23       	and	r24, r24
    17ce:	2c f4       	brge	.+10     	; 0x17da <LCD_displayCharacter+0x33a>
		__ticks = 1;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	9e 83       	std	Y+6, r25	; 0x06
    17d6:	8d 83       	std	Y+5, r24	; 0x05
    17d8:	3f c0       	rjmp	.+126    	; 0x1858 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    17da:	6f 81       	ldd	r22, Y+7	; 0x07
    17dc:	78 85       	ldd	r23, Y+8	; 0x08
    17de:	89 85       	ldd	r24, Y+9	; 0x09
    17e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	3f ef       	ldi	r19, 0xFF	; 255
    17e6:	4f e7       	ldi	r20, 0x7F	; 127
    17e8:	57 e4       	ldi	r21, 0x47	; 71
    17ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ee:	18 16       	cp	r1, r24
    17f0:	4c f5       	brge	.+82     	; 0x1844 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	40 e2       	ldi	r20, 0x20	; 32
    1800:	51 e4       	ldi	r21, 0x41	; 65
    1802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	bc 01       	movw	r22, r24
    180c:	cd 01       	movw	r24, r26
    180e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	9e 83       	std	Y+6, r25	; 0x06
    1818:	8d 83       	std	Y+5, r24	; 0x05
    181a:	0f c0       	rjmp	.+30     	; 0x183a <LCD_displayCharacter+0x39a>
    181c:	88 ec       	ldi	r24, 0xC8	; 200
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	9c 83       	std	Y+4, r25	; 0x04
    1822:	8b 83       	std	Y+3, r24	; 0x03
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9c 81       	ldd	r25, Y+4	; 0x04
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <LCD_displayCharacter+0x388>
    182c:	9c 83       	std	Y+4, r25	; 0x04
    182e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1830:	8d 81       	ldd	r24, Y+5	; 0x05
    1832:	9e 81       	ldd	r25, Y+6	; 0x06
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	9e 83       	std	Y+6, r25	; 0x06
    1838:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183a:	8d 81       	ldd	r24, Y+5	; 0x05
    183c:	9e 81       	ldd	r25, Y+6	; 0x06
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	69 f7       	brne	.-38     	; 0x181c <LCD_displayCharacter+0x37c>
    1842:	14 c0       	rjmp	.+40     	; 0x186c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1844:	6f 81       	ldd	r22, Y+7	; 0x07
    1846:	78 85       	ldd	r23, Y+8	; 0x08
    1848:	89 85       	ldd	r24, Y+9	; 0x09
    184a:	9a 85       	ldd	r25, Y+10	; 0x0a
    184c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	9e 83       	std	Y+6, r25	; 0x06
    1856:	8d 83       	std	Y+5, r24	; 0x05
    1858:	8d 81       	ldd	r24, Y+5	; 0x05
    185a:	9e 81       	ldd	r25, Y+6	; 0x06
    185c:	9a 83       	std	Y+2, r25	; 0x02
    185e:	89 83       	std	Y+1, r24	; 0x01
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	9a 81       	ldd	r25, Y+2	; 0x02
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <LCD_displayCharacter+0x3c4>
    1868:	9a 83       	std	Y+2, r25	; 0x02
    186a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    186c:	e9 96       	adiw	r28, 0x39	; 57
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	cd bf       	out	0x3d, r28	; 61
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	00 d0       	rcall	.+0      	; 0x1884 <LCD_displayString+0x6>
    1884:	0f 92       	push	r0
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	9b 83       	std	Y+3, r25	; 0x03
    188c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    188e:	19 82       	std	Y+1, r1	; 0x01
    1890:	0e c0       	rjmp	.+28     	; 0x18ae <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	9b 81       	ldd	r25, Y+3	; 0x03
    189c:	fc 01       	movw	r30, r24
    189e:	e2 0f       	add	r30, r18
    18a0:	f3 1f       	adc	r31, r19
    18a2:	80 81       	ld	r24, Z
    18a4:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_displayCharacter>
		i++;
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	8f 5f       	subi	r24, 0xFF	; 255
    18ac:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	9b 81       	ldd	r25, Y+3	; 0x03
    18b8:	fc 01       	movw	r30, r24
    18ba:	e2 0f       	add	r30, r18
    18bc:	f3 1f       	adc	r31, r19
    18be:	80 81       	ld	r24, Z
    18c0:	88 23       	and	r24, r24
    18c2:	39 f7       	brne	.-50     	; 0x1892 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 col)
{
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <LCD_moveCursor+0x6>
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <LCD_moveCursor+0x8>
    18d8:	0f 92       	push	r0
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	8a 83       	std	Y+2, r24	; 0x02
    18e0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	3d 83       	std	Y+5, r19	; 0x05
    18ea:	2c 83       	std	Y+4, r18	; 0x04
    18ec:	8c 81       	ldd	r24, Y+4	; 0x04
    18ee:	9d 81       	ldd	r25, Y+5	; 0x05
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	91 05       	cpc	r25, r1
    18f4:	c1 f0       	breq	.+48     	; 0x1926 <LCD_moveCursor+0x56>
    18f6:	2c 81       	ldd	r18, Y+4	; 0x04
    18f8:	3d 81       	ldd	r19, Y+5	; 0x05
    18fa:	22 30       	cpi	r18, 0x02	; 2
    18fc:	31 05       	cpc	r19, r1
    18fe:	2c f4       	brge	.+10     	; 0x190a <LCD_moveCursor+0x3a>
    1900:	8c 81       	ldd	r24, Y+4	; 0x04
    1902:	9d 81       	ldd	r25, Y+5	; 0x05
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	61 f0       	breq	.+24     	; 0x1920 <LCD_moveCursor+0x50>
    1908:	19 c0       	rjmp	.+50     	; 0x193c <LCD_moveCursor+0x6c>
    190a:	2c 81       	ldd	r18, Y+4	; 0x04
    190c:	3d 81       	ldd	r19, Y+5	; 0x05
    190e:	22 30       	cpi	r18, 0x02	; 2
    1910:	31 05       	cpc	r19, r1
    1912:	69 f0       	breq	.+26     	; 0x192e <LCD_moveCursor+0x5e>
    1914:	8c 81       	ldd	r24, Y+4	; 0x04
    1916:	9d 81       	ldd	r25, Y+5	; 0x05
    1918:	83 30       	cpi	r24, 0x03	; 3
    191a:	91 05       	cpc	r25, r1
    191c:	61 f0       	breq	.+24     	; 0x1936 <LCD_moveCursor+0x66>
    191e:	0e c0       	rjmp	.+28     	; 0x193c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	0b c0       	rjmp	.+22     	; 0x193c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	80 5c       	subi	r24, 0xC0	; 192
    192a:	89 83       	std	Y+1, r24	; 0x01
    192c:	07 c0       	rjmp	.+14     	; 0x193c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	80 5f       	subi	r24, 0xF0	; 240
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	03 c0       	rjmp	.+6      	; 0x193c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	80 5b       	subi	r24, 0xB0	; 176
    193a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	80 68       	ori	r24, 0x80	; 128
    1940:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_sendCommand>
}
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	08 95       	ret

00001954 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	00 d0       	rcall	.+0      	; 0x195a <LCD_displayStringRowColumn+0x6>
    195a:	00 d0       	rcall	.+0      	; 0x195c <LCD_displayStringRowColumn+0x8>
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	89 83       	std	Y+1, r24	; 0x01
    1962:	6a 83       	std	Y+2, r22	; 0x02
    1964:	5c 83       	std	Y+4, r21	; 0x04
    1966:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	6a 81       	ldd	r22, Y+2	; 0x02
    196c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_displayString>
}
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	62 97       	sbiw	r28, 0x12	; 18
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	9a 8b       	std	Y+18, r25	; 0x12
    199c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    199e:	89 89       	ldd	r24, Y+17	; 0x11
    19a0:	9a 89       	ldd	r25, Y+18	; 0x12
    19a2:	9e 01       	movw	r18, r28
    19a4:	2f 5f       	subi	r18, 0xFF	; 255
    19a6:	3f 4f       	sbci	r19, 0xFF	; 255
    19a8:	b9 01       	movw	r22, r18
    19aa:	4a e0       	ldi	r20, 0x0A	; 10
    19ac:	50 e0       	ldi	r21, 0x00	; 0
    19ae:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <itoa>
   LCD_displayString(buff); /* Display the string */
    19b2:	ce 01       	movw	r24, r28
    19b4:	01 96       	adiw	r24, 0x01	; 1
    19b6:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_displayString>
}
    19ba:	62 96       	adiw	r28, 0x12	; 18
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_sendCommand>
}
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <KEYPAD_getPressedKey>:
#endif

#endif /* STANDARD_KEYPAD */

uint8 KEYPAD_getPressedKey(void)
{
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	60 97       	sbiw	r28, 0x10	; 16
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    uint8 col, row;
    // Setup rows as inputs with pull-up resistors
    for (row = 0; row < KEYPAD_NUM_ROWS; row++)
    19f4:	1f 86       	std	Y+15, r1	; 0x0f
    19f6:	0d c0       	rjmp	.+26     	; 0x1a12 <KEYPAD_getPressedKey+0x32>
    {
        GPIO_setupPin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	6f 85       	ldd	r22, Y+15	; 0x0f
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <GPIO_setupPin>
        GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, 1); // Enable internal pull-up resistor
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a06:	41 e0       	ldi	r20, 0x01	; 1
    1a08:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <GPIO_writePin>

uint8 KEYPAD_getPressedKey(void)
{
    uint8 col, row;
    // Setup rows as inputs with pull-up resistors
    for (row = 0; row < KEYPAD_NUM_ROWS; row++)
    1a0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a0e:	8f 5f       	subi	r24, 0xFF	; 255
    1a10:	8f 87       	std	Y+15, r24	; 0x0f
    1a12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a14:	84 30       	cpi	r24, 0x04	; 4
    1a16:	80 f3       	brcs	.-32     	; 0x19f8 <KEYPAD_getPressedKey+0x18>
    {
        GPIO_setupPin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
        GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, 1); // Enable internal pull-up resistor
    }
    // Setup columns as inputs with pull-up resistors
    for (col = 0; col < KEYPAD_NUM_COLS; col++)
    1a18:	18 8a       	std	Y+16, r1	; 0x10
    1a1a:	13 c0       	rjmp	.+38     	; 0x1a42 <KEYPAD_getPressedKey+0x62>
    {
        GPIO_setupPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + col, PIN_INPUT);
    1a1c:	88 89       	ldd	r24, Y+16	; 0x10
    1a1e:	98 2f       	mov	r25, r24
    1a20:	9c 5f       	subi	r25, 0xFC	; 252
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	69 2f       	mov	r22, r25
    1a26:	40 e0       	ldi	r20, 0x00	; 0
    1a28:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <GPIO_setupPin>
        GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + col, 1); // Enable internal pull-up resistor
    1a2c:	88 89       	ldd	r24, Y+16	; 0x10
    1a2e:	98 2f       	mov	r25, r24
    1a30:	9c 5f       	subi	r25, 0xFC	; 252
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	69 2f       	mov	r22, r25
    1a36:	41 e0       	ldi	r20, 0x01	; 1
    1a38:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <GPIO_writePin>
    {
        GPIO_setupPin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
        GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, 1); // Enable internal pull-up resistor
    }
    // Setup columns as inputs with pull-up resistors
    for (col = 0; col < KEYPAD_NUM_COLS; col++)
    1a3c:	88 89       	ldd	r24, Y+16	; 0x10
    1a3e:	8f 5f       	subi	r24, 0xFF	; 255
    1a40:	88 8b       	std	Y+16, r24	; 0x10
    1a42:	88 89       	ldd	r24, Y+16	; 0x10
    1a44:	84 30       	cpi	r24, 0x04	; 4
    1a46:	50 f3       	brcs	.-44     	; 0x1a1c <KEYPAD_getPressedKey+0x3c>
        GPIO_setupPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + col, PIN_INPUT);
        GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + col, 1); // Enable internal pull-up resistor
    }
    while (1)
    {
        for (row = 0; row < KEYPAD_NUM_ROWS; row++) /* loop for rows */
    1a48:	1f 86       	std	Y+15, r1	; 0x0f
    1a4a:	c4 c0       	rjmp	.+392    	; 0x1bd4 <KEYPAD_getPressedKey+0x1f4>
        {
            /* Set this row to output low */
            GPIO_setupPin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a50:	41 e0       	ldi	r20, 0x01	; 1
    1a52:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <GPIO_setupPin>
            GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, 0);
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a5a:	40 e0       	ldi	r20, 0x00	; 0
    1a5c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <GPIO_writePin>

            for (col = 0; col < KEYPAD_NUM_COLS; col++) /* loop for columns */
    1a60:	18 8a       	std	Y+16, r1	; 0x10
    1a62:	a7 c0       	rjmp	.+334    	; 0x1bb2 <KEYPAD_getPressedKey+0x1d2>
            {
                /* Check if the switch is pressed in this column */
                if (GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + col) == 0)
    1a64:	88 89       	ldd	r24, Y+16	; 0x10
    1a66:	98 2f       	mov	r25, r24
    1a68:	9c 5f       	subi	r25, 0xFC	; 252
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	69 2f       	mov	r22, r25
    1a6e:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <GPIO_readPin>
    1a72:	88 23       	and	r24, r24
    1a74:	09 f0       	breq	.+2      	; 0x1a78 <KEYPAD_getPressedKey+0x98>
    1a76:	9a c0       	rjmp	.+308    	; 0x1bac <KEYPAD_getPressedKey+0x1cc>
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	a0 ea       	ldi	r26, 0xA0	; 160
    1a7e:	b0 e4       	ldi	r27, 0x40	; 64
    1a80:	8b 87       	std	Y+11, r24	; 0x0b
    1a82:	9c 87       	std	Y+12, r25	; 0x0c
    1a84:	ad 87       	std	Y+13, r26	; 0x0d
    1a86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	4a ef       	ldi	r20, 0xFA	; 250
    1a96:	54 e4       	ldi	r21, 0x44	; 68
    1a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	8f 83       	std	Y+7, r24	; 0x07
    1aa2:	98 87       	std	Y+8, r25	; 0x08
    1aa4:	a9 87       	std	Y+9, r26	; 0x09
    1aa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aaa:	78 85       	ldd	r23, Y+8	; 0x08
    1aac:	89 85       	ldd	r24, Y+9	; 0x09
    1aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e8       	ldi	r20, 0x80	; 128
    1ab6:	5f e3       	ldi	r21, 0x3F	; 63
    1ab8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1abc:	88 23       	and	r24, r24
    1abe:	2c f4       	brge	.+10     	; 0x1aca <KEYPAD_getPressedKey+0xea>
		__ticks = 1;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	9e 83       	std	Y+6, r25	; 0x06
    1ac6:	8d 83       	std	Y+5, r24	; 0x05
    1ac8:	3f c0       	rjmp	.+126    	; 0x1b48 <KEYPAD_getPressedKey+0x168>
	else if (__tmp > 65535)
    1aca:	6f 81       	ldd	r22, Y+7	; 0x07
    1acc:	78 85       	ldd	r23, Y+8	; 0x08
    1ace:	89 85       	ldd	r24, Y+9	; 0x09
    1ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	3f ef       	ldi	r19, 0xFF	; 255
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	57 e4       	ldi	r21, 0x47	; 71
    1ada:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	4c f5       	brge	.+82     	; 0x1b34 <KEYPAD_getPressedKey+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e2       	ldi	r20, 0x20	; 32
    1af0:	51 e4       	ldi	r21, 0x41	; 65
    1af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	bc 01       	movw	r22, r24
    1afc:	cd 01       	movw	r24, r26
    1afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	8d 83       	std	Y+5, r24	; 0x05
    1b0a:	0f c0       	rjmp	.+30     	; 0x1b2a <KEYPAD_getPressedKey+0x14a>
    1b0c:	88 ec       	ldi	r24, 0xC8	; 200
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	9c 83       	std	Y+4, r25	; 0x04
    1b12:	8b 83       	std	Y+3, r24	; 0x03
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	9c 81       	ldd	r25, Y+4	; 0x04
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <KEYPAD_getPressedKey+0x138>
    1b1c:	9c 83       	std	Y+4, r25	; 0x04
    1b1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b20:	8d 81       	ldd	r24, Y+5	; 0x05
    1b22:	9e 81       	ldd	r25, Y+6	; 0x06
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	9e 83       	std	Y+6, r25	; 0x06
    1b28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	69 f7       	brne	.-38     	; 0x1b0c <KEYPAD_getPressedKey+0x12c>
    1b32:	14 c0       	rjmp	.+40     	; 0x1b5c <KEYPAD_getPressedKey+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b34:	6f 81       	ldd	r22, Y+7	; 0x07
    1b36:	78 85       	ldd	r23, Y+8	; 0x08
    1b38:	89 85       	ldd	r24, Y+9	; 0x09
    1b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	9e 83       	std	Y+6, r25	; 0x06
    1b46:	8d 83       	std	Y+5, r24	; 0x05
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	9a 83       	std	Y+2, r25	; 0x02
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	9a 81       	ldd	r25, Y+2	; 0x02
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <KEYPAD_getPressedKey+0x174>
    1b58:	9a 83       	std	Y+2, r25	; 0x02
    1b5a:	89 83       	std	Y+1, r24	; 0x01
                {
                    /* Wait for debounce */
                    _delay_ms(5);

                    /* Check again if the button is still pressed */
                    if (GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + col) == 0)
    1b5c:	88 89       	ldd	r24, Y+16	; 0x10
    1b5e:	98 2f       	mov	r25, r24
    1b60:	9c 5f       	subi	r25, 0xFC	; 252
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	69 2f       	mov	r22, r25
    1b66:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <GPIO_readPin>
    1b6a:	88 23       	and	r24, r24
    1b6c:	f9 f4       	brne	.+62     	; 0x1bac <KEYPAD_getPressedKey+0x1cc>
                    {
                        while (GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + col) == 0);
    1b6e:	88 89       	ldd	r24, Y+16	; 0x10
    1b70:	98 2f       	mov	r25, r24
    1b72:	9c 5f       	subi	r25, 0xFC	; 252
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	69 2f       	mov	r22, r25
    1b78:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <GPIO_readPin>
    1b7c:	88 23       	and	r24, r24
    1b7e:	b9 f3       	breq	.-18     	; 0x1b6e <KEYPAD_getPressedKey+0x18e>
                            #endif
                        #elif (KEYPAD_NUM_COLS == 4)
                            #ifdef STANDARD_KEYPAD
                                return ((row * KEYPAD_NUM_COLS) + col + 1);
                            #else
                                return KEYPAD_4x4_adjustKeyNumber((row * KEYPAD_NUM_COLS) + col + 1);
    1b80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b82:	88 2f       	mov	r24, r24
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	98 2f       	mov	r25, r24
    1b90:	88 89       	ldd	r24, Y+16	; 0x10
    1b92:	89 0f       	add	r24, r25
    1b94:	8f 5f       	subi	r24, 0xFF	; 255
    1b96:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <KEYPAD_4x4_adjustKeyNumber>
            /* Set this row back to input */
            GPIO_setupPin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
            GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, 1); // Enable internal pull-up resistor
        }
    }
}
    1b9a:	60 96       	adiw	r28, 0x10	; 16
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	08 95       	ret
        {
            /* Set this row to output low */
            GPIO_setupPin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);
            GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, 0);

            for (col = 0; col < KEYPAD_NUM_COLS; col++) /* loop for columns */
    1bac:	88 89       	ldd	r24, Y+16	; 0x10
    1bae:	8f 5f       	subi	r24, 0xFF	; 255
    1bb0:	88 8b       	std	Y+16, r24	; 0x10
    1bb2:	88 89       	ldd	r24, Y+16	; 0x10
    1bb4:	84 30       	cpi	r24, 0x04	; 4
    1bb6:	08 f4       	brcc	.+2      	; 0x1bba <KEYPAD_getPressedKey+0x1da>
    1bb8:	55 cf       	rjmp	.-342    	; 0x1a64 <KEYPAD_getPressedKey+0x84>
                        #endif
                    }
                }
            }
            /* Set this row back to input */
            GPIO_setupPin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	6f 85       	ldd	r22, Y+15	; 0x0f
    1bbe:	40 e0       	ldi	r20, 0x00	; 0
    1bc0:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <GPIO_setupPin>
            GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, 1); // Enable internal pull-up resistor
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	6f 85       	ldd	r22, Y+15	; 0x0f
    1bc8:	41 e0       	ldi	r20, 0x01	; 1
    1bca:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <GPIO_writePin>
        GPIO_setupPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + col, PIN_INPUT);
        GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + col, 1); // Enable internal pull-up resistor
    }
    while (1)
    {
        for (row = 0; row < KEYPAD_NUM_ROWS; row++) /* loop for rows */
    1bce:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd0:	8f 5f       	subi	r24, 0xFF	; 255
    1bd2:	8f 87       	std	Y+15, r24	; 0x0f
    1bd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd6:	84 30       	cpi	r24, 0x04	; 4
    1bd8:	08 f4       	brcc	.+2      	; 0x1bdc <KEYPAD_getPressedKey+0x1fc>
    1bda:	38 cf       	rjmp	.-400    	; 0x1a4c <KEYPAD_getPressedKey+0x6c>
    1bdc:	35 cf       	rjmp	.-406    	; 0x1a48 <KEYPAD_getPressedKey+0x68>

00001bde <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1bec:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	3c 83       	std	Y+4, r19	; 0x04
    1bf6:	2b 83       	std	Y+3, r18	; 0x03
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	88 30       	cpi	r24, 0x08	; 8
    1bfe:	91 05       	cpc	r25, r1
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1c02:	70 c0       	rjmp	.+224    	; 0x1ce4 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1c04:	2b 81       	ldd	r18, Y+3	; 0x03
    1c06:	3c 81       	ldd	r19, Y+4	; 0x04
    1c08:	29 30       	cpi	r18, 0x09	; 9
    1c0a:	31 05       	cpc	r19, r1
    1c0c:	5c f5       	brge	.+86     	; 0x1c64 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	9c 81       	ldd	r25, Y+4	; 0x04
    1c12:	84 30       	cpi	r24, 0x04	; 4
    1c14:	91 05       	cpc	r25, r1
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1c18:	59 c0       	rjmp	.+178    	; 0x1ccc <KEYPAD_4x4_adjustKeyNumber+0xee>
    1c1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1e:	25 30       	cpi	r18, 0x05	; 5
    1c20:	31 05       	cpc	r19, r1
    1c22:	9c f4       	brge	.+38     	; 0x1c4a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	9c 81       	ldd	r25, Y+4	; 0x04
    1c28:	82 30       	cpi	r24, 0x02	; 2
    1c2a:	91 05       	cpc	r25, r1
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1c2e:	48 c0       	rjmp	.+144    	; 0x1cc0 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1c30:	2b 81       	ldd	r18, Y+3	; 0x03
    1c32:	3c 81       	ldd	r19, Y+4	; 0x04
    1c34:	23 30       	cpi	r18, 0x03	; 3
    1c36:	31 05       	cpc	r19, r1
    1c38:	0c f0       	brlt	.+2      	; 0x1c3c <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1c3a:	45 c0       	rjmp	.+138    	; 0x1cc6 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c40:	81 30       	cpi	r24, 0x01	; 1
    1c42:	91 05       	cpc	r25, r1
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1c46:	39 c0       	rjmp	.+114    	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1c48:	67 c0       	rjmp	.+206    	; 0x1d18 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1c4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4e:	26 30       	cpi	r18, 0x06	; 6
    1c50:	31 05       	cpc	r19, r1
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1c54:	41 c0       	rjmp	.+130    	; 0x1cd8 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	87 30       	cpi	r24, 0x07	; 7
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	0c f0       	brlt	.+2      	; 0x1c62 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1c60:	3e c0       	rjmp	.+124    	; 0x1cde <KEYPAD_4x4_adjustKeyNumber+0x100>
    1c62:	37 c0       	rjmp	.+110    	; 0x1cd2 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1c64:	2b 81       	ldd	r18, Y+3	; 0x03
    1c66:	3c 81       	ldd	r19, Y+4	; 0x04
    1c68:	2c 30       	cpi	r18, 0x0C	; 12
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1c6e:	46 c0       	rjmp	.+140    	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	9c 81       	ldd	r25, Y+4	; 0x04
    1c74:	8d 30       	cpi	r24, 0x0D	; 13
    1c76:	91 05       	cpc	r25, r1
    1c78:	5c f4       	brge	.+22     	; 0x1c90 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1c7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7e:	2a 30       	cpi	r18, 0x0A	; 10
    1c80:	31 05       	cpc	r19, r1
    1c82:	b1 f1       	breq	.+108    	; 0x1cf0 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	9c 81       	ldd	r25, Y+4	; 0x04
    1c88:	8b 30       	cpi	r24, 0x0B	; 11
    1c8a:	91 05       	cpc	r25, r1
    1c8c:	a4 f5       	brge	.+104    	; 0x1cf6 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1c8e:	2d c0       	rjmp	.+90     	; 0x1cea <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1c90:	2b 81       	ldd	r18, Y+3	; 0x03
    1c92:	3c 81       	ldd	r19, Y+4	; 0x04
    1c94:	2e 30       	cpi	r18, 0x0E	; 14
    1c96:	31 05       	cpc	r19, r1
    1c98:	b9 f1       	breq	.+110    	; 0x1d08 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9e:	8e 30       	cpi	r24, 0x0E	; 14
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	7c f1       	brlt	.+94     	; 0x1d02 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1ca4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca8:	2f 30       	cpi	r18, 0x0F	; 15
    1caa:	31 05       	cpc	r19, r1
    1cac:	79 f1       	breq	.+94     	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	80 31       	cpi	r24, 0x10	; 16
    1cb4:	91 05       	cpc	r25, r1
    1cb6:	69 f1       	breq	.+90     	; 0x1d12 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1cb8:	2f c0       	rjmp	.+94     	; 0x1d18 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1cba:	87 e0       	ldi	r24, 0x07	; 7
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	2e c0       	rjmp	.+92     	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1cc0:	88 e0       	ldi	r24, 0x08	; 8
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	2b c0       	rjmp	.+86     	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1cc6:	89 e0       	ldi	r24, 0x09	; 9
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    1cca:	28 c0       	rjmp	.+80     	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1ccc:	85 e2       	ldi	r24, 0x25	; 37
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	25 c0       	rjmp	.+74     	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1cd2:	84 e0       	ldi	r24, 0x04	; 4
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	22 c0       	rjmp	.+68     	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1cd8:	85 e0       	ldi	r24, 0x05	; 5
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	1f c0       	rjmp	.+62     	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1cde:	86 e0       	ldi	r24, 0x06	; 6
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	1c c0       	rjmp	.+56     	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1ce4:	8a e2       	ldi	r24, 0x2A	; 42
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	19 c0       	rjmp	.+50     	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	89 83       	std	Y+1, r24	; 0x01
    1cee:	16 c0       	rjmp	.+44     	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1cf0:	82 e0       	ldi	r24, 0x02	; 2
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	13 c0       	rjmp	.+38     	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1cf6:	83 e0       	ldi	r24, 0x03	; 3
    1cf8:	89 83       	std	Y+1, r24	; 0x01
    1cfa:	10 c0       	rjmp	.+32     	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1cfc:	8d e2       	ldi	r24, 0x2D	; 45
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	0d c0       	rjmp	.+26     	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1d02:	8d e0       	ldi	r24, 0x0D	; 13
    1d04:	89 83       	std	Y+1, r24	; 0x01
    1d06:	0a c0       	rjmp	.+20     	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1d08:	19 82       	std	Y+1, r1	; 0x01
    1d0a:	08 c0       	rjmp	.+16     	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1d0c:	8d e3       	ldi	r24, 0x3D	; 61
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	05 c0       	rjmp	.+10     	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1d12:	8b e2       	ldi	r24, 0x2B	; 43
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <GPIO_setupPin>:
#include "GPIO.h"
#include "../utils/common_macros.h"
#include "avr/io.h"

void GPIO_setupPin(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <GPIO_setupPin+0x6>
    1d32:	00 d0       	rcall	.+0      	; 0x1d34 <GPIO_setupPin+0x8>
    1d34:	0f 92       	push	r0
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	6a 83       	std	Y+2, r22	; 0x02
    1d3e:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS) || (port_num >= NUM_OF_PORTS))
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	88 30       	cpi	r24, 0x08	; 8
    1d44:	08 f0       	brcs	.+2      	; 0x1d48 <GPIO_setupPin+0x1c>
    1d46:	d5 c0       	rjmp	.+426    	; 0x1ef2 <GPIO_setupPin+0x1c6>
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	84 30       	cpi	r24, 0x04	; 4
    1d4c:	08 f0       	brcs	.+2      	; 0x1d50 <GPIO_setupPin+0x24>
    1d4e:	d1 c0       	rjmp	.+418    	; 0x1ef2 <GPIO_setupPin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	3d 83       	std	Y+5, r19	; 0x05
    1d58:	2c 83       	std	Y+4, r18	; 0x04
    1d5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5e:	81 30       	cpi	r24, 0x01	; 1
    1d60:	91 05       	cpc	r25, r1
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <GPIO_setupPin+0x3a>
    1d64:	43 c0       	rjmp	.+134    	; 0x1dec <GPIO_setupPin+0xc0>
    1d66:	2c 81       	ldd	r18, Y+4	; 0x04
    1d68:	3d 81       	ldd	r19, Y+5	; 0x05
    1d6a:	22 30       	cpi	r18, 0x02	; 2
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	2c f4       	brge	.+10     	; 0x1d7a <GPIO_setupPin+0x4e>
    1d70:	8c 81       	ldd	r24, Y+4	; 0x04
    1d72:	9d 81       	ldd	r25, Y+5	; 0x05
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	71 f0       	breq	.+28     	; 0x1d94 <GPIO_setupPin+0x68>
    1d78:	bc c0       	rjmp	.+376    	; 0x1ef2 <GPIO_setupPin+0x1c6>
    1d7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d7e:	22 30       	cpi	r18, 0x02	; 2
    1d80:	31 05       	cpc	r19, r1
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <GPIO_setupPin+0x5a>
    1d84:	5f c0       	rjmp	.+190    	; 0x1e44 <GPIO_setupPin+0x118>
    1d86:	8c 81       	ldd	r24, Y+4	; 0x04
    1d88:	9d 81       	ldd	r25, Y+5	; 0x05
    1d8a:	83 30       	cpi	r24, 0x03	; 3
    1d8c:	91 05       	cpc	r25, r1
    1d8e:	09 f4       	brne	.+2      	; 0x1d92 <GPIO_setupPin+0x66>
    1d90:	85 c0       	rjmp	.+266    	; 0x1e9c <GPIO_setupPin+0x170>
    1d92:	af c0       	rjmp	.+350    	; 0x1ef2 <GPIO_setupPin+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	81 30       	cpi	r24, 0x01	; 1
    1d98:	a1 f4       	brne	.+40     	; 0x1dc2 <GPIO_setupPin+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1d9a:	aa e3       	ldi	r26, 0x3A	; 58
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	ea e3       	ldi	r30, 0x3A	; 58
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	48 2f       	mov	r20, r24
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	02 2e       	mov	r0, r18
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <GPIO_setupPin+0x8c>
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	0a 94       	dec	r0
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <GPIO_setupPin+0x88>
    1dbc:	84 2b       	or	r24, r20
    1dbe:	8c 93       	st	X, r24
    1dc0:	98 c0       	rjmp	.+304    	; 0x1ef2 <GPIO_setupPin+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1dc2:	aa e3       	ldi	r26, 0x3A	; 58
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	ea e3       	ldi	r30, 0x3A	; 58
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	48 2f       	mov	r20, r24
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	02 2e       	mov	r0, r18
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <GPIO_setupPin+0xb4>
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	0a 94       	dec	r0
    1de2:	e2 f7       	brpl	.-8      	; 0x1ddc <GPIO_setupPin+0xb0>
    1de4:	80 95       	com	r24
    1de6:	84 23       	and	r24, r20
    1de8:	8c 93       	st	X, r24
    1dea:	83 c0       	rjmp	.+262    	; 0x1ef2 <GPIO_setupPin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	81 30       	cpi	r24, 0x01	; 1
    1df0:	a1 f4       	brne	.+40     	; 0x1e1a <GPIO_setupPin+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1df2:	a7 e3       	ldi	r26, 0x37	; 55
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e7 e3       	ldi	r30, 0x37	; 55
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	48 2f       	mov	r20, r24
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	02 2e       	mov	r0, r18
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <GPIO_setupPin+0xe4>
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	0a 94       	dec	r0
    1e12:	e2 f7       	brpl	.-8      	; 0x1e0c <GPIO_setupPin+0xe0>
    1e14:	84 2b       	or	r24, r20
    1e16:	8c 93       	st	X, r24
    1e18:	6c c0       	rjmp	.+216    	; 0x1ef2 <GPIO_setupPin+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1e1a:	a7 e3       	ldi	r26, 0x37	; 55
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e7 e3       	ldi	r30, 0x37	; 55
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	48 2f       	mov	r20, r24
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	02 2e       	mov	r0, r18
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <GPIO_setupPin+0x10c>
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	0a 94       	dec	r0
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <GPIO_setupPin+0x108>
    1e3c:	80 95       	com	r24
    1e3e:	84 23       	and	r24, r20
    1e40:	8c 93       	st	X, r24
    1e42:	57 c0       	rjmp	.+174    	; 0x1ef2 <GPIO_setupPin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	a1 f4       	brne	.+40     	; 0x1e72 <GPIO_setupPin+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1e4a:	a4 e3       	ldi	r26, 0x34	; 52
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e4 e3       	ldi	r30, 0x34	; 52
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	48 2f       	mov	r20, r24
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	02 2e       	mov	r0, r18
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <GPIO_setupPin+0x13c>
    1e64:	88 0f       	add	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	0a 94       	dec	r0
    1e6a:	e2 f7       	brpl	.-8      	; 0x1e64 <GPIO_setupPin+0x138>
    1e6c:	84 2b       	or	r24, r20
    1e6e:	8c 93       	st	X, r24
    1e70:	40 c0       	rjmp	.+128    	; 0x1ef2 <GPIO_setupPin+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1e72:	a4 e3       	ldi	r26, 0x34	; 52
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e4 e3       	ldi	r30, 0x34	; 52
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	48 2f       	mov	r20, r24
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	28 2f       	mov	r18, r24
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	02 2e       	mov	r0, r18
    1e8a:	02 c0       	rjmp	.+4      	; 0x1e90 <GPIO_setupPin+0x164>
    1e8c:	88 0f       	add	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	0a 94       	dec	r0
    1e92:	e2 f7       	brpl	.-8      	; 0x1e8c <GPIO_setupPin+0x160>
    1e94:	80 95       	com	r24
    1e96:	84 23       	and	r24, r20
    1e98:	8c 93       	st	X, r24
    1e9a:	2b c0       	rjmp	.+86     	; 0x1ef2 <GPIO_setupPin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	81 30       	cpi	r24, 0x01	; 1
    1ea0:	a1 f4       	brne	.+40     	; 0x1eca <GPIO_setupPin+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1ea2:	a1 e3       	ldi	r26, 0x31	; 49
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e1 e3       	ldi	r30, 0x31	; 49
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	48 2f       	mov	r20, r24
    1eae:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	02 2e       	mov	r0, r18
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <GPIO_setupPin+0x194>
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	0a 94       	dec	r0
    1ec2:	e2 f7       	brpl	.-8      	; 0x1ebc <GPIO_setupPin+0x190>
    1ec4:	84 2b       	or	r24, r20
    1ec6:	8c 93       	st	X, r24
    1ec8:	14 c0       	rjmp	.+40     	; 0x1ef2 <GPIO_setupPin+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1eca:	a1 e3       	ldi	r26, 0x31	; 49
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e1 e3       	ldi	r30, 0x31	; 49
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	48 2f       	mov	r20, r24
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	02 2e       	mov	r0, r18
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <GPIO_setupPin+0x1bc>
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	0a 94       	dec	r0
    1eea:	e2 f7       	brpl	.-8      	; 0x1ee4 <GPIO_setupPin+0x1b8>
    1eec:	80 95       	com	r24
    1eee:	84 23       	and	r24, r20
    1ef0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <GPIO_writePin>:
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <GPIO_writePin+0x6>
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <GPIO_writePin+0x8>
    1f0a:	0f 92       	push	r0
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	89 83       	std	Y+1, r24	; 0x01
    1f12:	6a 83       	std	Y+2, r22	; 0x02
    1f14:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS) || (port_num >= NUM_OF_PORTS))
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	88 30       	cpi	r24, 0x08	; 8
    1f1a:	08 f0       	brcs	.+2      	; 0x1f1e <GPIO_writePin+0x1c>
    1f1c:	d5 c0       	rjmp	.+426    	; 0x20c8 <GPIO_writePin+0x1c6>
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	84 30       	cpi	r24, 0x04	; 4
    1f22:	08 f0       	brcs	.+2      	; 0x1f26 <GPIO_writePin+0x24>
    1f24:	d1 c0       	rjmp	.+418    	; 0x20c8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	3d 83       	std	Y+5, r19	; 0x05
    1f2e:	2c 83       	std	Y+4, r18	; 0x04
    1f30:	8c 81       	ldd	r24, Y+4	; 0x04
    1f32:	9d 81       	ldd	r25, Y+5	; 0x05
    1f34:	81 30       	cpi	r24, 0x01	; 1
    1f36:	91 05       	cpc	r25, r1
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <GPIO_writePin+0x3a>
    1f3a:	43 c0       	rjmp	.+134    	; 0x1fc2 <GPIO_writePin+0xc0>
    1f3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f40:	22 30       	cpi	r18, 0x02	; 2
    1f42:	31 05       	cpc	r19, r1
    1f44:	2c f4       	brge	.+10     	; 0x1f50 <GPIO_writePin+0x4e>
    1f46:	8c 81       	ldd	r24, Y+4	; 0x04
    1f48:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	71 f0       	breq	.+28     	; 0x1f6a <GPIO_writePin+0x68>
    1f4e:	bc c0       	rjmp	.+376    	; 0x20c8 <GPIO_writePin+0x1c6>
    1f50:	2c 81       	ldd	r18, Y+4	; 0x04
    1f52:	3d 81       	ldd	r19, Y+5	; 0x05
    1f54:	22 30       	cpi	r18, 0x02	; 2
    1f56:	31 05       	cpc	r19, r1
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <GPIO_writePin+0x5a>
    1f5a:	5f c0       	rjmp	.+190    	; 0x201a <GPIO_writePin+0x118>
    1f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f60:	83 30       	cpi	r24, 0x03	; 3
    1f62:	91 05       	cpc	r25, r1
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <GPIO_writePin+0x66>
    1f66:	85 c0       	rjmp	.+266    	; 0x2072 <GPIO_writePin+0x170>
    1f68:	af c0       	rjmp	.+350    	; 0x20c8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	81 30       	cpi	r24, 0x01	; 1
    1f6e:	a1 f4       	brne	.+40     	; 0x1f98 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1f70:	ab e3       	ldi	r26, 0x3B	; 59
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	eb e3       	ldi	r30, 0x3B	; 59
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	48 2f       	mov	r20, r24
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	02 2e       	mov	r0, r18
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <GPIO_writePin+0x8c>
    1f8a:	88 0f       	add	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	0a 94       	dec	r0
    1f90:	e2 f7       	brpl	.-8      	; 0x1f8a <GPIO_writePin+0x88>
    1f92:	84 2b       	or	r24, r20
    1f94:	8c 93       	st	X, r24
    1f96:	98 c0       	rjmp	.+304    	; 0x20c8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1f98:	ab e3       	ldi	r26, 0x3B	; 59
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	eb e3       	ldi	r30, 0x3B	; 59
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	48 2f       	mov	r20, r24
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	02 2e       	mov	r0, r18
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <GPIO_writePin+0xb4>
    1fb2:	88 0f       	add	r24, r24
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	0a 94       	dec	r0
    1fb8:	e2 f7       	brpl	.-8      	; 0x1fb2 <GPIO_writePin+0xb0>
    1fba:	80 95       	com	r24
    1fbc:	84 23       	and	r24, r20
    1fbe:	8c 93       	st	X, r24
    1fc0:	83 c0       	rjmp	.+262    	; 0x20c8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	81 30       	cpi	r24, 0x01	; 1
    1fc6:	a1 f4       	brne	.+40     	; 0x1ff0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1fc8:	a8 e3       	ldi	r26, 0x38	; 56
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e8 e3       	ldi	r30, 0x38	; 56
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	48 2f       	mov	r20, r24
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	02 2e       	mov	r0, r18
    1fe0:	02 c0       	rjmp	.+4      	; 0x1fe6 <GPIO_writePin+0xe4>
    1fe2:	88 0f       	add	r24, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	0a 94       	dec	r0
    1fe8:	e2 f7       	brpl	.-8      	; 0x1fe2 <GPIO_writePin+0xe0>
    1fea:	84 2b       	or	r24, r20
    1fec:	8c 93       	st	X, r24
    1fee:	6c c0       	rjmp	.+216    	; 0x20c8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1ff0:	a8 e3       	ldi	r26, 0x38	; 56
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	e8 e3       	ldi	r30, 0x38	; 56
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	48 2f       	mov	r20, r24
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	28 2f       	mov	r18, r24
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	02 2e       	mov	r0, r18
    2008:	02 c0       	rjmp	.+4      	; 0x200e <GPIO_writePin+0x10c>
    200a:	88 0f       	add	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	0a 94       	dec	r0
    2010:	e2 f7       	brpl	.-8      	; 0x200a <GPIO_writePin+0x108>
    2012:	80 95       	com	r24
    2014:	84 23       	and	r24, r20
    2016:	8c 93       	st	X, r24
    2018:	57 c0       	rjmp	.+174    	; 0x20c8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	81 30       	cpi	r24, 0x01	; 1
    201e:	a1 f4       	brne	.+40     	; 0x2048 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2020:	a5 e3       	ldi	r26, 0x35	; 53
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e5 e3       	ldi	r30, 0x35	; 53
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	48 2f       	mov	r20, r24
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	28 2f       	mov	r18, r24
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	02 2e       	mov	r0, r18
    2038:	02 c0       	rjmp	.+4      	; 0x203e <GPIO_writePin+0x13c>
    203a:	88 0f       	add	r24, r24
    203c:	99 1f       	adc	r25, r25
    203e:	0a 94       	dec	r0
    2040:	e2 f7       	brpl	.-8      	; 0x203a <GPIO_writePin+0x138>
    2042:	84 2b       	or	r24, r20
    2044:	8c 93       	st	X, r24
    2046:	40 c0       	rjmp	.+128    	; 0x20c8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2048:	a5 e3       	ldi	r26, 0x35	; 53
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	e5 e3       	ldi	r30, 0x35	; 53
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	48 2f       	mov	r20, r24
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	02 2e       	mov	r0, r18
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <GPIO_writePin+0x164>
    2062:	88 0f       	add	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	0a 94       	dec	r0
    2068:	e2 f7       	brpl	.-8      	; 0x2062 <GPIO_writePin+0x160>
    206a:	80 95       	com	r24
    206c:	84 23       	and	r24, r20
    206e:	8c 93       	st	X, r24
    2070:	2b c0       	rjmp	.+86     	; 0x20c8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	81 30       	cpi	r24, 0x01	; 1
    2076:	a1 f4       	brne	.+40     	; 0x20a0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2078:	a2 e3       	ldi	r26, 0x32	; 50
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e2 e3       	ldi	r30, 0x32	; 50
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	48 2f       	mov	r20, r24
    2084:	8a 81       	ldd	r24, Y+2	; 0x02
    2086:	28 2f       	mov	r18, r24
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	02 2e       	mov	r0, r18
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <GPIO_writePin+0x194>
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	0a 94       	dec	r0
    2098:	e2 f7       	brpl	.-8      	; 0x2092 <GPIO_writePin+0x190>
    209a:	84 2b       	or	r24, r20
    209c:	8c 93       	st	X, r24
    209e:	14 c0       	rjmp	.+40     	; 0x20c8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    20a0:	a2 e3       	ldi	r26, 0x32	; 50
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e2 e3       	ldi	r30, 0x32	; 50
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	48 2f       	mov	r20, r24
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	02 2e       	mov	r0, r18
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <GPIO_writePin+0x1bc>
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	0a 94       	dec	r0
    20c0:	e2 f7       	brpl	.-8      	; 0x20ba <GPIO_writePin+0x1b8>
    20c2:	80 95       	com	r24
    20c4:	84 23       	and	r24, r20
    20c6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	08 95       	ret

000020d8 <GPIO_readPin>:

uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	00 d0       	rcall	.+0      	; 0x20de <GPIO_readPin+0x6>
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <GPIO_readPin+0x8>
    20e0:	0f 92       	push	r0
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	8a 83       	std	Y+2, r24	; 0x02
    20e8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    20ea:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS) || (port_num >= NUM_OF_PORTS))
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	88 30       	cpi	r24, 0x08	; 8
    20f0:	08 f0       	brcs	.+2      	; 0x20f4 <GPIO_readPin+0x1c>
    20f2:	84 c0       	rjmp	.+264    	; 0x21fc <GPIO_readPin+0x124>
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	84 30       	cpi	r24, 0x04	; 4
    20f8:	08 f0       	brcs	.+2      	; 0x20fc <GPIO_readPin+0x24>
    20fa:	80 c0       	rjmp	.+256    	; 0x21fc <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	28 2f       	mov	r18, r24
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	3d 83       	std	Y+5, r19	; 0x05
    2104:	2c 83       	std	Y+4, r18	; 0x04
    2106:	4c 81       	ldd	r20, Y+4	; 0x04
    2108:	5d 81       	ldd	r21, Y+5	; 0x05
    210a:	41 30       	cpi	r20, 0x01	; 1
    210c:	51 05       	cpc	r21, r1
    210e:	79 f1       	breq	.+94     	; 0x216e <GPIO_readPin+0x96>
    2110:	8c 81       	ldd	r24, Y+4	; 0x04
    2112:	9d 81       	ldd	r25, Y+5	; 0x05
    2114:	82 30       	cpi	r24, 0x02	; 2
    2116:	91 05       	cpc	r25, r1
    2118:	34 f4       	brge	.+12     	; 0x2126 <GPIO_readPin+0x4e>
    211a:	2c 81       	ldd	r18, Y+4	; 0x04
    211c:	3d 81       	ldd	r19, Y+5	; 0x05
    211e:	21 15       	cp	r18, r1
    2120:	31 05       	cpc	r19, r1
    2122:	69 f0       	breq	.+26     	; 0x213e <GPIO_readPin+0x66>
    2124:	6b c0       	rjmp	.+214    	; 0x21fc <GPIO_readPin+0x124>
    2126:	4c 81       	ldd	r20, Y+4	; 0x04
    2128:	5d 81       	ldd	r21, Y+5	; 0x05
    212a:	42 30       	cpi	r20, 0x02	; 2
    212c:	51 05       	cpc	r21, r1
    212e:	b9 f1       	breq	.+110    	; 0x219e <GPIO_readPin+0xc6>
    2130:	8c 81       	ldd	r24, Y+4	; 0x04
    2132:	9d 81       	ldd	r25, Y+5	; 0x05
    2134:	83 30       	cpi	r24, 0x03	; 3
    2136:	91 05       	cpc	r25, r1
    2138:	09 f4       	brne	.+2      	; 0x213c <GPIO_readPin+0x64>
    213a:	49 c0       	rjmp	.+146    	; 0x21ce <GPIO_readPin+0xf6>
    213c:	5f c0       	rjmp	.+190    	; 0x21fc <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    213e:	e9 e3       	ldi	r30, 0x39	; 57
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	88 2f       	mov	r24, r24
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	a9 01       	movw	r20, r18
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <GPIO_readPin+0x7e>
    2152:	55 95       	asr	r21
    2154:	47 95       	ror	r20
    2156:	8a 95       	dec	r24
    2158:	e2 f7       	brpl	.-8      	; 0x2152 <GPIO_readPin+0x7a>
    215a:	ca 01       	movw	r24, r20
    215c:	81 70       	andi	r24, 0x01	; 1
    215e:	90 70       	andi	r25, 0x00	; 0
    2160:	88 23       	and	r24, r24
    2162:	19 f0       	breq	.+6      	; 0x216a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	49 c0       	rjmp	.+146    	; 0x21fc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    216a:	19 82       	std	Y+1, r1	; 0x01
    216c:	47 c0       	rjmp	.+142    	; 0x21fc <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    216e:	e6 e3       	ldi	r30, 0x36	; 54
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	88 2f       	mov	r24, r24
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	a9 01       	movw	r20, r18
    2180:	02 c0       	rjmp	.+4      	; 0x2186 <GPIO_readPin+0xae>
    2182:	55 95       	asr	r21
    2184:	47 95       	ror	r20
    2186:	8a 95       	dec	r24
    2188:	e2 f7       	brpl	.-8      	; 0x2182 <GPIO_readPin+0xaa>
    218a:	ca 01       	movw	r24, r20
    218c:	81 70       	andi	r24, 0x01	; 1
    218e:	90 70       	andi	r25, 0x00	; 0
    2190:	88 23       	and	r24, r24
    2192:	19 f0       	breq	.+6      	; 0x219a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	31 c0       	rjmp	.+98     	; 0x21fc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    219a:	19 82       	std	Y+1, r1	; 0x01
    219c:	2f c0       	rjmp	.+94     	; 0x21fc <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    219e:	e3 e3       	ldi	r30, 0x33	; 51
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	88 2f       	mov	r24, r24
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	a9 01       	movw	r20, r18
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <GPIO_readPin+0xde>
    21b2:	55 95       	asr	r21
    21b4:	47 95       	ror	r20
    21b6:	8a 95       	dec	r24
    21b8:	e2 f7       	brpl	.-8      	; 0x21b2 <GPIO_readPin+0xda>
    21ba:	ca 01       	movw	r24, r20
    21bc:	81 70       	andi	r24, 0x01	; 1
    21be:	90 70       	andi	r25, 0x00	; 0
    21c0:	88 23       	and	r24, r24
    21c2:	19 f0       	breq	.+6      	; 0x21ca <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	89 83       	std	Y+1, r24	; 0x01
    21c8:	19 c0       	rjmp	.+50     	; 0x21fc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21ca:	19 82       	std	Y+1, r1	; 0x01
    21cc:	17 c0       	rjmp	.+46     	; 0x21fc <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    21ce:	e0 e3       	ldi	r30, 0x30	; 48
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	28 2f       	mov	r18, r24
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	88 2f       	mov	r24, r24
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	a9 01       	movw	r20, r18
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <GPIO_readPin+0x10e>
    21e2:	55 95       	asr	r21
    21e4:	47 95       	ror	r20
    21e6:	8a 95       	dec	r24
    21e8:	e2 f7       	brpl	.-8      	; 0x21e2 <GPIO_readPin+0x10a>
    21ea:	ca 01       	movw	r24, r20
    21ec:	81 70       	andi	r24, 0x01	; 1
    21ee:	90 70       	andi	r25, 0x00	; 0
    21f0:	88 23       	and	r24, r24
    21f2:	19 f0       	breq	.+6      	; 0x21fa <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	89 83       	std	Y+1, r24	; 0x01
    21f8:	01 c0       	rjmp	.+2      	; 0x21fc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21fa:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <GPIO_setupPort>:
void GPIO_setupPort(uint8 port_num, GPIO_PortDirectionType direction)
{
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	00 d0       	rcall	.+0      	; 0x2214 <GPIO_setupPort+0x6>
    2214:	00 d0       	rcall	.+0      	; 0x2216 <GPIO_setupPort+0x8>
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	89 83       	std	Y+1, r24	; 0x01
    221c:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	84 30       	cpi	r24, 0x04	; 4
    2222:	90 f5       	brcc	.+100    	; 0x2288 <GPIO_setupPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	28 2f       	mov	r18, r24
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	3c 83       	std	Y+4, r19	; 0x04
    222c:	2b 83       	std	Y+3, r18	; 0x03
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	9c 81       	ldd	r25, Y+4	; 0x04
    2232:	81 30       	cpi	r24, 0x01	; 1
    2234:	91 05       	cpc	r25, r1
    2236:	d1 f0       	breq	.+52     	; 0x226c <GPIO_setupPort+0x5e>
    2238:	2b 81       	ldd	r18, Y+3	; 0x03
    223a:	3c 81       	ldd	r19, Y+4	; 0x04
    223c:	22 30       	cpi	r18, 0x02	; 2
    223e:	31 05       	cpc	r19, r1
    2240:	2c f4       	brge	.+10     	; 0x224c <GPIO_setupPort+0x3e>
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	9c 81       	ldd	r25, Y+4	; 0x04
    2246:	00 97       	sbiw	r24, 0x00	; 0
    2248:	61 f0       	breq	.+24     	; 0x2262 <GPIO_setupPort+0x54>
    224a:	1e c0       	rjmp	.+60     	; 0x2288 <GPIO_setupPort+0x7a>
    224c:	2b 81       	ldd	r18, Y+3	; 0x03
    224e:	3c 81       	ldd	r19, Y+4	; 0x04
    2250:	22 30       	cpi	r18, 0x02	; 2
    2252:	31 05       	cpc	r19, r1
    2254:	81 f0       	breq	.+32     	; 0x2276 <GPIO_setupPort+0x68>
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	9c 81       	ldd	r25, Y+4	; 0x04
    225a:	83 30       	cpi	r24, 0x03	; 3
    225c:	91 05       	cpc	r25, r1
    225e:	81 f0       	breq	.+32     	; 0x2280 <GPIO_setupPort+0x72>
    2260:	13 c0       	rjmp	.+38     	; 0x2288 <GPIO_setupPort+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2262:	ea e3       	ldi	r30, 0x3A	; 58
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	80 83       	st	Z, r24
    226a:	0e c0       	rjmp	.+28     	; 0x2288 <GPIO_setupPort+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    226c:	e7 e3       	ldi	r30, 0x37	; 55
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	80 83       	st	Z, r24
    2274:	09 c0       	rjmp	.+18     	; 0x2288 <GPIO_setupPort+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2276:	e4 e3       	ldi	r30, 0x34	; 52
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	80 83       	st	Z, r24
    227e:	04 c0       	rjmp	.+8      	; 0x2288 <GPIO_setupPort+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2280:	e1 e3       	ldi	r30, 0x31	; 49
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	80 83       	st	Z, r24
			break;
		}
	}
}
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	08 95       	ret

00002296 <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	00 d0       	rcall	.+0      	; 0x229c <GPIO_writePort+0x6>
    229c:	00 d0       	rcall	.+0      	; 0x229e <GPIO_writePort+0x8>
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	89 83       	std	Y+1, r24	; 0x01
    22a4:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	84 30       	cpi	r24, 0x04	; 4
    22aa:	90 f5       	brcc	.+100    	; 0x2310 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	28 2f       	mov	r18, r24
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	3c 83       	std	Y+4, r19	; 0x04
    22b4:	2b 83       	std	Y+3, r18	; 0x03
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ba:	81 30       	cpi	r24, 0x01	; 1
    22bc:	91 05       	cpc	r25, r1
    22be:	d1 f0       	breq	.+52     	; 0x22f4 <GPIO_writePort+0x5e>
    22c0:	2b 81       	ldd	r18, Y+3	; 0x03
    22c2:	3c 81       	ldd	r19, Y+4	; 0x04
    22c4:	22 30       	cpi	r18, 0x02	; 2
    22c6:	31 05       	cpc	r19, r1
    22c8:	2c f4       	brge	.+10     	; 0x22d4 <GPIO_writePort+0x3e>
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	9c 81       	ldd	r25, Y+4	; 0x04
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	61 f0       	breq	.+24     	; 0x22ea <GPIO_writePort+0x54>
    22d2:	1e c0       	rjmp	.+60     	; 0x2310 <GPIO_writePort+0x7a>
    22d4:	2b 81       	ldd	r18, Y+3	; 0x03
    22d6:	3c 81       	ldd	r19, Y+4	; 0x04
    22d8:	22 30       	cpi	r18, 0x02	; 2
    22da:	31 05       	cpc	r19, r1
    22dc:	81 f0       	breq	.+32     	; 0x22fe <GPIO_writePort+0x68>
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	9c 81       	ldd	r25, Y+4	; 0x04
    22e2:	83 30       	cpi	r24, 0x03	; 3
    22e4:	91 05       	cpc	r25, r1
    22e6:	81 f0       	breq	.+32     	; 0x2308 <GPIO_writePort+0x72>
    22e8:	13 c0       	rjmp	.+38     	; 0x2310 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    22ea:	eb e3       	ldi	r30, 0x3B	; 59
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	80 83       	st	Z, r24
    22f2:	0e c0       	rjmp	.+28     	; 0x2310 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    22f4:	e8 e3       	ldi	r30, 0x38	; 56
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	8a 81       	ldd	r24, Y+2	; 0x02
    22fa:	80 83       	st	Z, r24
    22fc:	09 c0       	rjmp	.+18     	; 0x2310 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    22fe:	e5 e3       	ldi	r30, 0x35	; 53
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	80 83       	st	Z, r24
    2306:	04 c0       	rjmp	.+8      	; 0x2310 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2308:	e2 e3       	ldi	r30, 0x32	; 50
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	8a 81       	ldd	r24, Y+2	; 0x02
    230e:	80 83       	st	Z, r24
			break;
		}
	}
}
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num)
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	00 d0       	rcall	.+0      	; 0x2324 <GPIO_readPort+0x6>
    2324:	00 d0       	rcall	.+0      	; 0x2326 <GPIO_readPort+0x8>
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    232c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	84 30       	cpi	r24, 0x04	; 4
    2332:	90 f5       	brcc	.+100    	; 0x2398 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2334:	8a 81       	ldd	r24, Y+2	; 0x02
    2336:	28 2f       	mov	r18, r24
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	3c 83       	std	Y+4, r19	; 0x04
    233c:	2b 83       	std	Y+3, r18	; 0x03
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	9c 81       	ldd	r25, Y+4	; 0x04
    2342:	81 30       	cpi	r24, 0x01	; 1
    2344:	91 05       	cpc	r25, r1
    2346:	d1 f0       	breq	.+52     	; 0x237c <GPIO_readPort+0x5e>
    2348:	2b 81       	ldd	r18, Y+3	; 0x03
    234a:	3c 81       	ldd	r19, Y+4	; 0x04
    234c:	22 30       	cpi	r18, 0x02	; 2
    234e:	31 05       	cpc	r19, r1
    2350:	2c f4       	brge	.+10     	; 0x235c <GPIO_readPort+0x3e>
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	9c 81       	ldd	r25, Y+4	; 0x04
    2356:	00 97       	sbiw	r24, 0x00	; 0
    2358:	61 f0       	breq	.+24     	; 0x2372 <GPIO_readPort+0x54>
    235a:	1e c0       	rjmp	.+60     	; 0x2398 <GPIO_readPort+0x7a>
    235c:	2b 81       	ldd	r18, Y+3	; 0x03
    235e:	3c 81       	ldd	r19, Y+4	; 0x04
    2360:	22 30       	cpi	r18, 0x02	; 2
    2362:	31 05       	cpc	r19, r1
    2364:	81 f0       	breq	.+32     	; 0x2386 <GPIO_readPort+0x68>
    2366:	8b 81       	ldd	r24, Y+3	; 0x03
    2368:	9c 81       	ldd	r25, Y+4	; 0x04
    236a:	83 30       	cpi	r24, 0x03	; 3
    236c:	91 05       	cpc	r25, r1
    236e:	81 f0       	breq	.+32     	; 0x2390 <GPIO_readPort+0x72>
    2370:	13 c0       	rjmp	.+38     	; 0x2398 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2372:	e9 e3       	ldi	r30, 0x39	; 57
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	89 83       	std	Y+1, r24	; 0x01
    237a:	0e c0       	rjmp	.+28     	; 0x2398 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    237c:	e6 e3       	ldi	r30, 0x36	; 54
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	09 c0       	rjmp	.+18     	; 0x2398 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2386:	e3 e3       	ldi	r30, 0x33	; 51
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	89 83       	std	Y+1, r24	; 0x01
    238e:	04 c0       	rjmp	.+8      	; 0x2398 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2390:	e0 e3       	ldi	r30, 0x30	; 48
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2398:	89 81       	ldd	r24, Y+1	; 0x01
}
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	08 95       	ret

000023a8 <counter>:

volatile uint8 errorCounter = 0;
volatile uint8 correctPassword[5];

void counter(void)
{
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
	ticks++;
    23b0:	80 91 fe 00 	lds	r24, 0x00FE
    23b4:	8f 5f       	subi	r24, 0xFF	; 255
    23b6:	80 93 fe 00 	sts	0x00FE, r24
	if(ticks==15) /*15sec*/
    23ba:	80 91 fe 00 	lds	r24, 0x00FE
    23be:	8f 30       	cpi	r24, 0x0F	; 15
    23c0:	39 f4       	brne	.+14     	; 0x23d0 <counter+0x28>
	{
		LCD_clearScreen();
    23c2:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <LCD_clearScreen>
		LCD_displayString("Door is Unlocked");
    23c6:	80 e6       	ldi	r24, 0x60	; 96
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_displayString>
    23ce:	1b c0       	rjmp	.+54     	; 0x2406 <counter+0x5e>
	}
	else if(ticks == 18) /*3 sec after the first 15*/
    23d0:	80 91 fe 00 	lds	r24, 0x00FE
    23d4:	82 31       	cpi	r24, 0x12	; 18
    23d6:	39 f4       	brne	.+14     	; 0x23e6 <counter+0x3e>
	{
		LCD_clearScreen();
    23d8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <LCD_clearScreen>
		LCD_displayString("Door is locking");
    23dc:	81 e7       	ldi	r24, 0x71	; 113
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_displayString>
    23e4:	10 c0       	rjmp	.+32     	; 0x2406 <counter+0x5e>
	}
	else if (ticks == 33)/*15 secs past the first 18*/
    23e6:	80 91 fe 00 	lds	r24, 0x00FE
    23ea:	81 32       	cpi	r24, 0x21	; 33
    23ec:	61 f4       	brne	.+24     	; 0x2406 <counter+0x5e>
	{
		Timer1_deInit();
    23ee:	0e 94 9b 07 	call	0xf36	; 0xf36 <Timer1_deInit>
		ticks=0;
    23f2:	10 92 fe 00 	sts	0x00FE, r1
		LCD_clearScreen();
    23f6:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <LCD_clearScreen>
		LCD_displayString("Door is locked");
    23fa:	81 e8       	ldi	r24, 0x81	; 129
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_displayString>
		stay = 0;
    2402:	10 92 fa 00 	sts	0x00FA, r1
	}
}
    2406:	cf 91       	pop	r28
    2408:	df 91       	pop	r29
    240a:	08 95       	ret

0000240c <startTimer>:


void startTimer()
{
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	00 d0       	rcall	.+0      	; 0x2412 <startTimer+0x6>
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62

	Timer1_setCallBack(counter);
    2416:	84 ed       	ldi	r24, 0xD4	; 212
    2418:	91 e1       	ldi	r25, 0x11	; 17
    241a:	0e 94 b3 07 	call	0xf66	; 0xf66 <Timer1_setCallBack>
	Timer1_ConfigType *Timer_Config;
	Timer_Config ->mode = compare;
    241e:	e9 81       	ldd	r30, Y+1	; 0x01
    2420:	fa 81       	ldd	r31, Y+2	; 0x02
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	85 83       	std	Z+5, r24	; 0x05
	Timer_Config ->compare_value = 31250;
    2426:	e9 81       	ldd	r30, Y+1	; 0x01
    2428:	fa 81       	ldd	r31, Y+2	; 0x02
    242a:	82 e1       	ldi	r24, 0x12	; 18
    242c:	9a e7       	ldi	r25, 0x7A	; 122
    242e:	93 83       	std	Z+3, r25	; 0x03
    2430:	82 83       	std	Z+2, r24	; 0x02
	Timer_Config ->intial_value = 0;
    2432:	e9 81       	ldd	r30, Y+1	; 0x01
    2434:	fa 81       	ldd	r31, Y+2	; 0x02
    2436:	11 82       	std	Z+1, r1	; 0x01
    2438:	10 82       	st	Z, r1
	Timer_Config ->prescaler = clk_256_prescaler;
    243a:	e9 81       	ldd	r30, Y+1	; 0x01
    243c:	fa 81       	ldd	r31, Y+2	; 0x02
    243e:	84 e0       	ldi	r24, 0x04	; 4
    2440:	84 83       	std	Z+4, r24	; 0x04
	Timer1_init(Timer_Config);
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	9a 81       	ldd	r25, Y+2	; 0x02
    2446:	0e 94 54 07 	call	0xea8	; 0xea8 <Timer1_init>

}
    244a:	0f 90       	pop	r0
    244c:	0f 90       	pop	r0
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	08 95       	ret

00002454 <getPassword>:

/*Landing Page Functions */
void getPassword(uint8*password,uint8 startColumn)
{
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	00 d0       	rcall	.+0      	; 0x245a <getPassword+0x6>
    245a:	00 d0       	rcall	.+0      	; 0x245c <getPassword+0x8>
    245c:	00 d0       	rcall	.+0      	; 0x245e <getPassword+0xa>
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
    2462:	9d 83       	std	Y+5, r25	; 0x05
    2464:	8c 83       	std	Y+4, r24	; 0x04
    2466:	6e 83       	std	Y+6, r22	; 0x06
	int counter = 0;
    2468:	1b 82       	std	Y+3, r1	; 0x03
    246a:	1a 82       	std	Y+2, r1	; 0x02
    246c:	1b c0       	rjmp	.+54     	; 0x24a4 <getPassword+0x50>
	uint8 key;
	while(counter<5)
	{
		key = KEYPAD_getPressedKey();
    246e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <KEYPAD_getPressedKey>
    2472:	89 83       	std	Y+1, r24	; 0x01
		LCD_moveCursor(1,counter + startColumn);
    2474:	9a 81       	ldd	r25, Y+2	; 0x02
    2476:	8e 81       	ldd	r24, Y+6	; 0x06
    2478:	98 0f       	add	r25, r24
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	69 2f       	mov	r22, r25
    247e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <LCD_moveCursor>
		LCD_displayCharacter('*');
    2482:	8a e2       	ldi	r24, 0x2A	; 42
    2484:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_displayCharacter>
		password[counter] = key;
    2488:	2a 81       	ldd	r18, Y+2	; 0x02
    248a:	3b 81       	ldd	r19, Y+3	; 0x03
    248c:	8c 81       	ldd	r24, Y+4	; 0x04
    248e:	9d 81       	ldd	r25, Y+5	; 0x05
    2490:	fc 01       	movw	r30, r24
    2492:	e2 0f       	add	r30, r18
    2494:	f3 1f       	adc	r31, r19
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	80 83       	st	Z, r24
		counter ++;
    249a:	8a 81       	ldd	r24, Y+2	; 0x02
    249c:	9b 81       	ldd	r25, Y+3	; 0x03
    249e:	01 96       	adiw	r24, 0x01	; 1
    24a0:	9b 83       	std	Y+3, r25	; 0x03
    24a2:	8a 83       	std	Y+2, r24	; 0x02
/*Landing Page Functions */
void getPassword(uint8*password,uint8 startColumn)
{
	int counter = 0;
	uint8 key;
	while(counter<5)
    24a4:	8a 81       	ldd	r24, Y+2	; 0x02
    24a6:	9b 81       	ldd	r25, Y+3	; 0x03
    24a8:	85 30       	cpi	r24, 0x05	; 5
    24aa:	91 05       	cpc	r25, r1
    24ac:	04 f3       	brlt	.-64     	; 0x246e <getPassword+0x1a>
		LCD_moveCursor(1,counter + startColumn);
		LCD_displayCharacter('*');
		password[counter] = key;
		counter ++;
	}
}
    24ae:	26 96       	adiw	r28, 0x06	; 6
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <sendPassword>:

void sendPassword(uint8 *password)
{
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    24c8:	62 97       	sbiw	r28, 0x12	; 18
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	de bf       	out	0x3e, r29	; 62
    24d0:	0f be       	out	0x3f, r0	; 63
    24d2:	cd bf       	out	0x3d, r28	; 61
    24d4:	9a 8b       	std	Y+18, r25	; 0x12
    24d6:	89 8b       	std	Y+17, r24	; 0x11
	for(int i = 0;i<5;i++)
    24d8:	18 8a       	std	Y+16, r1	; 0x10
    24da:	1f 86       	std	Y+15, r1	; 0x0f
    24dc:	81 c0       	rjmp	.+258    	; 0x25e0 <sendPassword+0x120>
	{
		UART_sendByte(password[i]);
    24de:	2f 85       	ldd	r18, Y+15	; 0x0f
    24e0:	38 89       	ldd	r19, Y+16	; 0x10
    24e2:	89 89       	ldd	r24, Y+17	; 0x11
    24e4:	9a 89       	ldd	r25, Y+18	; 0x12
    24e6:	fc 01       	movw	r30, r24
    24e8:	e2 0f       	add	r30, r18
    24ea:	f3 1f       	adc	r31, r19
    24ec:	80 81       	ld	r24, Z
    24ee:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <UART_sendByte>
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	a8 e4       	ldi	r26, 0x48	; 72
    24f8:	b2 e4       	ldi	r27, 0x42	; 66
    24fa:	8b 87       	std	Y+11, r24	; 0x0b
    24fc:	9c 87       	std	Y+12, r25	; 0x0c
    24fe:	ad 87       	std	Y+13, r26	; 0x0d
    2500:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2502:	6b 85       	ldd	r22, Y+11	; 0x0b
    2504:	7c 85       	ldd	r23, Y+12	; 0x0c
    2506:	8d 85       	ldd	r24, Y+13	; 0x0d
    2508:	9e 85       	ldd	r25, Y+14	; 0x0e
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	4a ef       	ldi	r20, 0xFA	; 250
    2510:	54 e4       	ldi	r21, 0x44	; 68
    2512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	8f 83       	std	Y+7, r24	; 0x07
    251c:	98 87       	std	Y+8, r25	; 0x08
    251e:	a9 87       	std	Y+9, r26	; 0x09
    2520:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2522:	6f 81       	ldd	r22, Y+7	; 0x07
    2524:	78 85       	ldd	r23, Y+8	; 0x08
    2526:	89 85       	ldd	r24, Y+9	; 0x09
    2528:	9a 85       	ldd	r25, Y+10	; 0x0a
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e8       	ldi	r20, 0x80	; 128
    2530:	5f e3       	ldi	r21, 0x3F	; 63
    2532:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2536:	88 23       	and	r24, r24
    2538:	2c f4       	brge	.+10     	; 0x2544 <sendPassword+0x84>
		__ticks = 1;
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	8d 83       	std	Y+5, r24	; 0x05
    2542:	3f c0       	rjmp	.+126    	; 0x25c2 <sendPassword+0x102>
	else if (__tmp > 65535)
    2544:	6f 81       	ldd	r22, Y+7	; 0x07
    2546:	78 85       	ldd	r23, Y+8	; 0x08
    2548:	89 85       	ldd	r24, Y+9	; 0x09
    254a:	9a 85       	ldd	r25, Y+10	; 0x0a
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	3f ef       	ldi	r19, 0xFF	; 255
    2550:	4f e7       	ldi	r20, 0x7F	; 127
    2552:	57 e4       	ldi	r21, 0x47	; 71
    2554:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2558:	18 16       	cp	r1, r24
    255a:	4c f5       	brge	.+82     	; 0x25ae <sendPassword+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255c:	6b 85       	ldd	r22, Y+11	; 0x0b
    255e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2560:	8d 85       	ldd	r24, Y+13	; 0x0d
    2562:	9e 85       	ldd	r25, Y+14	; 0x0e
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e2       	ldi	r20, 0x20	; 32
    256a:	51 e4       	ldi	r21, 0x41	; 65
    256c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	bc 01       	movw	r22, r24
    2576:	cd 01       	movw	r24, r26
    2578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	9e 83       	std	Y+6, r25	; 0x06
    2582:	8d 83       	std	Y+5, r24	; 0x05
    2584:	0f c0       	rjmp	.+30     	; 0x25a4 <sendPassword+0xe4>
    2586:	88 ec       	ldi	r24, 0xC8	; 200
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	9c 83       	std	Y+4, r25	; 0x04
    258c:	8b 83       	std	Y+3, r24	; 0x03
    258e:	8b 81       	ldd	r24, Y+3	; 0x03
    2590:	9c 81       	ldd	r25, Y+4	; 0x04
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	f1 f7       	brne	.-4      	; 0x2592 <sendPassword+0xd2>
    2596:	9c 83       	std	Y+4, r25	; 0x04
    2598:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259a:	8d 81       	ldd	r24, Y+5	; 0x05
    259c:	9e 81       	ldd	r25, Y+6	; 0x06
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	9e 83       	std	Y+6, r25	; 0x06
    25a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a4:	8d 81       	ldd	r24, Y+5	; 0x05
    25a6:	9e 81       	ldd	r25, Y+6	; 0x06
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	69 f7       	brne	.-38     	; 0x2586 <sendPassword+0xc6>
    25ac:	14 c0       	rjmp	.+40     	; 0x25d6 <sendPassword+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ae:	6f 81       	ldd	r22, Y+7	; 0x07
    25b0:	78 85       	ldd	r23, Y+8	; 0x08
    25b2:	89 85       	ldd	r24, Y+9	; 0x09
    25b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	9e 83       	std	Y+6, r25	; 0x06
    25c0:	8d 83       	std	Y+5, r24	; 0x05
    25c2:	8d 81       	ldd	r24, Y+5	; 0x05
    25c4:	9e 81       	ldd	r25, Y+6	; 0x06
    25c6:	9a 83       	std	Y+2, r25	; 0x02
    25c8:	89 83       	std	Y+1, r24	; 0x01
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	9a 81       	ldd	r25, Y+2	; 0x02
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	f1 f7       	brne	.-4      	; 0x25ce <sendPassword+0x10e>
    25d2:	9a 83       	std	Y+2, r25	; 0x02
    25d4:	89 83       	std	Y+1, r24	; 0x01
	}
}

void sendPassword(uint8 *password)
{
	for(int i = 0;i<5;i++)
    25d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25d8:	98 89       	ldd	r25, Y+16	; 0x10
    25da:	01 96       	adiw	r24, 0x01	; 1
    25dc:	98 8b       	std	Y+16, r25	; 0x10
    25de:	8f 87       	std	Y+15, r24	; 0x0f
    25e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25e2:	98 89       	ldd	r25, Y+16	; 0x10
    25e4:	85 30       	cpi	r24, 0x05	; 5
    25e6:	91 05       	cpc	r25, r1
    25e8:	0c f4       	brge	.+2      	; 0x25ec <sendPassword+0x12c>
    25ea:	79 cf       	rjmp	.-270    	; 0x24de <sendPassword+0x1e>
	{
		UART_sendByte(password[i]);
		_delay_ms(50);
	}
}
    25ec:	62 96       	adiw	r28, 0x12	; 18
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	f8 94       	cli
    25f2:	de bf       	out	0x3e, r29	; 62
    25f4:	0f be       	out	0x3f, r0	; 63
    25f6:	cd bf       	out	0x3d, r28	; 61
    25f8:	cf 91       	pop	r28
    25fa:	df 91       	pop	r29
    25fc:	08 95       	ret

000025fe <getEnter>:
void getEnter()
{
    25fe:	df 93       	push	r29
    2600:	cf 93       	push	r28
    2602:	0f 92       	push	r0
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
    2608:	03 c0       	rjmp	.+6      	; 0x2610 <getEnter+0x12>
	uint8 key;
	while(key != '=')
		key =  KEYPAD_getPressedKey();
    260a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <KEYPAD_getPressedKey>
    260e:	89 83       	std	Y+1, r24	; 0x01
	}
}
void getEnter()
{
	uint8 key;
	while(key != '=')
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	8d 33       	cpi	r24, 0x3D	; 61
    2614:	d1 f7       	brne	.-12     	; 0x260a <getEnter+0xc>
		key =  KEYPAD_getPressedKey();
}
    2616:	0f 90       	pop	r0
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	08 95       	ret

0000261e <matchPassword>:

uint8 matchPassword(uint8 *password)
{
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	00 d0       	rcall	.+0      	; 0x2624 <matchPassword+0x6>
    2624:	00 d0       	rcall	.+0      	; 0x2626 <matchPassword+0x8>
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	9b 83       	std	Y+3, r25	; 0x03
    262c:	8a 83       	std	Y+2, r24	; 0x02
	LCD_clearScreen();
    262e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <LCD_clearScreen>
	LCD_displayString("plz enter pass:");
    2632:	80 e9       	ldi	r24, 0x90	; 144
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_displayString>
	getPassword(password, 0 );
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	9b 81       	ldd	r25, Y+3	; 0x03
    263e:	60 e0       	ldi	r22, 0x00	; 0
    2640:	0e 94 2a 12 	call	0x2454	; 0x2454 <getPassword>
	getEnter();
    2644:	0e 94 ff 12 	call	0x25fe	; 0x25fe <getEnter>
	sendPassword(password);
    2648:	8a 81       	ldd	r24, Y+2	; 0x02
    264a:	9b 81       	ldd	r25, Y+3	; 0x03
    264c:	0e 94 60 12 	call	0x24c0	; 0x24c0 <sendPassword>
	uint8 recievedACK = UART_recieveByte();
    2650:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
    2654:	89 83       	std	Y+1, r24	; 0x01
	//	LCD_displayCharacter(recievedACK);
	if(recievedACK == 1)
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	81 30       	cpi	r24, 0x01	; 1
    265a:	19 f4       	brne	.+6      	; 0x2662 <matchPassword+0x44>
	{
		return 1;
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	8c 83       	std	Y+4, r24	; 0x04
    2660:	01 c0       	rjmp	.+2      	; 0x2664 <matchPassword+0x46>
	}
	else
	{
		return 0;
    2662:	1c 82       	std	Y+4, r1	; 0x04
    2664:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	cf 91       	pop	r28
    2670:	df 91       	pop	r29
    2672:	08 95       	ret

00002674 <landingScreen>:


void landingScreen(uint8*password_1, uint8*password_2)
{
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	00 d0       	rcall	.+0      	; 0x267a <landingScreen+0x6>
    267a:	00 d0       	rcall	.+0      	; 0x267c <landingScreen+0x8>
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
    2680:	9a 83       	std	Y+2, r25	; 0x02
    2682:	89 83       	std	Y+1, r24	; 0x01
    2684:	7c 83       	std	Y+4, r23	; 0x04
    2686:	6b 83       	std	Y+3, r22	; 0x03
	LCD_clearScreen();
    2688:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <LCD_clearScreen>
	LCD_displayString("plz enter pass:");
    268c:	80 e9       	ldi	r24, 0x90	; 144
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_displayString>
	getPassword(password_1, 0 );
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	9a 81       	ldd	r25, Y+2	; 0x02
    2698:	60 e0       	ldi	r22, 0x00	; 0
    269a:	0e 94 2a 12 	call	0x2454	; 0x2454 <getPassword>
	getEnter();
    269e:	0e 94 ff 12 	call	0x25fe	; 0x25fe <getEnter>
	LCD_clearScreen();
    26a2:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <LCD_clearScreen>
	LCD_moveCursor(0,0);
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	60 e0       	ldi	r22, 0x00	; 0
    26aa:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <LCD_moveCursor>
	LCD_displayString("plz re-enter the");
    26ae:	80 ea       	ldi	r24, 0xA0	; 160
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_displayString>
	LCD_moveCursor(1,0);
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	60 e0       	ldi	r22, 0x00	; 0
    26ba:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <LCD_moveCursor>
	LCD_displayString("same pass:");
    26be:	81 eb       	ldi	r24, 0xB1	; 177
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_displayString>
	getPassword(password_2, 10 );
    26c6:	8b 81       	ldd	r24, Y+3	; 0x03
    26c8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ca:	6a e0       	ldi	r22, 0x0A	; 10
    26cc:	0e 94 2a 12 	call	0x2454	; 0x2454 <getPassword>
	getEnter();
    26d0:	0e 94 ff 12 	call	0x25fe	; 0x25fe <getEnter>
}
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	0f 90       	pop	r0
    26dc:	cf 91       	pop	r28
    26de:	df 91       	pop	r29
    26e0:	08 95       	ret

000026e2 <rotateMotor>:


void rotateMotor()
{
    26e2:	df 93       	push	r29
    26e4:	cf 93       	push	r28
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    26ea:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <LCD_clearScreen>
	LCD_displayString("Door is");
    26ee:	8c eb       	ldi	r24, 0xBC	; 188
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_displayString>
	LCD_moveCursor(1,0);
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	60 e0       	ldi	r22, 0x00	; 0
    26fa:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <LCD_moveCursor>
	LCD_displayString("Unlocking");
    26fe:	84 ec       	ldi	r24, 0xC4	; 196
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_displayString>
	startTimer();
    2706:	0e 94 06 12 	call	0x240c	; 0x240c <startTimer>
	while(stay);
    270a:	80 91 fa 00 	lds	r24, 0x00FA
    270e:	88 23       	and	r24, r24
    2710:	e1 f7       	brne	.-8      	; 0x270a <rotateMotor+0x28>
}
    2712:	cf 91       	pop	r28
    2714:	df 91       	pop	r29
    2716:	08 95       	ret

00002718 <errorHandler>:

void errorHandler()
{
    2718:	df 93       	push	r29
    271a:	cf 93       	push	r28
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	64 97       	sbiw	r28, 0x14	; 20
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	f8 94       	cli
    2726:	de bf       	out	0x3e, r29	; 62
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	cd bf       	out	0x3d, r28	; 61
    272c:	10 c0       	rjmp	.+32     	; 0x274e <errorHandler+0x36>
	uint8 ack;
	uint8 password[5];
	while(errorCounter<=3)
	{
		ack =  matchPassword(password);
    272e:	ce 01       	movw	r24, r28
    2730:	40 96       	adiw	r24, 0x10	; 16
    2732:	0e 94 0f 13 	call	0x261e	; 0x261e <matchPassword>
    2736:	8f 87       	std	Y+15, r24	; 0x0f
		if(ack == 1 )
    2738:	8f 85       	ldd	r24, Y+15	; 0x0f
    273a:	81 30       	cpi	r24, 0x01	; 1
    273c:	19 f4       	brne	.+6      	; 0x2744 <errorHandler+0x2c>
		{
			errorCounter=0;
    273e:	10 92 ff 00 	sts	0x00FF, r1
    2742:	90 c0       	rjmp	.+288    	; 0x2864 <errorHandler+0x14c>
			return;
		}
		else
		{
			errorCounter++;
    2744:	80 91 ff 00 	lds	r24, 0x00FF
    2748:	8f 5f       	subi	r24, 0xFF	; 255
    274a:	80 93 ff 00 	sts	0x00FF, r24

void errorHandler()
{
	uint8 ack;
	uint8 password[5];
	while(errorCounter<=3)
    274e:	80 91 ff 00 	lds	r24, 0x00FF
    2752:	84 30       	cpi	r24, 0x04	; 4
    2754:	60 f3       	brcs	.-40     	; 0x272e <errorHandler+0x16>
		{
			errorCounter++;
		}

	}
	if(errorCounter > 3 )
    2756:	80 91 ff 00 	lds	r24, 0x00FF
    275a:	84 30       	cpi	r24, 0x04	; 4
    275c:	08 f4       	brcc	.+2      	; 0x2760 <errorHandler+0x48>
    275e:	82 c0       	rjmp	.+260    	; 0x2864 <errorHandler+0x14c>
	{
		/*Activate buzzer*/
		sendPassword(correctPassword);
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	91 e0       	ldi	r25, 0x01	; 1
    2764:	0e 94 60 12 	call	0x24c0	; 0x24c0 <sendPassword>
		errorCounter = 0;
    2768:	10 92 ff 00 	sts	0x00FF, r1
		LCD_clearScreen();
    276c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <LCD_clearScreen>
		LCD_displayString("ERROR");
    2770:	8e ec       	ldi	r24, 0xCE	; 206
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_displayString>
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	90 e6       	ldi	r25, 0x60	; 96
    277c:	aa e6       	ldi	r26, 0x6A	; 106
    277e:	b7 e4       	ldi	r27, 0x47	; 71
    2780:	8b 87       	std	Y+11, r24	; 0x0b
    2782:	9c 87       	std	Y+12, r25	; 0x0c
    2784:	ad 87       	std	Y+13, r26	; 0x0d
    2786:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2788:	6b 85       	ldd	r22, Y+11	; 0x0b
    278a:	7c 85       	ldd	r23, Y+12	; 0x0c
    278c:	8d 85       	ldd	r24, Y+13	; 0x0d
    278e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	4a ef       	ldi	r20, 0xFA	; 250
    2796:	54 e4       	ldi	r21, 0x44	; 68
    2798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	8f 83       	std	Y+7, r24	; 0x07
    27a2:	98 87       	std	Y+8, r25	; 0x08
    27a4:	a9 87       	std	Y+9, r26	; 0x09
    27a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27a8:	6f 81       	ldd	r22, Y+7	; 0x07
    27aa:	78 85       	ldd	r23, Y+8	; 0x08
    27ac:	89 85       	ldd	r24, Y+9	; 0x09
    27ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e8       	ldi	r20, 0x80	; 128
    27b6:	5f e3       	ldi	r21, 0x3F	; 63
    27b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27bc:	88 23       	and	r24, r24
    27be:	2c f4       	brge	.+10     	; 0x27ca <errorHandler+0xb2>
		__ticks = 1;
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	9e 83       	std	Y+6, r25	; 0x06
    27c6:	8d 83       	std	Y+5, r24	; 0x05
    27c8:	3f c0       	rjmp	.+126    	; 0x2848 <errorHandler+0x130>
	else if (__tmp > 65535)
    27ca:	6f 81       	ldd	r22, Y+7	; 0x07
    27cc:	78 85       	ldd	r23, Y+8	; 0x08
    27ce:	89 85       	ldd	r24, Y+9	; 0x09
    27d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	3f ef       	ldi	r19, 0xFF	; 255
    27d6:	4f e7       	ldi	r20, 0x7F	; 127
    27d8:	57 e4       	ldi	r21, 0x47	; 71
    27da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27de:	18 16       	cp	r1, r24
    27e0:	4c f5       	brge	.+82     	; 0x2834 <errorHandler+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	40 e2       	ldi	r20, 0x20	; 32
    27f0:	51 e4       	ldi	r21, 0x41	; 65
    27f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	bc 01       	movw	r22, r24
    27fc:	cd 01       	movw	r24, r26
    27fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	9e 83       	std	Y+6, r25	; 0x06
    2808:	8d 83       	std	Y+5, r24	; 0x05
    280a:	0f c0       	rjmp	.+30     	; 0x282a <errorHandler+0x112>
    280c:	88 ec       	ldi	r24, 0xC8	; 200
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	9c 83       	std	Y+4, r25	; 0x04
    2812:	8b 83       	std	Y+3, r24	; 0x03
    2814:	8b 81       	ldd	r24, Y+3	; 0x03
    2816:	9c 81       	ldd	r25, Y+4	; 0x04
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	f1 f7       	brne	.-4      	; 0x2818 <errorHandler+0x100>
    281c:	9c 83       	std	Y+4, r25	; 0x04
    281e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2820:	8d 81       	ldd	r24, Y+5	; 0x05
    2822:	9e 81       	ldd	r25, Y+6	; 0x06
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	9e 83       	std	Y+6, r25	; 0x06
    2828:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282a:	8d 81       	ldd	r24, Y+5	; 0x05
    282c:	9e 81       	ldd	r25, Y+6	; 0x06
    282e:	00 97       	sbiw	r24, 0x00	; 0
    2830:	69 f7       	brne	.-38     	; 0x280c <errorHandler+0xf4>
    2832:	14 c0       	rjmp	.+40     	; 0x285c <errorHandler+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2834:	6f 81       	ldd	r22, Y+7	; 0x07
    2836:	78 85       	ldd	r23, Y+8	; 0x08
    2838:	89 85       	ldd	r24, Y+9	; 0x09
    283a:	9a 85       	ldd	r25, Y+10	; 0x0a
    283c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	9e 83       	std	Y+6, r25	; 0x06
    2846:	8d 83       	std	Y+5, r24	; 0x05
    2848:	8d 81       	ldd	r24, Y+5	; 0x05
    284a:	9e 81       	ldd	r25, Y+6	; 0x06
    284c:	9a 83       	std	Y+2, r25	; 0x02
    284e:	89 83       	std	Y+1, r24	; 0x01
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	9a 81       	ldd	r25, Y+2	; 0x02
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <errorHandler+0x13c>
    2858:	9a 83       	std	Y+2, r25	; 0x02
    285a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(60000); /*Stop the system for one minute*/
		LCD_clearScreen();
    285c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <LCD_clearScreen>
		mainOptions();
    2860:	0e 94 3b 14 	call	0x2876	; 0x2876 <mainOptions>
	}
}
    2864:	64 96       	adiw	r28, 0x14	; 20
    2866:	0f b6       	in	r0, 0x3f	; 63
    2868:	f8 94       	cli
    286a:	de bf       	out	0x3e, r29	; 62
    286c:	0f be       	out	0x3f, r0	; 63
    286e:	cd bf       	out	0x3d, r28	; 61
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	08 95       	ret

00002876 <mainOptions>:

void mainOptions()
{
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
    287e:	61 97       	sbiw	r28, 0x11	; 17
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	f8 94       	cli
    2884:	de bf       	out	0x3e, r29	; 62
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	cd bf       	out	0x3d, r28	; 61
	uint8 ack;
	uint8 key;
	uint8 password[5];
	LCD_displayString("+ : Open Door");
    288a:	84 ed       	ldi	r24, 0xD4	; 212
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_displayString>
	LCD_moveCursor(1,0);
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	60 e0       	ldi	r22, 0x00	; 0
    2896:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
    289a:	82 ee       	ldi	r24, 0xE2	; 226
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_displayString>
	key = KEYPAD_getPressedKey();
    28a2:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <KEYPAD_getPressedKey>
    28a6:	89 83       	std	Y+1, r24	; 0x01

	if(key == '+')
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	8b 32       	cpi	r24, 0x2B	; 43
    28ac:	11 f5       	brne	.+68     	; 0x28f2 <mainOptions+0x7c>
	{
		/*Open Door*/
		UART_sendByte('+');
    28ae:	8b e2       	ldi	r24, 0x2B	; 43
    28b0:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <UART_sendByte>
		ack = matchPassword(password);
    28b4:	ce 01       	movw	r24, r28
    28b6:	03 96       	adiw	r24, 0x03	; 3
    28b8:	0e 94 0f 13 	call	0x261e	; 0x261e <matchPassword>
    28bc:	8a 83       	std	Y+2, r24	; 0x02
		if(ack == 1)
    28be:	8a 81       	ldd	r24, Y+2	; 0x02
    28c0:	81 30       	cpi	r24, 0x01	; 1
    28c2:	39 f4       	brne	.+14     	; 0x28d2 <mainOptions+0x5c>
		{
			/*Rotate the motor*/
			rotateMotor();
    28c4:	0e 94 71 13 	call	0x26e2	; 0x26e2 <rotateMotor>
			LCD_clearScreen();
    28c8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <LCD_clearScreen>
			mainOptions();
    28cc:	0e 94 3b 14 	call	0x2876	; 0x2876 <mainOptions>
    28d0:	35 c0       	rjmp	.+106    	; 0x293c <mainOptions+0xc6>

		}
		else
		{
			/*Error*/
			errorHandler();
    28d2:	0e 94 8c 13 	call	0x2718	; 0x2718 <errorHandler>
			UART_sendByte('+');
    28d6:	8b e2       	ldi	r24, 0x2B	; 43
    28d8:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <UART_sendByte>
			sendPassword(correctPassword);
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	91 e0       	ldi	r25, 0x01	; 1
    28e0:	0e 94 60 12 	call	0x24c0	; 0x24c0 <sendPassword>
			rotateMotor();
    28e4:	0e 94 71 13 	call	0x26e2	; 0x26e2 <rotateMotor>
			LCD_clearScreen();
    28e8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <LCD_clearScreen>
			mainOptions();
    28ec:	0e 94 3b 14 	call	0x2876	; 0x2876 <mainOptions>
    28f0:	25 c0       	rjmp	.+74     	; 0x293c <mainOptions+0xc6>
	}
	else
	{
		uint8 password_1[5];
		uint8 password_2[5];
		UART_sendByte(key);
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <UART_sendByte>
		ack = matchPassword(password);
    28f8:	ce 01       	movw	r24, r28
    28fa:	03 96       	adiw	r24, 0x03	; 3
    28fc:	0e 94 0f 13 	call	0x261e	; 0x261e <matchPassword>
    2900:	8a 83       	std	Y+2, r24	; 0x02
		if(ack == 1)
    2902:	8a 81       	ldd	r24, Y+2	; 0x02
    2904:	81 30       	cpi	r24, 0x01	; 1
    2906:	49 f4       	brne	.+18     	; 0x291a <mainOptions+0xa4>
		{
			passwordCreation(password_1, password_2);
    2908:	ce 01       	movw	r24, r28
    290a:	08 96       	adiw	r24, 0x08	; 8
    290c:	9e 01       	movw	r18, r28
    290e:	23 5f       	subi	r18, 0xF3	; 243
    2910:	3f 4f       	sbci	r19, 0xFF	; 255
    2912:	b9 01       	movw	r22, r18
    2914:	0e 94 a7 14 	call	0x294e	; 0x294e <passwordCreation>
    2918:	11 c0       	rjmp	.+34     	; 0x293c <mainOptions+0xc6>
		}
		else
		{
			/*Error*/
			errorHandler();
    291a:	0e 94 8c 13 	call	0x2718	; 0x2718 <errorHandler>
			UART_sendByte('-');
    291e:	8d e2       	ldi	r24, 0x2D	; 45
    2920:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <UART_sendByte>
			sendPassword(correctPassword);
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	91 e0       	ldi	r25, 0x01	; 1
    2928:	0e 94 60 12 	call	0x24c0	; 0x24c0 <sendPassword>
			passwordCreation(password_1, password_2);
    292c:	ce 01       	movw	r24, r28
    292e:	08 96       	adiw	r24, 0x08	; 8
    2930:	9e 01       	movw	r18, r28
    2932:	23 5f       	subi	r18, 0xF3	; 243
    2934:	3f 4f       	sbci	r19, 0xFF	; 255
    2936:	b9 01       	movw	r22, r18
    2938:	0e 94 a7 14 	call	0x294e	; 0x294e <passwordCreation>
		}
	}

}
    293c:	61 96       	adiw	r28, 0x11	; 17
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <passwordCreation>:

void passwordCreation(uint8* password_1, uint8* password_2)
{
    294e:	df 93       	push	r29
    2950:	cf 93       	push	r28
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	27 97       	sbiw	r28, 0x07	; 7
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
    2962:	9d 83       	std	Y+5, r25	; 0x05
    2964:	8c 83       	std	Y+4, r24	; 0x04
    2966:	7f 83       	std	Y+7, r23	; 0x07
    2968:	6e 83       	std	Y+6, r22	; 0x06
	uint8 recievedACK = 1;
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	8b 83       	std	Y+3, r24	; 0x03
	landingScreen(password_1,password_2);
    296e:	8c 81       	ldd	r24, Y+4	; 0x04
    2970:	9d 81       	ldd	r25, Y+5	; 0x05
    2972:	2e 81       	ldd	r18, Y+6	; 0x06
    2974:	3f 81       	ldd	r19, Y+7	; 0x07
    2976:	b9 01       	movw	r22, r18
    2978:	0e 94 3a 13 	call	0x2674	; 0x2674 <landingScreen>
	LCD_clearScreen();
    297c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <LCD_clearScreen>

	sendPassword(password_1);
    2980:	8c 81       	ldd	r24, Y+4	; 0x04
    2982:	9d 81       	ldd	r25, Y+5	; 0x05
    2984:	0e 94 60 12 	call	0x24c0	; 0x24c0 <sendPassword>
	sendPassword(password_2);
    2988:	8e 81       	ldd	r24, Y+6	; 0x06
    298a:	9f 81       	ldd	r25, Y+7	; 0x07
    298c:	0e 94 60 12 	call	0x24c0	; 0x24c0 <sendPassword>

	recievedACK = UART_recieveByte();
    2990:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
    2994:	8b 83       	std	Y+3, r24	; 0x03
	if(recievedACK == 1)
    2996:	8b 81       	ldd	r24, Y+3	; 0x03
    2998:	81 30       	cpi	r24, 0x01	; 1
    299a:	f1 f4       	brne	.+60     	; 0x29d8 <passwordCreation+0x8a>
	{
		for(int i=0 ;i<5;i++)
    299c:	1a 82       	std	Y+2, r1	; 0x02
    299e:	19 82       	std	Y+1, r1	; 0x01
    29a0:	13 c0       	rjmp	.+38     	; 0x29c8 <passwordCreation+0x7a>
		{
			correctPassword[i] = password_1[i];
    29a2:	49 81       	ldd	r20, Y+1	; 0x01
    29a4:	5a 81       	ldd	r21, Y+2	; 0x02
    29a6:	29 81       	ldd	r18, Y+1	; 0x01
    29a8:	3a 81       	ldd	r19, Y+2	; 0x02
    29aa:	8c 81       	ldd	r24, Y+4	; 0x04
    29ac:	9d 81       	ldd	r25, Y+5	; 0x05
    29ae:	fc 01       	movw	r30, r24
    29b0:	e2 0f       	add	r30, r18
    29b2:	f3 1f       	adc	r31, r19
    29b4:	80 81       	ld	r24, Z
    29b6:	fa 01       	movw	r30, r20
    29b8:	e0 50       	subi	r30, 0x00	; 0
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	80 83       	st	Z, r24
	sendPassword(password_2);

	recievedACK = UART_recieveByte();
	if(recievedACK == 1)
	{
		for(int i=0 ;i<5;i++)
    29be:	89 81       	ldd	r24, Y+1	; 0x01
    29c0:	9a 81       	ldd	r25, Y+2	; 0x02
    29c2:	01 96       	adiw	r24, 0x01	; 1
    29c4:	9a 83       	std	Y+2, r25	; 0x02
    29c6:	89 83       	std	Y+1, r24	; 0x01
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	9a 81       	ldd	r25, Y+2	; 0x02
    29cc:	85 30       	cpi	r24, 0x05	; 5
    29ce:	91 05       	cpc	r25, r1
    29d0:	44 f3       	brlt	.-48     	; 0x29a2 <passwordCreation+0x54>
		{
			correctPassword[i] = password_1[i];
		}

		mainOptions();
    29d2:	0e 94 3b 14 	call	0x2876	; 0x2876 <mainOptions>
    29d6:	07 c0       	rjmp	.+14     	; 0x29e6 <passwordCreation+0x98>
	}
	else
	{
		passwordCreation(password_1,password_2);
    29d8:	8c 81       	ldd	r24, Y+4	; 0x04
    29da:	9d 81       	ldd	r25, Y+5	; 0x05
    29dc:	2e 81       	ldd	r18, Y+6	; 0x06
    29de:	3f 81       	ldd	r19, Y+7	; 0x07
    29e0:	b9 01       	movw	r22, r18
    29e2:	0e 94 a7 14 	call	0x294e	; 0x294e <passwordCreation>
	}
}
    29e6:	27 96       	adiw	r28, 0x07	; 7
    29e8:	0f b6       	in	r0, 0x3f	; 63
    29ea:	f8 94       	cli
    29ec:	de bf       	out	0x3e, r29	; 62
    29ee:	0f be       	out	0x3f, r0	; 63
    29f0:	cd bf       	out	0x3d, r28	; 61
    29f2:	cf 91       	pop	r28
    29f4:	df 91       	pop	r29
    29f6:	08 95       	ret

000029f8 <main>:


int main()
{
    29f8:	df 93       	push	r29
    29fa:	cf 93       	push	r28
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    2a00:	2c 97       	sbiw	r28, 0x0c	; 12
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	f8 94       	cli
    2a06:	de bf       	out	0x3e, r29	; 62
    2a08:	0f be       	out	0x3f, r0	; 63
    2a0a:	cd bf       	out	0x3d, r28	; 61
	SREG  |= (1<<7);              // Enable global interrupts in MC.
    2a0c:	af e5       	ldi	r26, 0x5F	; 95
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	ef e5       	ldi	r30, 0x5F	; 95
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	80 68       	ori	r24, 0x80	; 128
    2a18:	8c 93       	st	X, r24
	LCD_init();
    2a1a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <LCD_init>
	uint8  password_1[5];
	uint8  password_2[5];


	UART_ConfigType * UART_Config;
	UART_Config ->bit_data = 8; /* Use 8-Bits Data*/
    2a1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a20:	fa 81       	ldd	r31, Y+2	; 0x02
    2a22:	88 e0       	ldi	r24, 0x08	; 8
    2a24:	80 83       	st	Z, r24
	UART_Config ->parity = EVEN; /*Even Parity*/
    2a26:	e9 81       	ldd	r30, Y+1	; 0x01
    2a28:	fa 81       	ldd	r31, Y+2	; 0x02
    2a2a:	82 e0       	ldi	r24, 0x02	; 2
    2a2c:	81 83       	std	Z+1, r24	; 0x01
	UART_Config ->stop_bit = oneBit; /*1-Stop Bit*/
    2a2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a30:	fa 81       	ldd	r31, Y+2	; 0x02
    2a32:	12 82       	std	Z+2, r1	; 0x02
	UART_Config ->baudrate = 9600;
    2a34:	e9 81       	ldd	r30, Y+1	; 0x01
    2a36:	fa 81       	ldd	r31, Y+2	; 0x02
    2a38:	80 e8       	ldi	r24, 0x80	; 128
    2a3a:	95 e2       	ldi	r25, 0x25	; 37
    2a3c:	a0 e0       	ldi	r26, 0x00	; 0
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	83 83       	std	Z+3, r24	; 0x03
    2a42:	94 83       	std	Z+4, r25	; 0x04
    2a44:	a5 83       	std	Z+5, r26	; 0x05
    2a46:	b6 83       	std	Z+6, r27	; 0x06
	UART_init(UART_Config);
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4c:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>


	while(1){
		passwordCreation(password_1,password_2);
    2a50:	ce 01       	movw	r24, r28
    2a52:	03 96       	adiw	r24, 0x03	; 3
    2a54:	9e 01       	movw	r18, r28
    2a56:	28 5f       	subi	r18, 0xF8	; 248
    2a58:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5a:	b9 01       	movw	r22, r18
    2a5c:	0e 94 a7 14 	call	0x294e	; 0x294e <passwordCreation>
    2a60:	f7 cf       	rjmp	.-18     	; 0x2a50 <main+0x58>

00002a62 <__udivmodsi4>:
    2a62:	a1 e2       	ldi	r26, 0x21	; 33
    2a64:	1a 2e       	mov	r1, r26
    2a66:	aa 1b       	sub	r26, r26
    2a68:	bb 1b       	sub	r27, r27
    2a6a:	fd 01       	movw	r30, r26
    2a6c:	0d c0       	rjmp	.+26     	; 0x2a88 <__udivmodsi4_ep>

00002a6e <__udivmodsi4_loop>:
    2a6e:	aa 1f       	adc	r26, r26
    2a70:	bb 1f       	adc	r27, r27
    2a72:	ee 1f       	adc	r30, r30
    2a74:	ff 1f       	adc	r31, r31
    2a76:	a2 17       	cp	r26, r18
    2a78:	b3 07       	cpc	r27, r19
    2a7a:	e4 07       	cpc	r30, r20
    2a7c:	f5 07       	cpc	r31, r21
    2a7e:	20 f0       	brcs	.+8      	; 0x2a88 <__udivmodsi4_ep>
    2a80:	a2 1b       	sub	r26, r18
    2a82:	b3 0b       	sbc	r27, r19
    2a84:	e4 0b       	sbc	r30, r20
    2a86:	f5 0b       	sbc	r31, r21

00002a88 <__udivmodsi4_ep>:
    2a88:	66 1f       	adc	r22, r22
    2a8a:	77 1f       	adc	r23, r23
    2a8c:	88 1f       	adc	r24, r24
    2a8e:	99 1f       	adc	r25, r25
    2a90:	1a 94       	dec	r1
    2a92:	69 f7       	brne	.-38     	; 0x2a6e <__udivmodsi4_loop>
    2a94:	60 95       	com	r22
    2a96:	70 95       	com	r23
    2a98:	80 95       	com	r24
    2a9a:	90 95       	com	r25
    2a9c:	9b 01       	movw	r18, r22
    2a9e:	ac 01       	movw	r20, r24
    2aa0:	bd 01       	movw	r22, r26
    2aa2:	cf 01       	movw	r24, r30
    2aa4:	08 95       	ret

00002aa6 <__prologue_saves__>:
    2aa6:	2f 92       	push	r2
    2aa8:	3f 92       	push	r3
    2aaa:	4f 92       	push	r4
    2aac:	5f 92       	push	r5
    2aae:	6f 92       	push	r6
    2ab0:	7f 92       	push	r7
    2ab2:	8f 92       	push	r8
    2ab4:	9f 92       	push	r9
    2ab6:	af 92       	push	r10
    2ab8:	bf 92       	push	r11
    2aba:	cf 92       	push	r12
    2abc:	df 92       	push	r13
    2abe:	ef 92       	push	r14
    2ac0:	ff 92       	push	r15
    2ac2:	0f 93       	push	r16
    2ac4:	1f 93       	push	r17
    2ac6:	cf 93       	push	r28
    2ac8:	df 93       	push	r29
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
    2ace:	ca 1b       	sub	r28, r26
    2ad0:	db 0b       	sbc	r29, r27
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
    2adc:	09 94       	ijmp

00002ade <__epilogue_restores__>:
    2ade:	2a 88       	ldd	r2, Y+18	; 0x12
    2ae0:	39 88       	ldd	r3, Y+17	; 0x11
    2ae2:	48 88       	ldd	r4, Y+16	; 0x10
    2ae4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ae6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ae8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2aea:	8c 84       	ldd	r8, Y+12	; 0x0c
    2aec:	9b 84       	ldd	r9, Y+11	; 0x0b
    2aee:	aa 84       	ldd	r10, Y+10	; 0x0a
    2af0:	b9 84       	ldd	r11, Y+9	; 0x09
    2af2:	c8 84       	ldd	r12, Y+8	; 0x08
    2af4:	df 80       	ldd	r13, Y+7	; 0x07
    2af6:	ee 80       	ldd	r14, Y+6	; 0x06
    2af8:	fd 80       	ldd	r15, Y+5	; 0x05
    2afa:	0c 81       	ldd	r16, Y+4	; 0x04
    2afc:	1b 81       	ldd	r17, Y+3	; 0x03
    2afe:	aa 81       	ldd	r26, Y+2	; 0x02
    2b00:	b9 81       	ldd	r27, Y+1	; 0x01
    2b02:	ce 0f       	add	r28, r30
    2b04:	d1 1d       	adc	r29, r1
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	f8 94       	cli
    2b0a:	de bf       	out	0x3e, r29	; 62
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	cd bf       	out	0x3d, r28	; 61
    2b10:	ed 01       	movw	r28, r26
    2b12:	08 95       	ret

00002b14 <itoa>:
    2b14:	fb 01       	movw	r30, r22
    2b16:	9f 01       	movw	r18, r30
    2b18:	e8 94       	clt
    2b1a:	42 30       	cpi	r20, 0x02	; 2
    2b1c:	c4 f0       	brlt	.+48     	; 0x2b4e <itoa+0x3a>
    2b1e:	45 32       	cpi	r20, 0x25	; 37
    2b20:	b4 f4       	brge	.+44     	; 0x2b4e <itoa+0x3a>
    2b22:	4a 30       	cpi	r20, 0x0A	; 10
    2b24:	29 f4       	brne	.+10     	; 0x2b30 <itoa+0x1c>
    2b26:	97 fb       	bst	r25, 7
    2b28:	1e f4       	brtc	.+6      	; 0x2b30 <itoa+0x1c>
    2b2a:	90 95       	com	r25
    2b2c:	81 95       	neg	r24
    2b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b30:	64 2f       	mov	r22, r20
    2b32:	77 27       	eor	r23, r23
    2b34:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <__udivmodhi4>
    2b38:	80 5d       	subi	r24, 0xD0	; 208
    2b3a:	8a 33       	cpi	r24, 0x3A	; 58
    2b3c:	0c f0       	brlt	.+2      	; 0x2b40 <itoa+0x2c>
    2b3e:	89 5d       	subi	r24, 0xD9	; 217
    2b40:	81 93       	st	Z+, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	00 97       	sbiw	r24, 0x00	; 0
    2b46:	a1 f7       	brne	.-24     	; 0x2b30 <itoa+0x1c>
    2b48:	16 f4       	brtc	.+4      	; 0x2b4e <itoa+0x3a>
    2b4a:	5d e2       	ldi	r21, 0x2D	; 45
    2b4c:	51 93       	st	Z+, r21
    2b4e:	10 82       	st	Z, r1
    2b50:	c9 01       	movw	r24, r18
    2b52:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <strrev>

00002b56 <strrev>:
    2b56:	dc 01       	movw	r26, r24
    2b58:	fc 01       	movw	r30, r24
    2b5a:	67 2f       	mov	r22, r23
    2b5c:	71 91       	ld	r23, Z+
    2b5e:	77 23       	and	r23, r23
    2b60:	e1 f7       	brne	.-8      	; 0x2b5a <strrev+0x4>
    2b62:	32 97       	sbiw	r30, 0x02	; 2
    2b64:	04 c0       	rjmp	.+8      	; 0x2b6e <strrev+0x18>
    2b66:	7c 91       	ld	r23, X
    2b68:	6d 93       	st	X+, r22
    2b6a:	70 83       	st	Z, r23
    2b6c:	62 91       	ld	r22, -Z
    2b6e:	ae 17       	cp	r26, r30
    2b70:	bf 07       	cpc	r27, r31
    2b72:	c8 f3       	brcs	.-14     	; 0x2b66 <strrev+0x10>
    2b74:	08 95       	ret

00002b76 <__udivmodhi4>:
    2b76:	aa 1b       	sub	r26, r26
    2b78:	bb 1b       	sub	r27, r27
    2b7a:	51 e1       	ldi	r21, 0x11	; 17
    2b7c:	07 c0       	rjmp	.+14     	; 0x2b8c <__udivmodhi4_ep>

00002b7e <__udivmodhi4_loop>:
    2b7e:	aa 1f       	adc	r26, r26
    2b80:	bb 1f       	adc	r27, r27
    2b82:	a6 17       	cp	r26, r22
    2b84:	b7 07       	cpc	r27, r23
    2b86:	10 f0       	brcs	.+4      	; 0x2b8c <__udivmodhi4_ep>
    2b88:	a6 1b       	sub	r26, r22
    2b8a:	b7 0b       	sbc	r27, r23

00002b8c <__udivmodhi4_ep>:
    2b8c:	88 1f       	adc	r24, r24
    2b8e:	99 1f       	adc	r25, r25
    2b90:	5a 95       	dec	r21
    2b92:	a9 f7       	brne	.-22     	; 0x2b7e <__udivmodhi4_loop>
    2b94:	80 95       	com	r24
    2b96:	90 95       	com	r25
    2b98:	bc 01       	movw	r22, r24
    2b9a:	cd 01       	movw	r24, r26
    2b9c:	08 95       	ret

00002b9e <_exit>:
    2b9e:	f8 94       	cli

00002ba0 <__stop_program>:
    2ba0:	ff cf       	rjmp	.-2      	; 0x2ba0 <__stop_program>
