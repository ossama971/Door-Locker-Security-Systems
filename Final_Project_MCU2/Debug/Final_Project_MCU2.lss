
Final_Project_MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002754  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002754  000027e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800068  00800068  000027f0  2**0
                  ALLOC
  3 .stab         00003024  00000000  00000000  000027f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016a8  00000000  00000000  00005814  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000716c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aa50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000abb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ae3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b60b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ac 36       	cpi	r26, 0x6C	; 108
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 e5       	ldi	r30, 0x54	; 84
      78:	f7 e2       	ldi	r31, 0x27	; 39
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 0d 13 	call	0x261a	; 0x261a <main>
      8a:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9d 13 	jmp	0x273a	; 0x273a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9c 83       	std	Y+4, r25	; 0x04
     b5c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     b5e:	1a 82       	std	Y+2, r1	; 0x02
     b60:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     b62:	eb e2       	ldi	r30, 0x2B	; 43
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
     b6a:	ea e2       	ldi	r30, 0x2A	; 42
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	88 e1       	ldi	r24, 0x18	; 24
     b70:	80 83       	st	Z, r24

	UCSRC = (1<<URSEL);
     b72:	e0 e4       	ldi	r30, 0x40	; 64
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 e8       	ldi	r24, 0x80	; 128
     b78:	80 83       	st	Z, r24
	UCSRC |= ((Config_Ptr->stop_bit <<USBS)) | (Config_Ptr->parity <<UPM0);
     b7a:	a0 e4       	ldi	r26, 0x40	; 64
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	e0 e4       	ldi	r30, 0x40	; 64
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	38 2f       	mov	r19, r24
     b86:	eb 81       	ldd	r30, Y+3	; 0x03
     b88:	fc 81       	ldd	r31, Y+4	; 0x04
     b8a:	85 81       	ldd	r24, Z+5	; 0x05
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	28 2f       	mov	r18, r24
     b9e:	eb 81       	ldd	r30, Y+3	; 0x03
     ba0:	fc 81       	ldd	r31, Y+4	; 0x04
     ba2:	84 81       	ldd	r24, Z+4	; 0x04
     ba4:	88 2f       	mov	r24, r24
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	82 95       	swap	r24
     baa:	92 95       	swap	r25
     bac:	90 7f       	andi	r25, 0xF0	; 240
     bae:	98 27       	eor	r25, r24
     bb0:	80 7f       	andi	r24, 0xF0	; 240
     bb2:	98 27       	eor	r25, r24
     bb4:	82 2b       	or	r24, r18
     bb6:	83 2b       	or	r24, r19
     bb8:	8c 93       	st	X, r24
	switch (Config_Ptr->bit_data) {
     bba:	eb 81       	ldd	r30, Y+3	; 0x03
     bbc:	fc 81       	ldd	r31, Y+4	; 0x04
     bbe:	80 81       	ld	r24, Z
     bc0:	91 81       	ldd	r25, Z+1	; 0x01
     bc2:	a2 81       	ldd	r26, Z+2	; 0x02
     bc4:	b3 81       	ldd	r27, Z+3	; 0x03
     bc6:	8d 83       	std	Y+5, r24	; 0x05
     bc8:	9e 83       	std	Y+6, r25	; 0x06
     bca:	af 83       	std	Y+7, r26	; 0x07
     bcc:	b8 87       	std	Y+8, r27	; 0x08
     bce:	8d 81       	ldd	r24, Y+5	; 0x05
     bd0:	9e 81       	ldd	r25, Y+6	; 0x06
     bd2:	af 81       	ldd	r26, Y+7	; 0x07
     bd4:	b8 85       	ldd	r27, Y+8	; 0x08
     bd6:	87 30       	cpi	r24, 0x07	; 7
     bd8:	91 05       	cpc	r25, r1
     bda:	a1 05       	cpc	r26, r1
     bdc:	b1 05       	cpc	r27, r1
     bde:	c1 f1       	breq	.+112    	; 0xc50 <UART_init+0x10a>
     be0:	8d 81       	ldd	r24, Y+5	; 0x05
     be2:	9e 81       	ldd	r25, Y+6	; 0x06
     be4:	af 81       	ldd	r26, Y+7	; 0x07
     be6:	b8 85       	ldd	r27, Y+8	; 0x08
     be8:	88 30       	cpi	r24, 0x08	; 8
     bea:	91 05       	cpc	r25, r1
     bec:	a1 05       	cpc	r26, r1
     bee:	b1 05       	cpc	r27, r1
     bf0:	a0 f4       	brcc	.+40     	; 0xc1a <UART_init+0xd4>
     bf2:	8d 81       	ldd	r24, Y+5	; 0x05
     bf4:	9e 81       	ldd	r25, Y+6	; 0x06
     bf6:	af 81       	ldd	r26, Y+7	; 0x07
     bf8:	b8 85       	ldd	r27, Y+8	; 0x08
     bfa:	85 30       	cpi	r24, 0x05	; 5
     bfc:	91 05       	cpc	r25, r1
     bfe:	a1 05       	cpc	r26, r1
     c00:	b1 05       	cpc	r27, r1
     c02:	09 f4       	brne	.+2      	; 0xc06 <UART_init+0xc0>
     c04:	43 c0       	rjmp	.+134    	; 0xc8c <UART_init+0x146>
     c06:	8d 81       	ldd	r24, Y+5	; 0x05
     c08:	9e 81       	ldd	r25, Y+6	; 0x06
     c0a:	af 81       	ldd	r26, Y+7	; 0x07
     c0c:	b8 85       	ldd	r27, Y+8	; 0x08
     c0e:	86 30       	cpi	r24, 0x06	; 6
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	a1 f0       	breq	.+40     	; 0xc40 <UART_init+0xfa>
     c18:	39 c0       	rjmp	.+114    	; 0xc8c <UART_init+0x146>
     c1a:	8d 81       	ldd	r24, Y+5	; 0x05
     c1c:	9e 81       	ldd	r25, Y+6	; 0x06
     c1e:	af 81       	ldd	r26, Y+7	; 0x07
     c20:	b8 85       	ldd	r27, Y+8	; 0x08
     c22:	88 30       	cpi	r24, 0x08	; 8
     c24:	91 05       	cpc	r25, r1
     c26:	a1 05       	cpc	r26, r1
     c28:	b1 05       	cpc	r27, r1
     c2a:	d1 f0       	breq	.+52     	; 0xc60 <UART_init+0x11a>
     c2c:	8d 81       	ldd	r24, Y+5	; 0x05
     c2e:	9e 81       	ldd	r25, Y+6	; 0x06
     c30:	af 81       	ldd	r26, Y+7	; 0x07
     c32:	b8 85       	ldd	r27, Y+8	; 0x08
     c34:	89 30       	cpi	r24, 0x09	; 9
     c36:	91 05       	cpc	r25, r1
     c38:	a1 05       	cpc	r26, r1
     c3a:	b1 05       	cpc	r27, r1
     c3c:	c9 f0       	breq	.+50     	; 0xc70 <UART_init+0x12a>
     c3e:	26 c0       	rjmp	.+76     	; 0xc8c <UART_init+0x146>
	        case 5:
	            // UCSZ1:0 = 00 for 5-bit data mode
	            break;
	        case 6:
	            UCSRC |= (1 << UCSZ0);  // UCSZ1:0 = 01 for 6-bit data mode
     c40:	a0 e4       	ldi	r26, 0x40	; 64
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e0 e4       	ldi	r30, 0x40	; 64
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	82 60       	ori	r24, 0x02	; 2
     c4c:	8c 93       	st	X, r24
     c4e:	1e c0       	rjmp	.+60     	; 0xc8c <UART_init+0x146>
	            break;
	        case 7:
	            UCSRC |= (1 << UCSZ1);  // UCSZ1:0 = 10 for 7-bit data mode
     c50:	a0 e4       	ldi	r26, 0x40	; 64
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	e0 e4       	ldi	r30, 0x40	; 64
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	84 60       	ori	r24, 0x04	; 4
     c5c:	8c 93       	st	X, r24
     c5e:	16 c0       	rjmp	.+44     	; 0xc8c <UART_init+0x146>
	            break;
	        case 8:
	            UCSRC |= (1 << UCSZ0) | (1 << UCSZ1);  // UCSZ1:0 = 11 for 8-bit data mode
     c60:	a0 e4       	ldi	r26, 0x40	; 64
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	e0 e4       	ldi	r30, 0x40	; 64
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	86 60       	ori	r24, 0x06	; 6
     c6c:	8c 93       	st	X, r24
     c6e:	0e c0       	rjmp	.+28     	; 0xc8c <UART_init+0x146>
	            break;
	        case 9:
	            UCSRC |= (1 << UCSZ0) | (1 << UCSZ1);  // UCSZ1:0 = 11 and UCSZ2 in UCSRB for 9-bit data mode
     c70:	a0 e4       	ldi	r26, 0x40	; 64
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e0 e4       	ldi	r30, 0x40	; 64
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	86 60       	ori	r24, 0x06	; 6
     c7c:	8c 93       	st	X, r24
	            UCSRB |= (1 << UCSZ2);
     c7e:	aa e2       	ldi	r26, 0x2A	; 42
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	ea e2       	ldi	r30, 0x2A	; 42
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	84 60       	ori	r24, 0x04	; 4
     c8a:	8c 93       	st	X, r24
	            break;
	    }

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baudrate * 8UL))) - 1);
     c8c:	eb 81       	ldd	r30, Y+3	; 0x03
     c8e:	fc 81       	ldd	r31, Y+4	; 0x04
     c90:	86 81       	ldd	r24, Z+6	; 0x06
     c92:	97 81       	ldd	r25, Z+7	; 0x07
     c94:	a0 85       	ldd	r26, Z+8	; 0x08
     c96:	b1 85       	ldd	r27, Z+9	; 0x09
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	aa 1f       	adc	r26, r26
     c9e:	bb 1f       	adc	r27, r27
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	aa 1f       	adc	r26, r26
     ca6:	bb 1f       	adc	r27, r27
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	aa 1f       	adc	r26, r26
     cae:	bb 1f       	adc	r27, r27
     cb0:	9c 01       	movw	r18, r24
     cb2:	ad 01       	movw	r20, r26
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	92 e1       	ldi	r25, 0x12	; 18
     cb8:	aa e7       	ldi	r26, 0x7A	; 122
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	bc 01       	movw	r22, r24
     cbe:	cd 01       	movw	r24, r26
     cc0:	0e 94 4f 13 	call	0x269e	; 0x269e <__udivmodsi4>
     cc4:	da 01       	movw	r26, r20
     cc6:	c9 01       	movw	r24, r18
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	9a 83       	std	Y+2, r25	; 0x02
     ccc:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     cce:	e0 e4       	ldi	r30, 0x40	; 64
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	9a 81       	ldd	r25, Y+2	; 0x02
     cd6:	89 2f       	mov	r24, r25
     cd8:	99 27       	eor	r25, r25
     cda:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     cdc:	e9 e2       	ldi	r30, 0x29	; 41
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	80 83       	st	Z, r24
}
     ce4:	28 96       	adiw	r28, 0x08	; 8
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	0f 92       	push	r0
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     d02:	eb e2       	ldi	r30, 0x2B	; 43
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	88 2f       	mov	r24, r24
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	80 72       	andi	r24, 0x20	; 32
     d0e:	90 70       	andi	r25, 0x00	; 0
     d10:	00 97       	sbiw	r24, 0x00	; 0
     d12:	b9 f3       	breq	.-18     	; 0xd02 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     d14:	ec e2       	ldi	r30, 0x2C	; 44
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     d1c:	0f 90       	pop	r0
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     d2c:	eb e2       	ldi	r30, 0x2B	; 43
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	88 23       	and	r24, r24
     d34:	dc f7       	brge	.-10     	; 0xd2c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
     d36:	ec e2       	ldi	r30, 0x2C	; 44
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
}
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	00 d0       	rcall	.+0      	; 0xd48 <UART_sendString+0x6>
     d48:	0f 92       	push	r0
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	9b 83       	std	Y+3, r25	; 0x03
     d50:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d52:	19 82       	std	Y+1, r1	; 0x01
     d54:	0e c0       	rjmp	.+28     	; 0xd72 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	9b 81       	ldd	r25, Y+3	; 0x03
     d60:	fc 01       	movw	r30, r24
     d62:	e2 0f       	add	r30, r18
     d64:	f3 1f       	adc	r31, r19
     d66:	80 81       	ld	r24, Z
     d68:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <UART_sendByte>
		i++;
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	8f 5f       	subi	r24, 0xFF	; 255
     d70:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	9b 81       	ldd	r25, Y+3	; 0x03
     d7c:	fc 01       	movw	r30, r24
     d7e:	e2 0f       	add	r30, r18
     d80:	f3 1f       	adc	r31, r19
     d82:	80 81       	ld	r24, Z
     d84:	88 23       	and	r24, r24
     d86:	39 f7       	brne	.-50     	; 0xd56 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	08 95       	ret

00000d94 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <UART_receiveString+0xa>
     d9e:	0f 92       	push	r0
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	9b 83       	std	Y+3, r25	; 0x03
     da6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     da8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	9b 81       	ldd	r25, Y+3	; 0x03
     db4:	8c 01       	movw	r16, r24
     db6:	02 0f       	add	r16, r18
     db8:	13 1f       	adc	r17, r19
     dba:	0e 94 92 06 	call	0xd24	; 0xd24 <UART_recieveByte>
     dbe:	f8 01       	movw	r30, r16
     dc0:	80 83       	st	Z, r24
     dc2:	0f c0       	rjmp	.+30     	; 0xde2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	8f 5f       	subi	r24, 0xFF	; 255
     dc8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	9b 81       	ldd	r25, Y+3	; 0x03
     dd4:	8c 01       	movw	r16, r24
     dd6:	02 0f       	add	r16, r18
     dd8:	13 1f       	adc	r17, r19
     dda:	0e 94 92 06 	call	0xd24	; 0xd24 <UART_recieveByte>
     dde:	f8 01       	movw	r30, r16
     de0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	9b 81       	ldd	r25, Y+3	; 0x03
     dec:	fc 01       	movw	r30, r24
     dee:	e2 0f       	add	r30, r18
     df0:	f3 1f       	adc	r31, r19
     df2:	80 81       	ld	r24, Z
     df4:	83 32       	cpi	r24, 0x23	; 35
     df6:	31 f7       	brne	.-52     	; 0xdc4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	9b 81       	ldd	r25, Y+3	; 0x03
     e02:	fc 01       	movw	r30, r24
     e04:	e2 0f       	add	r30, r18
     e06:	f3 1f       	adc	r31, r19
     e08:	10 82       	st	Z, r1
}
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	1f 91       	pop	r17
     e16:	0f 91       	pop	r16
     e18:	08 95       	ret

00000e1a <TWI_init>:
#include "TWI.h"
#include "../utils/common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	00 d0       	rcall	.+0      	; 0xe20 <TWI_init+0x6>
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr->bit_rate; //0x02 for 400kbps
     e28:	a0 e2       	ldi	r26, 0x20	; 32
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e9 81       	ldd	r30, Y+1	; 0x01
     e2e:	fa 81       	ldd	r31, Y+2	; 0x02
     e30:	81 81       	ldd	r24, Z+1	; 0x01
     e32:	8c 93       	st	X, r24
	TWSR = 0x00;
     e34:	e1 e2       	ldi	r30, 0x21	; 33
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	10 82       	st	Z, r1


    TWAR = ((Config_Ptr->address) << 1); // my address = 0x0a :)
     e3a:	a2 e2       	ldi	r26, 0x22	; 34
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e9 81       	ldd	r30, Y+1	; 0x01
     e40:	fa 81       	ldd	r31, Y+2	; 0x02
     e42:	80 81       	ld	r24, Z
     e44:	88 0f       	add	r24, r24
     e46:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
     e48:	e6 e5       	ldi	r30, 0x56	; 86
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	84 e0       	ldi	r24, 0x04	; 4
     e4e:	80 83       	st	Z, r24
}
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <TWI_start>:

void TWI_start(void)
{
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     e62:	e6 e5       	ldi	r30, 0x56	; 86
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	84 ea       	ldi	r24, 0xA4	; 164
     e68:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e6a:	e6 e5       	ldi	r30, 0x56	; 86
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	88 23       	and	r24, r24
     e72:	dc f7       	brge	.-10     	; 0xe6a <TWI_start+0x10>
}
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <TWI_stop>:

void TWI_stop(void)
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     e82:	e6 e5       	ldi	r30, 0x56	; 86
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	84 e9       	ldi	r24, 0x94	; 148
     e88:	80 83       	st	Z, r24
}
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     e9c:	e3 e2       	ldi	r30, 0x23	; 35
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     ea4:	e6 e5       	ldi	r30, 0x56	; 86
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	84 e8       	ldi	r24, 0x84	; 132
     eaa:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     eac:	e6 e5       	ldi	r30, 0x56	; 86
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	88 23       	and	r24, r24
     eb4:	dc f7       	brge	.-10     	; 0xeac <TWI_writeByte+0x1c>
}
     eb6:	0f 90       	pop	r0
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     ec6:	e6 e5       	ldi	r30, 0x56	; 86
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	84 ec       	ldi	r24, 0xC4	; 196
     ecc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     ece:	e6 e5       	ldi	r30, 0x56	; 86
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	88 23       	and	r24, r24
     ed6:	dc f7       	brge	.-10     	; 0xece <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
     ed8:	e3 e2       	ldi	r30, 0x23	; 35
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
}
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     eec:	e6 e5       	ldi	r30, 0x56	; 86
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	84 e8       	ldi	r24, 0x84	; 132
     ef2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     ef4:	e6 e5       	ldi	r30, 0x56	; 86
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	88 23       	and	r24, r24
     efc:	dc f7       	brge	.-10     	; 0xef4 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
     efe:	e3 e2       	ldi	r30, 0x23	; 35
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
}
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	0f 92       	push	r0
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     f14:	e1 e2       	ldi	r30, 0x21	; 33
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	88 7f       	andi	r24, 0xF8	; 248
     f1c:	89 83       	std	Y+1, r24	; 0x01
    return status;
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f20:	0f 90       	pop	r0
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <__vector_9>:

void(*callback_ptr)(void) = NULL;


ISR(TIMER1_OVF_vect)
{
     f28:	1f 92       	push	r1
     f2a:	0f 92       	push	r0
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	0f 92       	push	r0
     f30:	11 24       	eor	r1, r1
     f32:	2f 93       	push	r18
     f34:	3f 93       	push	r19
     f36:	4f 93       	push	r20
     f38:	5f 93       	push	r21
     f3a:	6f 93       	push	r22
     f3c:	7f 93       	push	r23
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
     f46:	ef 93       	push	r30
     f48:	ff 93       	push	r31
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	if(callback_ptr != NULL){
     f52:	80 91 68 00 	lds	r24, 0x0068
     f56:	90 91 69 00 	lds	r25, 0x0069
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	29 f0       	breq	.+10     	; 0xf68 <__vector_9+0x40>
		callback_ptr();
     f5e:	e0 91 68 00 	lds	r30, 0x0068
     f62:	f0 91 69 00 	lds	r31, 0x0069
     f66:	09 95       	icall
	}
}
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	ff 91       	pop	r31
     f6e:	ef 91       	pop	r30
     f70:	bf 91       	pop	r27
     f72:	af 91       	pop	r26
     f74:	9f 91       	pop	r25
     f76:	8f 91       	pop	r24
     f78:	7f 91       	pop	r23
     f7a:	6f 91       	pop	r22
     f7c:	5f 91       	pop	r21
     f7e:	4f 91       	pop	r20
     f80:	3f 91       	pop	r19
     f82:	2f 91       	pop	r18
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
     f98:	2f 93       	push	r18
     f9a:	3f 93       	push	r19
     f9c:	4f 93       	push	r20
     f9e:	5f 93       	push	r21
     fa0:	6f 93       	push	r22
     fa2:	7f 93       	push	r23
     fa4:	8f 93       	push	r24
     fa6:	9f 93       	push	r25
     fa8:	af 93       	push	r26
     faa:	bf 93       	push	r27
     fac:	ef 93       	push	r30
     fae:	ff 93       	push	r31
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
	if(callback_ptr != NULL){
     fb8:	80 91 68 00 	lds	r24, 0x0068
     fbc:	90 91 69 00 	lds	r25, 0x0069
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	29 f0       	breq	.+10     	; 0xfce <__vector_7+0x40>
		callback_ptr();
     fc4:	e0 91 68 00 	lds	r30, 0x0068
     fc8:	f0 91 69 00 	lds	r31, 0x0069
     fcc:	09 95       	icall
	}
}
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	ff 91       	pop	r31
     fd4:	ef 91       	pop	r30
     fd6:	bf 91       	pop	r27
     fd8:	af 91       	pop	r26
     fda:	9f 91       	pop	r25
     fdc:	8f 91       	pop	r24
     fde:	7f 91       	pop	r23
     fe0:	6f 91       	pop	r22
     fe2:	5f 91       	pop	r21
     fe4:	4f 91       	pop	r20
     fe6:	3f 91       	pop	r19
     fe8:	2f 91       	pop	r18
     fea:	0f 90       	pop	r0
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	0f 90       	pop	r0
     ff0:	1f 90       	pop	r1
     ff2:	18 95       	reti

00000ff4 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType* config_ptr)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <Timer1_init+0x6>
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	9a 83       	std	Y+2, r25	; 0x02
    1000:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = config_ptr->intial_value;
    1002:	ac e4       	ldi	r26, 0x4C	; 76
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e9 81       	ldd	r30, Y+1	; 0x01
    1008:	fa 81       	ldd	r31, Y+2	; 0x02
    100a:	80 81       	ld	r24, Z
    100c:	91 81       	ldd	r25, Z+1	; 0x01
    100e:	11 96       	adiw	r26, 0x01	; 1
    1010:	9c 93       	st	X, r25
    1012:	8e 93       	st	-X, r24
	TCCR1A = (1<<FOC1A);
    1014:	ef e4       	ldi	r30, 0x4F	; 79
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	88 e0       	ldi	r24, 0x08	; 8
    101a:	80 83       	st	Z, r24
	if(config_ptr->mode == normal)
    101c:	e9 81       	ldd	r30, Y+1	; 0x01
    101e:	fa 81       	ldd	r31, Y+2	; 0x02
    1020:	85 81       	ldd	r24, Z+5	; 0x05
    1022:	88 23       	and	r24, r24
    1024:	91 f4       	brne	.+36     	; 0x104a <Timer1_init+0x56>
	{
		TIMSK |= (1<<TOIE1); //enable interrupt for overflow/normal mode
    1026:	a9 e5       	ldi	r26, 0x59	; 89
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e9 e5       	ldi	r30, 0x59	; 89
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	84 60       	ori	r24, 0x04	; 4
    1032:	8c 93       	st	X, r24
		TCCR1B |= (config_ptr->prescaler<<CS10);
    1034:	ae e4       	ldi	r26, 0x4E	; 78
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	ee e4       	ldi	r30, 0x4E	; 78
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	90 81       	ld	r25, Z
    103e:	e9 81       	ldd	r30, Y+1	; 0x01
    1040:	fa 81       	ldd	r31, Y+2	; 0x02
    1042:	84 81       	ldd	r24, Z+4	; 0x04
    1044:	89 2b       	or	r24, r25
    1046:	8c 93       	st	X, r24
    1048:	1b c0       	rjmp	.+54     	; 0x1080 <Timer1_init+0x8c>
	}
	else{
		TIMSK |= (1<<OCIE1A); //enable interrupt for compare A match
    104a:	a9 e5       	ldi	r26, 0x59	; 89
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e9 e5       	ldi	r30, 0x59	; 89
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	80 61       	ori	r24, 0x10	; 16
    1056:	8c 93       	st	X, r24
		OCR1A = config_ptr->compare_value; // insert compare value
    1058:	aa e4       	ldi	r26, 0x4A	; 74
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e9 81       	ldd	r30, Y+1	; 0x01
    105e:	fa 81       	ldd	r31, Y+2	; 0x02
    1060:	82 81       	ldd	r24, Z+2	; 0x02
    1062:	93 81       	ldd	r25, Z+3	; 0x03
    1064:	11 96       	adiw	r26, 0x01	; 1
    1066:	9c 93       	st	X, r25
    1068:	8e 93       	st	-X, r24
		TCCR1B |= (1<<WGM12) | (config_ptr->prescaler<<CS10); // set prescaler and ctc mode
    106a:	ae e4       	ldi	r26, 0x4E	; 78
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	ee e4       	ldi	r30, 0x4E	; 78
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	90 81       	ld	r25, Z
    1074:	e9 81       	ldd	r30, Y+1	; 0x01
    1076:	fa 81       	ldd	r31, Y+2	; 0x02
    1078:	84 81       	ldd	r24, Z+4	; 0x04
    107a:	89 2b       	or	r24, r25
    107c:	88 60       	ori	r24, 0x08	; 8
    107e:	8c 93       	st	X, r24
	}
}
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <Timer1_deInit>:

void Timer1_deInit(void)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
	//Clear Timer1 Registers.
	TCCR1A=0;	TCCR1B=0;	TCNT1=0;	OCR1A=0;	TIMSK=0;
    1092:	ef e4       	ldi	r30, 0x4F	; 79
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	10 82       	st	Z, r1
    1098:	ee e4       	ldi	r30, 0x4E	; 78
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	10 82       	st	Z, r1
    109e:	ec e4       	ldi	r30, 0x4C	; 76
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	11 82       	std	Z+1, r1	; 0x01
    10a4:	10 82       	st	Z, r1
    10a6:	ea e4       	ldi	r30, 0x4A	; 74
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	11 82       	std	Z+1, r1	; 0x01
    10ac:	10 82       	st	Z, r1
    10ae:	e9 e5       	ldi	r30, 0x59	; 89
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	10 82       	st	Z, r1
}
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <Timer1_setCallBack+0x6>
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	9a 83       	std	Y+2, r25	; 0x02
    10c6:	89 83       	std	Y+1, r24	; 0x01
	callback_ptr = a_ptr;
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	9a 81       	ldd	r25, Y+2	; 0x02
    10cc:	90 93 69 00 	sts	0x0069, r25
    10d0:	80 93 68 00 	sts	0x0068, r24
}
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <Timer0_PWM_Init>:
 *      Author: Osama
 */
#include"avr/io.h"
#include "../GPIO/GPIO.h"
void Timer0_PWM_Init(unsigned char set_duty_cycle)
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	0f 92       	push	r0
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // Set Timer Initial Value to 0
    10ea:	e2 e5       	ldi	r30, 0x52	; 82
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	10 82       	st	Z, r1

	OCR0  = set_duty_cycle; //Set Compare value
    10f0:	ec e5       	ldi	r30, 0x5C	; 92
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	80 83       	st	Z, r24

	GPIO_setupPin(PORTB_ID,PIN3,PIN_OUTPUT);
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	63 e0       	ldi	r22, 0x03	; 3
    10fc:	41 e0       	ldi	r20, 0x01	; 1
    10fe:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_setupPin>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1102:	e3 e5       	ldi	r30, 0x53	; 83
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	8a e6       	ldi	r24, 0x6A	; 106
    1108:	80 83       	st	Z, r24
}
    110a:	0f 90       	pop	r0
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <GPIO_setupPin>:
#include "GPIO.h"
#include "../utils/common_macros.h"
#include "avr/io.h"

void GPIO_setupPin(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	00 d0       	rcall	.+0      	; 0x1118 <GPIO_setupPin+0x6>
    1118:	00 d0       	rcall	.+0      	; 0x111a <GPIO_setupPin+0x8>
    111a:	0f 92       	push	r0
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	6a 83       	std	Y+2, r22	; 0x02
    1124:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS) || (port_num >= NUM_OF_PORTS))
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	88 30       	cpi	r24, 0x08	; 8
    112a:	08 f0       	brcs	.+2      	; 0x112e <GPIO_setupPin+0x1c>
    112c:	d5 c0       	rjmp	.+426    	; 0x12d8 <GPIO_setupPin+0x1c6>
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	84 30       	cpi	r24, 0x04	; 4
    1132:	08 f0       	brcs	.+2      	; 0x1136 <GPIO_setupPin+0x24>
    1134:	d1 c0       	rjmp	.+418    	; 0x12d8 <GPIO_setupPin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	3d 83       	std	Y+5, r19	; 0x05
    113e:	2c 83       	std	Y+4, r18	; 0x04
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
    1142:	9d 81       	ldd	r25, Y+5	; 0x05
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	91 05       	cpc	r25, r1
    1148:	09 f4       	brne	.+2      	; 0x114c <GPIO_setupPin+0x3a>
    114a:	43 c0       	rjmp	.+134    	; 0x11d2 <GPIO_setupPin+0xc0>
    114c:	2c 81       	ldd	r18, Y+4	; 0x04
    114e:	3d 81       	ldd	r19, Y+5	; 0x05
    1150:	22 30       	cpi	r18, 0x02	; 2
    1152:	31 05       	cpc	r19, r1
    1154:	2c f4       	brge	.+10     	; 0x1160 <GPIO_setupPin+0x4e>
    1156:	8c 81       	ldd	r24, Y+4	; 0x04
    1158:	9d 81       	ldd	r25, Y+5	; 0x05
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	71 f0       	breq	.+28     	; 0x117a <GPIO_setupPin+0x68>
    115e:	bc c0       	rjmp	.+376    	; 0x12d8 <GPIO_setupPin+0x1c6>
    1160:	2c 81       	ldd	r18, Y+4	; 0x04
    1162:	3d 81       	ldd	r19, Y+5	; 0x05
    1164:	22 30       	cpi	r18, 0x02	; 2
    1166:	31 05       	cpc	r19, r1
    1168:	09 f4       	brne	.+2      	; 0x116c <GPIO_setupPin+0x5a>
    116a:	5f c0       	rjmp	.+190    	; 0x122a <GPIO_setupPin+0x118>
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	9d 81       	ldd	r25, Y+5	; 0x05
    1170:	83 30       	cpi	r24, 0x03	; 3
    1172:	91 05       	cpc	r25, r1
    1174:	09 f4       	brne	.+2      	; 0x1178 <GPIO_setupPin+0x66>
    1176:	85 c0       	rjmp	.+266    	; 0x1282 <GPIO_setupPin+0x170>
    1178:	af c0       	rjmp	.+350    	; 0x12d8 <GPIO_setupPin+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	a1 f4       	brne	.+40     	; 0x11a8 <GPIO_setupPin+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1180:	aa e3       	ldi	r26, 0x3A	; 58
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	ea e3       	ldi	r30, 0x3A	; 58
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <GPIO_setupPin+0x8c>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <GPIO_setupPin+0x88>
    11a2:	84 2b       	or	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	98 c0       	rjmp	.+304    	; 0x12d8 <GPIO_setupPin+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    11a8:	aa e3       	ldi	r26, 0x3A	; 58
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	ea e3       	ldi	r30, 0x3A	; 58
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <GPIO_setupPin+0xb4>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <GPIO_setupPin+0xb0>
    11ca:	80 95       	com	r24
    11cc:	84 23       	and	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	83 c0       	rjmp	.+262    	; 0x12d8 <GPIO_setupPin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	a1 f4       	brne	.+40     	; 0x1200 <GPIO_setupPin+0xee>
			{
				SET_BIT(DDRB,pin_num);
    11d8:	a7 e3       	ldi	r26, 0x37	; 55
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e7 e3       	ldi	r30, 0x37	; 55
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <GPIO_setupPin+0xe4>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <GPIO_setupPin+0xe0>
    11fa:	84 2b       	or	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	6c c0       	rjmp	.+216    	; 0x12d8 <GPIO_setupPin+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1200:	a7 e3       	ldi	r26, 0x37	; 55
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e7 e3       	ldi	r30, 0x37	; 55
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <GPIO_setupPin+0x10c>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <GPIO_setupPin+0x108>
    1222:	80 95       	com	r24
    1224:	84 23       	and	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	57 c0       	rjmp	.+174    	; 0x12d8 <GPIO_setupPin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	a1 f4       	brne	.+40     	; 0x1258 <GPIO_setupPin+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1230:	a4 e3       	ldi	r26, 0x34	; 52
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e4 e3       	ldi	r30, 0x34	; 52
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <GPIO_setupPin+0x13c>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <GPIO_setupPin+0x138>
    1252:	84 2b       	or	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	40 c0       	rjmp	.+128    	; 0x12d8 <GPIO_setupPin+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1258:	a4 e3       	ldi	r26, 0x34	; 52
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e4 e3       	ldi	r30, 0x34	; 52
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <GPIO_setupPin+0x164>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <GPIO_setupPin+0x160>
    127a:	80 95       	com	r24
    127c:	84 23       	and	r24, r20
    127e:	8c 93       	st	X, r24
    1280:	2b c0       	rjmp	.+86     	; 0x12d8 <GPIO_setupPin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	a1 f4       	brne	.+40     	; 0x12b0 <GPIO_setupPin+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1288:	a1 e3       	ldi	r26, 0x31	; 49
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e1 e3       	ldi	r30, 0x31	; 49
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <GPIO_setupPin+0x194>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <GPIO_setupPin+0x190>
    12aa:	84 2b       	or	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	14 c0       	rjmp	.+40     	; 0x12d8 <GPIO_setupPin+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    12b0:	a1 e3       	ldi	r26, 0x31	; 49
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e1 e3       	ldi	r30, 0x31	; 49
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <GPIO_setupPin+0x1bc>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <GPIO_setupPin+0x1b8>
    12d2:	80 95       	com	r24
    12d4:	84 23       	and	r24, r20
    12d6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <GPIO_writePin>:
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <GPIO_writePin+0x6>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <GPIO_writePin+0x8>
    12f0:	0f 92       	push	r0
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	6a 83       	std	Y+2, r22	; 0x02
    12fa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS) || (port_num >= NUM_OF_PORTS))
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	88 30       	cpi	r24, 0x08	; 8
    1300:	08 f0       	brcs	.+2      	; 0x1304 <GPIO_writePin+0x1c>
    1302:	d5 c0       	rjmp	.+426    	; 0x14ae <GPIO_writePin+0x1c6>
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	84 30       	cpi	r24, 0x04	; 4
    1308:	08 f0       	brcs	.+2      	; 0x130c <GPIO_writePin+0x24>
    130a:	d1 c0       	rjmp	.+418    	; 0x14ae <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	3d 83       	std	Y+5, r19	; 0x05
    1314:	2c 83       	std	Y+4, r18	; 0x04
    1316:	8c 81       	ldd	r24, Y+4	; 0x04
    1318:	9d 81       	ldd	r25, Y+5	; 0x05
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	91 05       	cpc	r25, r1
    131e:	09 f4       	brne	.+2      	; 0x1322 <GPIO_writePin+0x3a>
    1320:	43 c0       	rjmp	.+134    	; 0x13a8 <GPIO_writePin+0xc0>
    1322:	2c 81       	ldd	r18, Y+4	; 0x04
    1324:	3d 81       	ldd	r19, Y+5	; 0x05
    1326:	22 30       	cpi	r18, 0x02	; 2
    1328:	31 05       	cpc	r19, r1
    132a:	2c f4       	brge	.+10     	; 0x1336 <GPIO_writePin+0x4e>
    132c:	8c 81       	ldd	r24, Y+4	; 0x04
    132e:	9d 81       	ldd	r25, Y+5	; 0x05
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	71 f0       	breq	.+28     	; 0x1350 <GPIO_writePin+0x68>
    1334:	bc c0       	rjmp	.+376    	; 0x14ae <GPIO_writePin+0x1c6>
    1336:	2c 81       	ldd	r18, Y+4	; 0x04
    1338:	3d 81       	ldd	r19, Y+5	; 0x05
    133a:	22 30       	cpi	r18, 0x02	; 2
    133c:	31 05       	cpc	r19, r1
    133e:	09 f4       	brne	.+2      	; 0x1342 <GPIO_writePin+0x5a>
    1340:	5f c0       	rjmp	.+190    	; 0x1400 <GPIO_writePin+0x118>
    1342:	8c 81       	ldd	r24, Y+4	; 0x04
    1344:	9d 81       	ldd	r25, Y+5	; 0x05
    1346:	83 30       	cpi	r24, 0x03	; 3
    1348:	91 05       	cpc	r25, r1
    134a:	09 f4       	brne	.+2      	; 0x134e <GPIO_writePin+0x66>
    134c:	85 c0       	rjmp	.+266    	; 0x1458 <GPIO_writePin+0x170>
    134e:	af c0       	rjmp	.+350    	; 0x14ae <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	a1 f4       	brne	.+40     	; 0x137e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1356:	ab e3       	ldi	r26, 0x3B	; 59
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	eb e3       	ldi	r30, 0x3B	; 59
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	48 2f       	mov	r20, r24
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 2e       	mov	r0, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <GPIO_writePin+0x8c>
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	0a 94       	dec	r0
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <GPIO_writePin+0x88>
    1378:	84 2b       	or	r24, r20
    137a:	8c 93       	st	X, r24
    137c:	98 c0       	rjmp	.+304    	; 0x14ae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    137e:	ab e3       	ldi	r26, 0x3B	; 59
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	eb e3       	ldi	r30, 0x3B	; 59
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <GPIO_writePin+0xb4>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <GPIO_writePin+0xb0>
    13a0:	80 95       	com	r24
    13a2:	84 23       	and	r24, r20
    13a4:	8c 93       	st	X, r24
    13a6:	83 c0       	rjmp	.+262    	; 0x14ae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	a1 f4       	brne	.+40     	; 0x13d6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    13ae:	a8 e3       	ldi	r26, 0x38	; 56
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e8 e3       	ldi	r30, 0x38	; 56
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <GPIO_writePin+0xe4>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <GPIO_writePin+0xe0>
    13d0:	84 2b       	or	r24, r20
    13d2:	8c 93       	st	X, r24
    13d4:	6c c0       	rjmp	.+216    	; 0x14ae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    13d6:	a8 e3       	ldi	r26, 0x38	; 56
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e8 e3       	ldi	r30, 0x38	; 56
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	48 2f       	mov	r20, r24
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <GPIO_writePin+0x10c>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <GPIO_writePin+0x108>
    13f8:	80 95       	com	r24
    13fa:	84 23       	and	r24, r20
    13fc:	8c 93       	st	X, r24
    13fe:	57 c0       	rjmp	.+174    	; 0x14ae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	81 30       	cpi	r24, 0x01	; 1
    1404:	a1 f4       	brne	.+40     	; 0x142e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1406:	a5 e3       	ldi	r26, 0x35	; 53
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e5 e3       	ldi	r30, 0x35	; 53
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	48 2f       	mov	r20, r24
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	02 2e       	mov	r0, r18
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <GPIO_writePin+0x13c>
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	0a 94       	dec	r0
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <GPIO_writePin+0x138>
    1428:	84 2b       	or	r24, r20
    142a:	8c 93       	st	X, r24
    142c:	40 c0       	rjmp	.+128    	; 0x14ae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    142e:	a5 e3       	ldi	r26, 0x35	; 53
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e5 e3       	ldi	r30, 0x35	; 53
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	48 2f       	mov	r20, r24
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 2e       	mov	r0, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <GPIO_writePin+0x164>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	0a 94       	dec	r0
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <GPIO_writePin+0x160>
    1450:	80 95       	com	r24
    1452:	84 23       	and	r24, r20
    1454:	8c 93       	st	X, r24
    1456:	2b c0       	rjmp	.+86     	; 0x14ae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	a1 f4       	brne	.+40     	; 0x1486 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    145e:	a2 e3       	ldi	r26, 0x32	; 50
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e2 e3       	ldi	r30, 0x32	; 50
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	48 2f       	mov	r20, r24
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 2e       	mov	r0, r18
    1476:	02 c0       	rjmp	.+4      	; 0x147c <GPIO_writePin+0x194>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	0a 94       	dec	r0
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <GPIO_writePin+0x190>
    1480:	84 2b       	or	r24, r20
    1482:	8c 93       	st	X, r24
    1484:	14 c0       	rjmp	.+40     	; 0x14ae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1486:	a2 e3       	ldi	r26, 0x32	; 50
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e2 e3       	ldi	r30, 0x32	; 50
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	48 2f       	mov	r20, r24
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 2e       	mov	r0, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <GPIO_writePin+0x1bc>
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	0a 94       	dec	r0
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <GPIO_writePin+0x1b8>
    14a8:	80 95       	com	r24
    14aa:	84 23       	and	r24, r20
    14ac:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <GPIO_readPin>:

uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <GPIO_readPin+0x6>
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <GPIO_readPin+0x8>
    14c6:	0f 92       	push	r0
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	8a 83       	std	Y+2, r24	; 0x02
    14ce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    14d0:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS) || (port_num >= NUM_OF_PORTS))
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	88 30       	cpi	r24, 0x08	; 8
    14d6:	08 f0       	brcs	.+2      	; 0x14da <GPIO_readPin+0x1c>
    14d8:	84 c0       	rjmp	.+264    	; 0x15e2 <GPIO_readPin+0x124>
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	84 30       	cpi	r24, 0x04	; 4
    14de:	08 f0       	brcs	.+2      	; 0x14e2 <GPIO_readPin+0x24>
    14e0:	80 c0       	rjmp	.+256    	; 0x15e2 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	3d 83       	std	Y+5, r19	; 0x05
    14ea:	2c 83       	std	Y+4, r18	; 0x04
    14ec:	4c 81       	ldd	r20, Y+4	; 0x04
    14ee:	5d 81       	ldd	r21, Y+5	; 0x05
    14f0:	41 30       	cpi	r20, 0x01	; 1
    14f2:	51 05       	cpc	r21, r1
    14f4:	79 f1       	breq	.+94     	; 0x1554 <GPIO_readPin+0x96>
    14f6:	8c 81       	ldd	r24, Y+4	; 0x04
    14f8:	9d 81       	ldd	r25, Y+5	; 0x05
    14fa:	82 30       	cpi	r24, 0x02	; 2
    14fc:	91 05       	cpc	r25, r1
    14fe:	34 f4       	brge	.+12     	; 0x150c <GPIO_readPin+0x4e>
    1500:	2c 81       	ldd	r18, Y+4	; 0x04
    1502:	3d 81       	ldd	r19, Y+5	; 0x05
    1504:	21 15       	cp	r18, r1
    1506:	31 05       	cpc	r19, r1
    1508:	69 f0       	breq	.+26     	; 0x1524 <GPIO_readPin+0x66>
    150a:	6b c0       	rjmp	.+214    	; 0x15e2 <GPIO_readPin+0x124>
    150c:	4c 81       	ldd	r20, Y+4	; 0x04
    150e:	5d 81       	ldd	r21, Y+5	; 0x05
    1510:	42 30       	cpi	r20, 0x02	; 2
    1512:	51 05       	cpc	r21, r1
    1514:	b9 f1       	breq	.+110    	; 0x1584 <GPIO_readPin+0xc6>
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	9d 81       	ldd	r25, Y+5	; 0x05
    151a:	83 30       	cpi	r24, 0x03	; 3
    151c:	91 05       	cpc	r25, r1
    151e:	09 f4       	brne	.+2      	; 0x1522 <GPIO_readPin+0x64>
    1520:	49 c0       	rjmp	.+146    	; 0x15b4 <GPIO_readPin+0xf6>
    1522:	5f c0       	rjmp	.+190    	; 0x15e2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1524:	e9 e3       	ldi	r30, 0x39	; 57
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	88 2f       	mov	r24, r24
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	a9 01       	movw	r20, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <GPIO_readPin+0x7e>
    1538:	55 95       	asr	r21
    153a:	47 95       	ror	r20
    153c:	8a 95       	dec	r24
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <GPIO_readPin+0x7a>
    1540:	ca 01       	movw	r24, r20
    1542:	81 70       	andi	r24, 0x01	; 1
    1544:	90 70       	andi	r25, 0x00	; 0
    1546:	88 23       	and	r24, r24
    1548:	19 f0       	breq	.+6      	; 0x1550 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	49 c0       	rjmp	.+146    	; 0x15e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1550:	19 82       	std	Y+1, r1	; 0x01
    1552:	47 c0       	rjmp	.+142    	; 0x15e2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1554:	e6 e3       	ldi	r30, 0x36	; 54
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	88 2f       	mov	r24, r24
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	a9 01       	movw	r20, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <GPIO_readPin+0xae>
    1568:	55 95       	asr	r21
    156a:	47 95       	ror	r20
    156c:	8a 95       	dec	r24
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <GPIO_readPin+0xaa>
    1570:	ca 01       	movw	r24, r20
    1572:	81 70       	andi	r24, 0x01	; 1
    1574:	90 70       	andi	r25, 0x00	; 0
    1576:	88 23       	and	r24, r24
    1578:	19 f0       	breq	.+6      	; 0x1580 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	31 c0       	rjmp	.+98     	; 0x15e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1580:	19 82       	std	Y+1, r1	; 0x01
    1582:	2f c0       	rjmp	.+94     	; 0x15e2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1584:	e3 e3       	ldi	r30, 0x33	; 51
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	88 2f       	mov	r24, r24
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	a9 01       	movw	r20, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <GPIO_readPin+0xde>
    1598:	55 95       	asr	r21
    159a:	47 95       	ror	r20
    159c:	8a 95       	dec	r24
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <GPIO_readPin+0xda>
    15a0:	ca 01       	movw	r24, r20
    15a2:	81 70       	andi	r24, 0x01	; 1
    15a4:	90 70       	andi	r25, 0x00	; 0
    15a6:	88 23       	and	r24, r24
    15a8:	19 f0       	breq	.+6      	; 0x15b0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	19 c0       	rjmp	.+50     	; 0x15e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15b0:	19 82       	std	Y+1, r1	; 0x01
    15b2:	17 c0       	rjmp	.+46     	; 0x15e2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    15b4:	e0 e3       	ldi	r30, 0x30	; 48
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	a9 01       	movw	r20, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <GPIO_readPin+0x10e>
    15c8:	55 95       	asr	r21
    15ca:	47 95       	ror	r20
    15cc:	8a 95       	dec	r24
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <GPIO_readPin+0x10a>
    15d0:	ca 01       	movw	r24, r20
    15d2:	81 70       	andi	r24, 0x01	; 1
    15d4:	90 70       	andi	r25, 0x00	; 0
    15d6:	88 23       	and	r24, r24
    15d8:	19 f0       	breq	.+6      	; 0x15e0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	01 c0       	rjmp	.+2      	; 0x15e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15e0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <GPIO_setupPort>:
void GPIO_setupPort(uint8 port_num, GPIO_PortDirectionType direction)
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <GPIO_setupPort+0x6>
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <GPIO_setupPort+0x8>
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	89 83       	std	Y+1, r24	; 0x01
    1602:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	84 30       	cpi	r24, 0x04	; 4
    1608:	90 f5       	brcc	.+100    	; 0x166e <GPIO_setupPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	3c 83       	std	Y+4, r19	; 0x04
    1612:	2b 83       	std	Y+3, r18	; 0x03
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	9c 81       	ldd	r25, Y+4	; 0x04
    1618:	81 30       	cpi	r24, 0x01	; 1
    161a:	91 05       	cpc	r25, r1
    161c:	d1 f0       	breq	.+52     	; 0x1652 <GPIO_setupPort+0x5e>
    161e:	2b 81       	ldd	r18, Y+3	; 0x03
    1620:	3c 81       	ldd	r19, Y+4	; 0x04
    1622:	22 30       	cpi	r18, 0x02	; 2
    1624:	31 05       	cpc	r19, r1
    1626:	2c f4       	brge	.+10     	; 0x1632 <GPIO_setupPort+0x3e>
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	9c 81       	ldd	r25, Y+4	; 0x04
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	61 f0       	breq	.+24     	; 0x1648 <GPIO_setupPort+0x54>
    1630:	1e c0       	rjmp	.+60     	; 0x166e <GPIO_setupPort+0x7a>
    1632:	2b 81       	ldd	r18, Y+3	; 0x03
    1634:	3c 81       	ldd	r19, Y+4	; 0x04
    1636:	22 30       	cpi	r18, 0x02	; 2
    1638:	31 05       	cpc	r19, r1
    163a:	81 f0       	breq	.+32     	; 0x165c <GPIO_setupPort+0x68>
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	83 30       	cpi	r24, 0x03	; 3
    1642:	91 05       	cpc	r25, r1
    1644:	81 f0       	breq	.+32     	; 0x1666 <GPIO_setupPort+0x72>
    1646:	13 c0       	rjmp	.+38     	; 0x166e <GPIO_setupPort+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1648:	ea e3       	ldi	r30, 0x3A	; 58
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	80 83       	st	Z, r24
    1650:	0e c0       	rjmp	.+28     	; 0x166e <GPIO_setupPort+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1652:	e7 e3       	ldi	r30, 0x37	; 55
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	80 83       	st	Z, r24
    165a:	09 c0       	rjmp	.+18     	; 0x166e <GPIO_setupPort+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    165c:	e4 e3       	ldi	r30, 0x34	; 52
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	80 83       	st	Z, r24
    1664:	04 c0       	rjmp	.+8      	; 0x166e <GPIO_setupPort+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1666:	e1 e3       	ldi	r30, 0x31	; 49
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	80 83       	st	Z, r24
			break;
		}
	}
}
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value)
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	00 d0       	rcall	.+0      	; 0x1682 <GPIO_writePort+0x6>
    1682:	00 d0       	rcall	.+0      	; 0x1684 <GPIO_writePort+0x8>
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	84 30       	cpi	r24, 0x04	; 4
    1690:	90 f5       	brcc	.+100    	; 0x16f6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	3c 83       	std	Y+4, r19	; 0x04
    169a:	2b 83       	std	Y+3, r18	; 0x03
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	9c 81       	ldd	r25, Y+4	; 0x04
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	91 05       	cpc	r25, r1
    16a4:	d1 f0       	breq	.+52     	; 0x16da <GPIO_writePort+0x5e>
    16a6:	2b 81       	ldd	r18, Y+3	; 0x03
    16a8:	3c 81       	ldd	r19, Y+4	; 0x04
    16aa:	22 30       	cpi	r18, 0x02	; 2
    16ac:	31 05       	cpc	r19, r1
    16ae:	2c f4       	brge	.+10     	; 0x16ba <GPIO_writePort+0x3e>
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	61 f0       	breq	.+24     	; 0x16d0 <GPIO_writePort+0x54>
    16b8:	1e c0       	rjmp	.+60     	; 0x16f6 <GPIO_writePort+0x7a>
    16ba:	2b 81       	ldd	r18, Y+3	; 0x03
    16bc:	3c 81       	ldd	r19, Y+4	; 0x04
    16be:	22 30       	cpi	r18, 0x02	; 2
    16c0:	31 05       	cpc	r19, r1
    16c2:	81 f0       	breq	.+32     	; 0x16e4 <GPIO_writePort+0x68>
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	83 30       	cpi	r24, 0x03	; 3
    16ca:	91 05       	cpc	r25, r1
    16cc:	81 f0       	breq	.+32     	; 0x16ee <GPIO_writePort+0x72>
    16ce:	13 c0       	rjmp	.+38     	; 0x16f6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    16d0:	eb e3       	ldi	r30, 0x3B	; 59
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	80 83       	st	Z, r24
    16d8:	0e c0       	rjmp	.+28     	; 0x16f6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    16da:	e8 e3       	ldi	r30, 0x38	; 56
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	80 83       	st	Z, r24
    16e2:	09 c0       	rjmp	.+18     	; 0x16f6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    16e4:	e5 e3       	ldi	r30, 0x35	; 53
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	80 83       	st	Z, r24
    16ec:	04 c0       	rjmp	.+8      	; 0x16f6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    16ee:	e2 e3       	ldi	r30, 0x32	; 50
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	80 83       	st	Z, r24
			break;
		}
	}
}
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	08 95       	ret

00001704 <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num)
{
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	00 d0       	rcall	.+0      	; 0x170a <GPIO_readPort+0x6>
    170a:	00 d0       	rcall	.+0      	; 0x170c <GPIO_readPort+0x8>
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1712:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	84 30       	cpi	r24, 0x04	; 4
    1718:	90 f5       	brcc	.+100    	; 0x177e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	3c 83       	std	Y+4, r19	; 0x04
    1722:	2b 83       	std	Y+3, r18	; 0x03
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	9c 81       	ldd	r25, Y+4	; 0x04
    1728:	81 30       	cpi	r24, 0x01	; 1
    172a:	91 05       	cpc	r25, r1
    172c:	d1 f0       	breq	.+52     	; 0x1762 <GPIO_readPort+0x5e>
    172e:	2b 81       	ldd	r18, Y+3	; 0x03
    1730:	3c 81       	ldd	r19, Y+4	; 0x04
    1732:	22 30       	cpi	r18, 0x02	; 2
    1734:	31 05       	cpc	r19, r1
    1736:	2c f4       	brge	.+10     	; 0x1742 <GPIO_readPort+0x3e>
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	9c 81       	ldd	r25, Y+4	; 0x04
    173c:	00 97       	sbiw	r24, 0x00	; 0
    173e:	61 f0       	breq	.+24     	; 0x1758 <GPIO_readPort+0x54>
    1740:	1e c0       	rjmp	.+60     	; 0x177e <GPIO_readPort+0x7a>
    1742:	2b 81       	ldd	r18, Y+3	; 0x03
    1744:	3c 81       	ldd	r19, Y+4	; 0x04
    1746:	22 30       	cpi	r18, 0x02	; 2
    1748:	31 05       	cpc	r19, r1
    174a:	81 f0       	breq	.+32     	; 0x176c <GPIO_readPort+0x68>
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	83 30       	cpi	r24, 0x03	; 3
    1752:	91 05       	cpc	r25, r1
    1754:	81 f0       	breq	.+32     	; 0x1776 <GPIO_readPort+0x72>
    1756:	13 c0       	rjmp	.+38     	; 0x177e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1758:	e9 e3       	ldi	r30, 0x39	; 57
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	89 83       	std	Y+1, r24	; 0x01
    1760:	0e c0       	rjmp	.+28     	; 0x177e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1762:	e6 e3       	ldi	r30, 0x36	; 54
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	09 c0       	rjmp	.+18     	; 0x177e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    176c:	e3 e3       	ldi	r30, 0x33	; 51
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	04 c0       	rjmp	.+8      	; 0x177e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1776:	e0 e3       	ldi	r30, 0x30	; 48
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    177e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <EEPROM_writeByte>:

#include "EEROM.h"
#include "../TWI/TWI.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	00 d0       	rcall	.+0      	; 0x1794 <EEPROM_writeByte+0x6>
    1794:	00 d0       	rcall	.+0      	; 0x1796 <EEPROM_writeByte+0x8>
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	9a 83       	std	Y+2, r25	; 0x02
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    17a0:	0e 94 2d 07 	call	0xe5a	; 0xe5a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    17a4:	0e 94 85 07 	call	0xf0a	; 0xf0a <TWI_getStatus>
    17a8:	88 30       	cpi	r24, 0x08	; 8
    17aa:	11 f0       	breq	.+4      	; 0x17b0 <EEPROM_writeByte+0x22>
        return ERROR;
    17ac:	1c 82       	std	Y+4, r1	; 0x04
    17ae:	28 c0       	rjmp	.+80     	; 0x1800 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	80 70       	andi	r24, 0x00	; 0
    17b6:	97 70       	andi	r25, 0x07	; 7
    17b8:	88 0f       	add	r24, r24
    17ba:	89 2f       	mov	r24, r25
    17bc:	88 1f       	adc	r24, r24
    17be:	99 0b       	sbc	r25, r25
    17c0:	91 95       	neg	r25
    17c2:	80 6a       	ori	r24, 0xA0	; 160
    17c4:	0e 94 48 07 	call	0xe90	; 0xe90 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    17c8:	0e 94 85 07 	call	0xf0a	; 0xf0a <TWI_getStatus>
    17cc:	88 31       	cpi	r24, 0x18	; 24
    17ce:	11 f0       	breq	.+4      	; 0x17d4 <EEPROM_writeByte+0x46>
        return ERROR;
    17d0:	1c 82       	std	Y+4, r1	; 0x04
    17d2:	16 c0       	rjmp	.+44     	; 0x1800 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	0e 94 48 07 	call	0xe90	; 0xe90 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    17da:	0e 94 85 07 	call	0xf0a	; 0xf0a <TWI_getStatus>
    17de:	88 32       	cpi	r24, 0x28	; 40
    17e0:	11 f0       	breq	.+4      	; 0x17e6 <EEPROM_writeByte+0x58>
        return ERROR;
    17e2:	1c 82       	std	Y+4, r1	; 0x04
    17e4:	0d c0       	rjmp	.+26     	; 0x1800 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	0e 94 48 07 	call	0xe90	; 0xe90 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    17ec:	0e 94 85 07 	call	0xf0a	; 0xf0a <TWI_getStatus>
    17f0:	88 32       	cpi	r24, 0x28	; 40
    17f2:	11 f0       	breq	.+4      	; 0x17f8 <EEPROM_writeByte+0x6a>
        return ERROR;
    17f4:	1c 82       	std	Y+4, r1	; 0x04
    17f6:	04 c0       	rjmp	.+8      	; 0x1800 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    17f8:	0e 94 3d 07 	call	0xe7a	; 0xe7a <TWI_stop>

    return SUCCESS;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	8c 83       	std	Y+4, r24	; 0x04
    1800:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <EEPROM_readByte+0x6>
    1816:	00 d0       	rcall	.+0      	; 0x1818 <EEPROM_readByte+0x8>
    1818:	0f 92       	push	r0
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	9a 83       	std	Y+2, r25	; 0x02
    1820:	89 83       	std	Y+1, r24	; 0x01
    1822:	7c 83       	std	Y+4, r23	; 0x04
    1824:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1826:	0e 94 2d 07 	call	0xe5a	; 0xe5a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    182a:	0e 94 85 07 	call	0xf0a	; 0xf0a <TWI_getStatus>
    182e:	88 30       	cpi	r24, 0x08	; 8
    1830:	11 f0       	breq	.+4      	; 0x1836 <EEPROM_readByte+0x26>
        return ERROR;
    1832:	1d 82       	std	Y+5, r1	; 0x05
    1834:	44 c0       	rjmp	.+136    	; 0x18be <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	80 70       	andi	r24, 0x00	; 0
    183c:	97 70       	andi	r25, 0x07	; 7
    183e:	88 0f       	add	r24, r24
    1840:	89 2f       	mov	r24, r25
    1842:	88 1f       	adc	r24, r24
    1844:	99 0b       	sbc	r25, r25
    1846:	91 95       	neg	r25
    1848:	80 6a       	ori	r24, 0xA0	; 160
    184a:	0e 94 48 07 	call	0xe90	; 0xe90 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    184e:	0e 94 85 07 	call	0xf0a	; 0xf0a <TWI_getStatus>
    1852:	88 31       	cpi	r24, 0x18	; 24
    1854:	11 f0       	breq	.+4      	; 0x185a <EEPROM_readByte+0x4a>
        return ERROR;
    1856:	1d 82       	std	Y+5, r1	; 0x05
    1858:	32 c0       	rjmp	.+100    	; 0x18be <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	0e 94 48 07 	call	0xe90	; 0xe90 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1860:	0e 94 85 07 	call	0xf0a	; 0xf0a <TWI_getStatus>
    1864:	88 32       	cpi	r24, 0x28	; 40
    1866:	11 f0       	breq	.+4      	; 0x186c <EEPROM_readByte+0x5c>
        return ERROR;
    1868:	1d 82       	std	Y+5, r1	; 0x05
    186a:	29 c0       	rjmp	.+82     	; 0x18be <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    186c:	0e 94 2d 07 	call	0xe5a	; 0xe5a <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1870:	0e 94 85 07 	call	0xf0a	; 0xf0a <TWI_getStatus>
    1874:	80 31       	cpi	r24, 0x10	; 16
    1876:	11 f0       	breq	.+4      	; 0x187c <EEPROM_readByte+0x6c>
        return ERROR;
    1878:	1d 82       	std	Y+5, r1	; 0x05
    187a:	21 c0       	rjmp	.+66     	; 0x18be <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	9a 81       	ldd	r25, Y+2	; 0x02
    1880:	80 70       	andi	r24, 0x00	; 0
    1882:	97 70       	andi	r25, 0x07	; 7
    1884:	88 0f       	add	r24, r24
    1886:	89 2f       	mov	r24, r25
    1888:	88 1f       	adc	r24, r24
    188a:	99 0b       	sbc	r25, r25
    188c:	91 95       	neg	r25
    188e:	81 6a       	ori	r24, 0xA1	; 161
    1890:	0e 94 48 07 	call	0xe90	; 0xe90 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1894:	0e 94 85 07 	call	0xf0a	; 0xf0a <TWI_getStatus>
    1898:	80 34       	cpi	r24, 0x40	; 64
    189a:	11 f0       	breq	.+4      	; 0x18a0 <EEPROM_readByte+0x90>
        return ERROR;
    189c:	1d 82       	std	Y+5, r1	; 0x05
    189e:	0f c0       	rjmp	.+30     	; 0x18be <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    18a0:	0e 94 72 07 	call	0xee4	; 0xee4 <TWI_readByteWithNACK>
    18a4:	eb 81       	ldd	r30, Y+3	; 0x03
    18a6:	fc 81       	ldd	r31, Y+4	; 0x04
    18a8:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    18aa:	0e 94 85 07 	call	0xf0a	; 0xf0a <TWI_getStatus>
    18ae:	88 35       	cpi	r24, 0x58	; 88
    18b0:	11 f0       	breq	.+4      	; 0x18b6 <EEPROM_readByte+0xa6>
        return ERROR;
    18b2:	1d 82       	std	Y+5, r1	; 0x05
    18b4:	04 c0       	rjmp	.+8      	; 0x18be <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    18b6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <TWI_stop>

    return SUCCESS;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	8d 83       	std	Y+5, r24	; 0x05
    18be:	8d 81       	ldd	r24, Y+5	; 0x05
}
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <DcMotor_Init>:
 */
#include "DcMotor.h"
#include "../PWM/PWM.h"
#include "../GPIO/GPIO.h"

void DcMotor_Init(void){
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPin(DcMotorPort,DcMotorPin1,PIN_OUTPUT);
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	41 e0       	ldi	r20, 0x01	; 1
    18de:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_setupPin>
	GPIO_setupPin(DcMotorPort,DcMotorPin2,PIN_OUTPUT);
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	61 e0       	ldi	r22, 0x01	; 1
    18e6:	41 e0       	ldi	r20, 0x01	; 1
    18e8:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_setupPin>

	GPIO_writePin(DcMotorPort,DcMotorPin2,LOGIC_LOW);
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	61 e0       	ldi	r22, 0x01	; 1
    18f0:	40 e0       	ldi	r20, 0x00	; 0
    18f2:	0e 94 74 09 	call	0x12e8	; 0x12e8 <GPIO_writePin>
	GPIO_writePin(DcMotorPort,DcMotorPin2,LOGIC_LOW);
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	61 e0       	ldi	r22, 0x01	; 1
    18fa:	40 e0       	ldi	r20, 0x00	; 0
    18fc:	0e 94 74 09 	call	0x12e8	; 0x12e8 <GPIO_writePin>
}
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state)
{
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	00 d0       	rcall	.+0      	; 0x190c <DcMotor_Rotate+0x6>
    190c:	00 d0       	rcall	.+0      	; 0x190e <DcMotor_Rotate+0x8>
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	8c 83       	std	Y+4, r24	; 0x04
	uint8 portvalue = GPIO_readPort(DcMotorPort);
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	0e 94 82 0b 	call	0x1704	; 0x1704 <GPIO_readPort>
    191a:	8b 83       	std	Y+3, r24	; 0x03
	uint8 state_value = ((portvalue & 0xFC) | state);
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	98 2f       	mov	r25, r24
    1920:	9c 7f       	andi	r25, 0xFC	; 252
    1922:	8c 81       	ldd	r24, Y+4	; 0x04
    1924:	89 2b       	or	r24, r25
    1926:	8a 83       	std	Y+2, r24	; 0x02
	GPIO_writePort(DcMotorPort, state_value);
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	6a 81       	ldd	r22, Y+2	; 0x02
    192c:	0e 94 3e 0b 	call	0x167c	; 0x167c <GPIO_writePort>
//	uint8 dutyCycle = (speed * 255) / 100;
	uint8 dutyCycle = 255; //Maximum speed always
    1930:	8f ef       	ldi	r24, 0xFF	; 255
    1932:	89 83       	std	Y+1, r24	; 0x01
	Timer0_PWM_Init(dutyCycle);
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	0e 94 6f 08 	call	0x10de	; 0x10de <Timer0_PWM_Init>
}
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <Buzzer_init>:
#include "BUZZER.h"
#include "../GPIO/GPIO.h"


void Buzzer_init()
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPin(BUZZER_PORT, BUZZER_PIN,PIN_OUTPUT);
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	41 e0       	ldi	r20, 0x01	; 1
    1956:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_setupPin>
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN,LOGIC_LOW);
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	40 e0       	ldi	r20, 0x00	; 0
    1960:	0e 94 74 09 	call	0x12e8	; 0x12e8 <GPIO_writePin>

}
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <Buzzer_on>:
void Buzzer_on(void)
{
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN,LOGIC_HIGH);
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	60 e0       	ldi	r22, 0x00	; 0
    1976:	41 e0       	ldi	r20, 0x01	; 1
    1978:	0e 94 74 09 	call	0x12e8	; 0x12e8 <GPIO_writePin>
}
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <Buzzer_off>:

void Buzzer_off(void)
{
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN,LOGIC_LOW);
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	60 e0       	ldi	r22, 0x00	; 0
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	0e 94 74 09 	call	0x12e8	; 0x12e8 <GPIO_writePin>
}
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <counter>:
#include "BUZZER/BUZZER.h"
volatile uint8 errorcounter = 0;
#define EEROM_START_ADDRESS  0x311

volatile uint8 ticks = 0;
void counter(void){
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
	ticks++;
    19a2:	80 91 6b 00 	lds	r24, 0x006B
    19a6:	8f 5f       	subi	r24, 0xFF	; 255
    19a8:	80 93 6b 00 	sts	0x006B, r24
	if(ticks==15) /*15sec*/
    19ac:	80 91 6b 00 	lds	r24, 0x006B
    19b0:	8f 30       	cpi	r24, 0x0F	; 15
    19b2:	21 f4       	brne	.+8      	; 0x19bc <counter+0x22>
	{
		DcMotor_Rotate(STOP);
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	0e 94 83 0c 	call	0x1906	; 0x1906 <DcMotor_Rotate>
    19ba:	13 c0       	rjmp	.+38     	; 0x19e2 <counter+0x48>
	}
	else if(ticks == 18) /*3 sec after the first 15*/
    19bc:	80 91 6b 00 	lds	r24, 0x006B
    19c0:	82 31       	cpi	r24, 0x12	; 18
    19c2:	21 f4       	brne	.+8      	; 0x19cc <counter+0x32>
	{
		DcMotor_Rotate(CW);
    19c4:	82 e0       	ldi	r24, 0x02	; 2
    19c6:	0e 94 83 0c 	call	0x1906	; 0x1906 <DcMotor_Rotate>
    19ca:	0b c0       	rjmp	.+22     	; 0x19e2 <counter+0x48>
	}
	else if (ticks == 33)/*15 secs past the first 18*/
    19cc:	80 91 6b 00 	lds	r24, 0x006B
    19d0:	81 32       	cpi	r24, 0x21	; 33
    19d2:	39 f4       	brne	.+14     	; 0x19e2 <counter+0x48>
	{
		Timer1_deInit();
    19d4:	0e 94 45 08 	call	0x108a	; 0x108a <Timer1_deInit>
		DcMotor_Rotate(STOP);
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	0e 94 83 0c 	call	0x1906	; 0x1906 <DcMotor_Rotate>
		ticks=0;
    19de:	10 92 6b 00 	sts	0x006B, r1

		//
	}

}
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <startTimer>:
void startTimer()
{
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <startTimer+0x6>
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62

	Timer1_setCallBack(counter);
    19f2:	8d ec       	ldi	r24, 0xCD	; 205
    19f4:	9c e0       	ldi	r25, 0x0C	; 12
    19f6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <Timer1_setCallBack>
	Timer1_ConfigType *Timer_Config;
	Timer_Config ->mode = compare;
    19fa:	e9 81       	ldd	r30, Y+1	; 0x01
    19fc:	fa 81       	ldd	r31, Y+2	; 0x02
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	85 83       	std	Z+5, r24	; 0x05
	Timer_Config ->compare_value = 31250;
    1a02:	e9 81       	ldd	r30, Y+1	; 0x01
    1a04:	fa 81       	ldd	r31, Y+2	; 0x02
    1a06:	82 e1       	ldi	r24, 0x12	; 18
    1a08:	9a e7       	ldi	r25, 0x7A	; 122
    1a0a:	93 83       	std	Z+3, r25	; 0x03
    1a0c:	82 83       	std	Z+2, r24	; 0x02
	Timer_Config ->intial_value = 0;
    1a0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a10:	fa 81       	ldd	r31, Y+2	; 0x02
    1a12:	11 82       	std	Z+1, r1	; 0x01
    1a14:	10 82       	st	Z, r1
	Timer_Config ->prescaler = clk_256_prescaler;
    1a16:	e9 81       	ldd	r30, Y+1	; 0x01
    1a18:	fa 81       	ldd	r31, Y+2	; 0x02
    1a1a:	84 e0       	ldi	r24, 0x04	; 4
    1a1c:	84 83       	std	Z+4, r24	; 0x04
	Timer1_init(Timer_Config);
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	9a 81       	ldd	r25, Y+2	; 0x02
    1a22:	0e 94 fa 07 	call	0xff4	; 0xff4 <Timer1_init>

}
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <recievePassword>:

void recievePassword(uint8 *password)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <recievePassword+0x6>
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <recievePassword+0x8>
    1a38:	0f 92       	push	r0
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	9d 83       	std	Y+5, r25	; 0x05
    1a40:	8c 83       	std	Y+4, r24	; 0x04
	uint8 key;
	for(int i=0 ;i<5;i++)
    1a42:	1a 82       	std	Y+2, r1	; 0x02
    1a44:	19 82       	std	Y+1, r1	; 0x01
    1a46:	11 c0       	rjmp	.+34     	; 0x1a6a <recievePassword+0x3a>
	{
		key = UART_recieveByte();
    1a48:	0e 94 92 06 	call	0xd24	; 0xd24 <UART_recieveByte>
    1a4c:	8b 83       	std	Y+3, r24	; 0x03
		password[i] = key;
    1a4e:	29 81       	ldd	r18, Y+1	; 0x01
    1a50:	3a 81       	ldd	r19, Y+2	; 0x02
    1a52:	8c 81       	ldd	r24, Y+4	; 0x04
    1a54:	9d 81       	ldd	r25, Y+5	; 0x05
    1a56:	fc 01       	movw	r30, r24
    1a58:	e2 0f       	add	r30, r18
    1a5a:	f3 1f       	adc	r31, r19
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	80 83       	st	Z, r24
}

void recievePassword(uint8 *password)
{
	uint8 key;
	for(int i=0 ;i<5;i++)
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	9a 81       	ldd	r25, Y+2	; 0x02
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6e:	85 30       	cpi	r24, 0x05	; 5
    1a70:	91 05       	cpc	r25, r1
    1a72:	54 f3       	brlt	.-44     	; 0x1a48 <recievePassword+0x18>
	{
		key = UART_recieveByte();
		password[i] = key;
	}
}
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <checkSavedPassword>:

uint8 checkSavedPassword(uint8 *passwordCheck)
{
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	6c 97       	sbiw	r28, 0x1c	; 28
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	9c 8f       	std	Y+28, r25	; 0x1c
    1a9a:	8b 8f       	std	Y+27, r24	; 0x1b
	uint16 address = EEROM_START_ADDRESS;
    1a9c:	81 e1       	ldi	r24, 0x11	; 17
    1a9e:	93 e0       	ldi	r25, 0x03	; 3
    1aa0:	9d 8b       	std	Y+21, r25	; 0x15
    1aa2:	8c 8b       	std	Y+20, r24	; 0x14
	uint8 match = 1;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	8b 8b       	std	Y+19, r24	; 0x13
	uint8 savedPassword[5];
	for(int i = 0; i < 5; i++)
    1aa8:	1a 8a       	std	Y+18, r1	; 0x12
    1aaa:	19 8a       	std	Y+17, r1	; 0x11
    1aac:	88 c0       	rjmp	.+272    	; 0x1bbe <checkSavedPassword+0x13a>
	{
		EEPROM_readByte(address, &savedPassword[i]);
    1aae:	89 89       	ldd	r24, Y+17	; 0x11
    1ab0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ab2:	9e 01       	movw	r18, r28
    1ab4:	2a 5e       	subi	r18, 0xEA	; 234
    1ab6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab8:	28 0f       	add	r18, r24
    1aba:	39 1f       	adc	r19, r25
    1abc:	8c 89       	ldd	r24, Y+20	; 0x14
    1abe:	9d 89       	ldd	r25, Y+21	; 0x15
    1ac0:	b9 01       	movw	r22, r18
    1ac2:	0e 94 08 0c 	call	0x1810	; 0x1810 <EEPROM_readByte>
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	a0 e2       	ldi	r26, 0x20	; 32
    1acc:	b1 e4       	ldi	r27, 0x41	; 65
    1ace:	8b 87       	std	Y+11, r24	; 0x0b
    1ad0:	9c 87       	std	Y+12, r25	; 0x0c
    1ad2:	ad 87       	std	Y+13, r26	; 0x0d
    1ad4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ada:	8d 85       	ldd	r24, Y+13	; 0x0d
    1adc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	4a ef       	ldi	r20, 0xFA	; 250
    1ae4:	54 e4       	ldi	r21, 0x44	; 68
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	8f 83       	std	Y+7, r24	; 0x07
    1af0:	98 87       	std	Y+8, r25	; 0x08
    1af2:	a9 87       	std	Y+9, r26	; 0x09
    1af4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1af6:	6f 81       	ldd	r22, Y+7	; 0x07
    1af8:	78 85       	ldd	r23, Y+8	; 0x08
    1afa:	89 85       	ldd	r24, Y+9	; 0x09
    1afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e8       	ldi	r20, 0x80	; 128
    1b04:	5f e3       	ldi	r21, 0x3F	; 63
    1b06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b0a:	88 23       	and	r24, r24
    1b0c:	2c f4       	brge	.+10     	; 0x1b18 <checkSavedPassword+0x94>
		__ticks = 1;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	9e 83       	std	Y+6, r25	; 0x06
    1b14:	8d 83       	std	Y+5, r24	; 0x05
    1b16:	3f c0       	rjmp	.+126    	; 0x1b96 <checkSavedPassword+0x112>
	else if (__tmp > 65535)
    1b18:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1a:	78 85       	ldd	r23, Y+8	; 0x08
    1b1c:	89 85       	ldd	r24, Y+9	; 0x09
    1b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	3f ef       	ldi	r19, 0xFF	; 255
    1b24:	4f e7       	ldi	r20, 0x7F	; 127
    1b26:	57 e4       	ldi	r21, 0x47	; 71
    1b28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b2c:	18 16       	cp	r1, r24
    1b2e:	4c f5       	brge	.+82     	; 0x1b82 <checkSavedPassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e2       	ldi	r20, 0x20	; 32
    1b3e:	51 e4       	ldi	r21, 0x41	; 65
    1b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	bc 01       	movw	r22, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	9e 83       	std	Y+6, r25	; 0x06
    1b56:	8d 83       	std	Y+5, r24	; 0x05
    1b58:	0f c0       	rjmp	.+30     	; 0x1b78 <checkSavedPassword+0xf4>
    1b5a:	88 ec       	ldi	r24, 0xC8	; 200
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9c 83       	std	Y+4, r25	; 0x04
    1b60:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	9c 81       	ldd	r25, Y+4	; 0x04
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <checkSavedPassword+0xe2>
    1b6a:	9c 83       	std	Y+4, r25	; 0x04
    1b6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	9e 83       	std	Y+6, r25	; 0x06
    1b76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b78:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7c:	00 97       	sbiw	r24, 0x00	; 0
    1b7e:	69 f7       	brne	.-38     	; 0x1b5a <checkSavedPassword+0xd6>
    1b80:	14 c0       	rjmp	.+40     	; 0x1baa <checkSavedPassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b82:	6f 81       	ldd	r22, Y+7	; 0x07
    1b84:	78 85       	ldd	r23, Y+8	; 0x08
    1b86:	89 85       	ldd	r24, Y+9	; 0x09
    1b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	9e 83       	std	Y+6, r25	; 0x06
    1b94:	8d 83       	std	Y+5, r24	; 0x05
    1b96:	8d 81       	ldd	r24, Y+5	; 0x05
    1b98:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9a:	9a 83       	std	Y+2, r25	; 0x02
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <checkSavedPassword+0x11e>
    1ba6:	9a 83       	std	Y+2, r25	; 0x02
    1ba8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		address++;
    1baa:	8c 89       	ldd	r24, Y+20	; 0x14
    1bac:	9d 89       	ldd	r25, Y+21	; 0x15
    1bae:	01 96       	adiw	r24, 0x01	; 1
    1bb0:	9d 8b       	std	Y+21, r25	; 0x15
    1bb2:	8c 8b       	std	Y+20, r24	; 0x14
uint8 checkSavedPassword(uint8 *passwordCheck)
{
	uint16 address = EEROM_START_ADDRESS;
	uint8 match = 1;
	uint8 savedPassword[5];
	for(int i = 0; i < 5; i++)
    1bb4:	89 89       	ldd	r24, Y+17	; 0x11
    1bb6:	9a 89       	ldd	r25, Y+18	; 0x12
    1bb8:	01 96       	adiw	r24, 0x01	; 1
    1bba:	9a 8b       	std	Y+18, r25	; 0x12
    1bbc:	89 8b       	std	Y+17, r24	; 0x11
    1bbe:	89 89       	ldd	r24, Y+17	; 0x11
    1bc0:	9a 89       	ldd	r25, Y+18	; 0x12
    1bc2:	85 30       	cpi	r24, 0x05	; 5
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	0c f4       	brge	.+2      	; 0x1bca <checkSavedPassword+0x146>
    1bc8:	72 cf       	rjmp	.-284    	; 0x1aae <checkSavedPassword+0x2a>
	{
		EEPROM_readByte(address, &savedPassword[i]);
		_delay_ms(10);
		address++;
	}
	for(int i=0 ;i<5;i++)
    1bca:	18 8a       	std	Y+16, r1	; 0x10
    1bcc:	1f 86       	std	Y+15, r1	; 0x0f
    1bce:	19 c0       	rjmp	.+50     	; 0x1c02 <checkSavedPassword+0x17e>
	{
		if(passwordCheck[i] != savedPassword[i])
    1bd0:	2f 85       	ldd	r18, Y+15	; 0x0f
    1bd2:	38 89       	ldd	r19, Y+16	; 0x10
    1bd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd8:	fc 01       	movw	r30, r24
    1bda:	e2 0f       	add	r30, r18
    1bdc:	f3 1f       	adc	r31, r19
    1bde:	40 81       	ld	r20, Z
    1be0:	2f 85       	ldd	r18, Y+15	; 0x0f
    1be2:	38 89       	ldd	r19, Y+16	; 0x10
    1be4:	ce 01       	movw	r24, r28
    1be6:	46 96       	adiw	r24, 0x16	; 22
    1be8:	fc 01       	movw	r30, r24
    1bea:	e2 0f       	add	r30, r18
    1bec:	f3 1f       	adc	r31, r19
    1bee:	80 81       	ld	r24, Z
    1bf0:	48 17       	cp	r20, r24
    1bf2:	11 f0       	breq	.+4      	; 0x1bf8 <checkSavedPassword+0x174>
		{
			match = 0;
    1bf4:	1b 8a       	std	Y+19, r1	; 0x13
    1bf6:	0a c0       	rjmp	.+20     	; 0x1c0c <checkSavedPassword+0x188>
	{
		EEPROM_readByte(address, &savedPassword[i]);
		_delay_ms(10);
		address++;
	}
	for(int i=0 ;i<5;i++)
    1bf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bfa:	98 89       	ldd	r25, Y+16	; 0x10
    1bfc:	01 96       	adiw	r24, 0x01	; 1
    1bfe:	98 8b       	std	Y+16, r25	; 0x10
    1c00:	8f 87       	std	Y+15, r24	; 0x0f
    1c02:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c04:	98 89       	ldd	r25, Y+16	; 0x10
    1c06:	85 30       	cpi	r24, 0x05	; 5
    1c08:	91 05       	cpc	r25, r1
    1c0a:	14 f3       	brlt	.-60     	; 0x1bd0 <checkSavedPassword+0x14c>
			match = 0;
			break;
		}
	}

	return match;
    1c0c:	8b 89       	ldd	r24, Y+19	; 0x13
}
    1c0e:	6c 96       	adiw	r28, 0x1c	; 28
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <errorHandler>:

void errorHandler()
{
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	a2 97       	sbiw	r28, 0x22	; 34
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
	uint8 match = 0;
    1c34:	1d 8e       	std	Y+29, r1	; 0x1d
    1c36:	83 c0       	rjmp	.+262    	; 0x1d3e <errorHandler+0x11e>
	uint8 passwordCheck[5];
	while(!match){
		errorcounter++;
    1c38:	80 91 6a 00 	lds	r24, 0x006A
    1c3c:	8f 5f       	subi	r24, 0xFF	; 255
    1c3e:	80 93 6a 00 	sts	0x006A, r24
		recievePassword(passwordCheck);
    1c42:	ce 01       	movw	r24, r28
    1c44:	4e 96       	adiw	r24, 0x1e	; 30
    1c46:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <recievePassword>
		match = checkSavedPassword(passwordCheck);
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	4e 96       	adiw	r24, 0x1e	; 30
    1c4e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <checkSavedPassword>
    1c52:	8d 8f       	std	Y+29, r24	; 0x1d
		UART_sendByte(match);
    1c54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c56:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <UART_sendByte>
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	a8 e4       	ldi	r26, 0x48	; 72
    1c60:	b2 e4       	ldi	r27, 0x42	; 66
    1c62:	89 8f       	std	Y+25, r24	; 0x19
    1c64:	9a 8f       	std	Y+26, r25	; 0x1a
    1c66:	ab 8f       	std	Y+27, r26	; 0x1b
    1c68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	4a ef       	ldi	r20, 0xFA	; 250
    1c78:	54 e4       	ldi	r21, 0x44	; 68
    1c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	8d 8b       	std	Y+21, r24	; 0x15
    1c84:	9e 8b       	std	Y+22, r25	; 0x16
    1c86:	af 8b       	std	Y+23, r26	; 0x17
    1c88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c90:	98 8d       	ldd	r25, Y+24	; 0x18
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	40 e8       	ldi	r20, 0x80	; 128
    1c98:	5f e3       	ldi	r21, 0x3F	; 63
    1c9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c9e:	88 23       	and	r24, r24
    1ca0:	2c f4       	brge	.+10     	; 0x1cac <errorHandler+0x8c>
		__ticks = 1;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	9c 8b       	std	Y+20, r25	; 0x14
    1ca8:	8b 8b       	std	Y+19, r24	; 0x13
    1caa:	3f c0       	rjmp	.+126    	; 0x1d2a <errorHandler+0x10a>
	else if (__tmp > 65535)
    1cac:	6d 89       	ldd	r22, Y+21	; 0x15
    1cae:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	3f ef       	ldi	r19, 0xFF	; 255
    1cb8:	4f e7       	ldi	r20, 0x7F	; 127
    1cba:	57 e4       	ldi	r21, 0x47	; 71
    1cbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cc0:	18 16       	cp	r1, r24
    1cc2:	4c f5       	brge	.+82     	; 0x1d16 <errorHandler+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc4:	69 8d       	ldd	r22, Y+25	; 0x19
    1cc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e2       	ldi	r20, 0x20	; 32
    1cd2:	51 e4       	ldi	r21, 0x41	; 65
    1cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	bc 01       	movw	r22, r24
    1cde:	cd 01       	movw	r24, r26
    1ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	9c 8b       	std	Y+20, r25	; 0x14
    1cea:	8b 8b       	std	Y+19, r24	; 0x13
    1cec:	0f c0       	rjmp	.+30     	; 0x1d0c <errorHandler+0xec>
    1cee:	88 ec       	ldi	r24, 0xC8	; 200
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	9a 8b       	std	Y+18, r25	; 0x12
    1cf4:	89 8b       	std	Y+17, r24	; 0x11
    1cf6:	89 89       	ldd	r24, Y+17	; 0x11
    1cf8:	9a 89       	ldd	r25, Y+18	; 0x12
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <errorHandler+0xda>
    1cfe:	9a 8b       	std	Y+18, r25	; 0x12
    1d00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d02:	8b 89       	ldd	r24, Y+19	; 0x13
    1d04:	9c 89       	ldd	r25, Y+20	; 0x14
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	9c 8b       	std	Y+20, r25	; 0x14
    1d0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	69 f7       	brne	.-38     	; 0x1cee <errorHandler+0xce>
    1d14:	14 c0       	rjmp	.+40     	; 0x1d3e <errorHandler+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d16:	6d 89       	ldd	r22, Y+21	; 0x15
    1d18:	7e 89       	ldd	r23, Y+22	; 0x16
    1d1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	9c 8b       	std	Y+20, r25	; 0x14
    1d28:	8b 8b       	std	Y+19, r24	; 0x13
    1d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2e:	98 8b       	std	Y+16, r25	; 0x10
    1d30:	8f 87       	std	Y+15, r24	; 0x0f
    1d32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d34:	98 89       	ldd	r25, Y+16	; 0x10
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <errorHandler+0x116>
    1d3a:	98 8b       	std	Y+16, r25	; 0x10
    1d3c:	8f 87       	std	Y+15, r24	; 0x0f

void errorHandler()
{
	uint8 match = 0;
	uint8 passwordCheck[5];
	while(!match){
    1d3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d40:	88 23       	and	r24, r24
    1d42:	09 f4       	brne	.+2      	; 0x1d46 <errorHandler+0x126>
    1d44:	79 cf       	rjmp	.-270    	; 0x1c38 <errorHandler+0x18>
		recievePassword(passwordCheck);
		match = checkSavedPassword(passwordCheck);
		UART_sendByte(match);
		_delay_ms(50);
	}
	if(errorcounter>=2)
    1d46:	80 91 6a 00 	lds	r24, 0x006A
    1d4a:	82 30       	cpi	r24, 0x02	; 2
    1d4c:	08 f4       	brcc	.+2      	; 0x1d50 <errorHandler+0x130>
    1d4e:	78 c0       	rjmp	.+240    	; 0x1e40 <errorHandler+0x220>
	{
		errorcounter = 0;
    1d50:	10 92 6a 00 	sts	0x006A, r1
		Buzzer_on();
    1d54:	0e 94 b5 0c 	call	0x196a	; 0x196a <Buzzer_on>
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	90 e6       	ldi	r25, 0x60	; 96
    1d5c:	aa e6       	ldi	r26, 0x6A	; 106
    1d5e:	b7 e4       	ldi	r27, 0x47	; 71
    1d60:	8b 87       	std	Y+11, r24	; 0x0b
    1d62:	9c 87       	std	Y+12, r25	; 0x0c
    1d64:	ad 87       	std	Y+13, r26	; 0x0d
    1d66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	4a ef       	ldi	r20, 0xFA	; 250
    1d76:	54 e4       	ldi	r21, 0x44	; 68
    1d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	8f 83       	std	Y+7, r24	; 0x07
    1d82:	98 87       	std	Y+8, r25	; 0x08
    1d84:	a9 87       	std	Y+9, r26	; 0x09
    1d86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d88:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8a:	78 85       	ldd	r23, Y+8	; 0x08
    1d8c:	89 85       	ldd	r24, Y+9	; 0x09
    1d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	40 e8       	ldi	r20, 0x80	; 128
    1d96:	5f e3       	ldi	r21, 0x3F	; 63
    1d98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d9c:	88 23       	and	r24, r24
    1d9e:	2c f4       	brge	.+10     	; 0x1daa <errorHandler+0x18a>
		__ticks = 1;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	9e 83       	std	Y+6, r25	; 0x06
    1da6:	8d 83       	std	Y+5, r24	; 0x05
    1da8:	3f c0       	rjmp	.+126    	; 0x1e28 <errorHandler+0x208>
	else if (__tmp > 65535)
    1daa:	6f 81       	ldd	r22, Y+7	; 0x07
    1dac:	78 85       	ldd	r23, Y+8	; 0x08
    1dae:	89 85       	ldd	r24, Y+9	; 0x09
    1db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	3f ef       	ldi	r19, 0xFF	; 255
    1db6:	4f e7       	ldi	r20, 0x7F	; 127
    1db8:	57 e4       	ldi	r21, 0x47	; 71
    1dba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dbe:	18 16       	cp	r1, r24
    1dc0:	4c f5       	brge	.+82     	; 0x1e14 <errorHandler+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e2       	ldi	r20, 0x20	; 32
    1dd0:	51 e4       	ldi	r21, 0x41	; 65
    1dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	bc 01       	movw	r22, r24
    1ddc:	cd 01       	movw	r24, r26
    1dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	9e 83       	std	Y+6, r25	; 0x06
    1de8:	8d 83       	std	Y+5, r24	; 0x05
    1dea:	0f c0       	rjmp	.+30     	; 0x1e0a <errorHandler+0x1ea>
    1dec:	88 ec       	ldi	r24, 0xC8	; 200
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	9c 83       	std	Y+4, r25	; 0x04
    1df2:	8b 83       	std	Y+3, r24	; 0x03
    1df4:	8b 81       	ldd	r24, Y+3	; 0x03
    1df6:	9c 81       	ldd	r25, Y+4	; 0x04
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	f1 f7       	brne	.-4      	; 0x1df8 <errorHandler+0x1d8>
    1dfc:	9c 83       	std	Y+4, r25	; 0x04
    1dfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e00:	8d 81       	ldd	r24, Y+5	; 0x05
    1e02:	9e 81       	ldd	r25, Y+6	; 0x06
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	9e 83       	std	Y+6, r25	; 0x06
    1e08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	69 f7       	brne	.-38     	; 0x1dec <errorHandler+0x1cc>
    1e12:	14 c0       	rjmp	.+40     	; 0x1e3c <errorHandler+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e14:	6f 81       	ldd	r22, Y+7	; 0x07
    1e16:	78 85       	ldd	r23, Y+8	; 0x08
    1e18:	89 85       	ldd	r24, Y+9	; 0x09
    1e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	9e 83       	std	Y+6, r25	; 0x06
    1e26:	8d 83       	std	Y+5, r24	; 0x05
    1e28:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2c:	9a 83       	std	Y+2, r25	; 0x02
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	9a 81       	ldd	r25, Y+2	; 0x02
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	f1 f7       	brne	.-4      	; 0x1e34 <errorHandler+0x214>
    1e38:	9a 83       	std	Y+2, r25	; 0x02
    1e3a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(60000);
		Buzzer_off();
    1e3c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <Buzzer_off>
	}
	recieveCommand();
    1e40:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <recieveCommand>
}
    1e44:	a2 96       	adiw	r28, 0x22	; 34
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	08 95       	ret

00001e56 <recieveCommand>:
void recieveCommand()
{
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	c9 54       	subi	r28, 0x49	; 73
    1e60:	d0 40       	sbci	r29, 0x00	; 0
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	f8 94       	cli
    1e66:	de bf       	out	0x3e, r29	; 62
    1e68:	0f be       	out	0x3f, r0	; 63
    1e6a:	cd bf       	out	0x3d, r28	; 61
	uint8 passwordCheck[5];
	uint8 match;
	uint8 key = 0;
    1e6c:	19 ae       	std	Y+57, r1	; 0x39
	key = UART_recieveByte();
    1e6e:	0e 94 92 06 	call	0xd24	; 0xd24 <UART_recieveByte>
    1e72:	89 af       	std	Y+57, r24	; 0x39
	recievePassword(passwordCheck);
    1e74:	ce 01       	movw	r24, r28
    1e76:	cb 96       	adiw	r24, 0x3b	; 59
    1e78:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <recievePassword>
	match = checkSavedPassword(passwordCheck);
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	cb 96       	adiw	r24, 0x3b	; 59
    1e80:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <checkSavedPassword>
    1e84:	8a af       	std	Y+58, r24	; 0x3a
	if(key == 11 ) /*+ open the door*/
    1e86:	89 ad       	ldd	r24, Y+57	; 0x39
    1e88:	8b 30       	cpi	r24, 0x0B	; 11
    1e8a:	09 f0       	breq	.+2      	; 0x1e8e <recieveCommand+0x38>
    1e8c:	f9 c0       	rjmp	.+498    	; 0x2080 <recieveCommand+0x22a>
			{
		if(match)
    1e8e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e90:	88 23       	and	r24, r24
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <recieveCommand+0x40>
    1e94:	7d c0       	rjmp	.+250    	; 0x1f90 <recieveCommand+0x13a>
		{
			UART_sendByte(match);
    1e96:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e98:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <UART_sendByte>
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	a8 e4       	ldi	r26, 0x48	; 72
    1ea2:	b2 e4       	ldi	r27, 0x42	; 66
    1ea4:	8d ab       	std	Y+53, r24	; 0x35
    1ea6:	9e ab       	std	Y+54, r25	; 0x36
    1ea8:	af ab       	std	Y+55, r26	; 0x37
    1eaa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eac:	6d a9       	ldd	r22, Y+53	; 0x35
    1eae:	7e a9       	ldd	r23, Y+54	; 0x36
    1eb0:	8f a9       	ldd	r24, Y+55	; 0x37
    1eb2:	98 ad       	ldd	r25, Y+56	; 0x38
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	4a ef       	ldi	r20, 0xFA	; 250
    1eba:	54 e4       	ldi	r21, 0x44	; 68
    1ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	89 ab       	std	Y+49, r24	; 0x31
    1ec6:	9a ab       	std	Y+50, r25	; 0x32
    1ec8:	ab ab       	std	Y+51, r26	; 0x33
    1eca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ecc:	69 a9       	ldd	r22, Y+49	; 0x31
    1ece:	7a a9       	ldd	r23, Y+50	; 0x32
    1ed0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ed2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e8       	ldi	r20, 0x80	; 128
    1eda:	5f e3       	ldi	r21, 0x3F	; 63
    1edc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ee0:	88 23       	and	r24, r24
    1ee2:	2c f4       	brge	.+10     	; 0x1eee <recieveCommand+0x98>
		__ticks = 1;
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	98 ab       	std	Y+48, r25	; 0x30
    1eea:	8f a7       	std	Y+47, r24	; 0x2f
    1eec:	3f c0       	rjmp	.+126    	; 0x1f6c <recieveCommand+0x116>
	else if (__tmp > 65535)
    1eee:	69 a9       	ldd	r22, Y+49	; 0x31
    1ef0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ef2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ef4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	3f ef       	ldi	r19, 0xFF	; 255
    1efa:	4f e7       	ldi	r20, 0x7F	; 127
    1efc:	57 e4       	ldi	r21, 0x47	; 71
    1efe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f02:	18 16       	cp	r1, r24
    1f04:	4c f5       	brge	.+82     	; 0x1f58 <recieveCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f06:	6d a9       	ldd	r22, Y+53	; 0x35
    1f08:	7e a9       	ldd	r23, Y+54	; 0x36
    1f0a:	8f a9       	ldd	r24, Y+55	; 0x37
    1f0c:	98 ad       	ldd	r25, Y+56	; 0x38
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	40 e2       	ldi	r20, 0x20	; 32
    1f14:	51 e4       	ldi	r21, 0x41	; 65
    1f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	bc 01       	movw	r22, r24
    1f20:	cd 01       	movw	r24, r26
    1f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	98 ab       	std	Y+48, r25	; 0x30
    1f2c:	8f a7       	std	Y+47, r24	; 0x2f
    1f2e:	0f c0       	rjmp	.+30     	; 0x1f4e <recieveCommand+0xf8>
    1f30:	88 ec       	ldi	r24, 0xC8	; 200
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	9e a7       	std	Y+46, r25	; 0x2e
    1f36:	8d a7       	std	Y+45, r24	; 0x2d
    1f38:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f3a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <recieveCommand+0xe6>
    1f40:	9e a7       	std	Y+46, r25	; 0x2e
    1f42:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f44:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f46:	98 a9       	ldd	r25, Y+48	; 0x30
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	98 ab       	std	Y+48, r25	; 0x30
    1f4c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f50:	98 a9       	ldd	r25, Y+48	; 0x30
    1f52:	00 97       	sbiw	r24, 0x00	; 0
    1f54:	69 f7       	brne	.-38     	; 0x1f30 <recieveCommand+0xda>
    1f56:	14 c0       	rjmp	.+40     	; 0x1f80 <recieveCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f58:	69 a9       	ldd	r22, Y+49	; 0x31
    1f5a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f5c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f5e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	98 ab       	std	Y+48, r25	; 0x30
    1f6a:	8f a7       	std	Y+47, r24	; 0x2f
    1f6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f70:	9c a7       	std	Y+44, r25	; 0x2c
    1f72:	8b a7       	std	Y+43, r24	; 0x2b
    1f74:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f76:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <recieveCommand+0x122>
    1f7c:	9c a7       	std	Y+44, r25	; 0x2c
    1f7e:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(50);
			DcMotor_Rotate(ACW);
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	0e 94 83 0c 	call	0x1906	; 0x1906 <DcMotor_Rotate>
			startTimer();
    1f86:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <startTimer>
			recieveCommand();
    1f8a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <recieveCommand>
    1f8e:	72 c1       	rjmp	.+740    	; 0x2274 <recieveCommand+0x41e>
		}
		else
		{
			/*Error*/
			UART_sendByte(match);
    1f90:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f92:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <UART_sendByte>
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	a8 e4       	ldi	r26, 0x48	; 72
    1f9c:	b2 e4       	ldi	r27, 0x42	; 66
    1f9e:	8f a3       	std	Y+39, r24	; 0x27
    1fa0:	98 a7       	std	Y+40, r25	; 0x28
    1fa2:	a9 a7       	std	Y+41, r26	; 0x29
    1fa4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa6:	6f a1       	ldd	r22, Y+39	; 0x27
    1fa8:	78 a5       	ldd	r23, Y+40	; 0x28
    1faa:	89 a5       	ldd	r24, Y+41	; 0x29
    1fac:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	4a ef       	ldi	r20, 0xFA	; 250
    1fb4:	54 e4       	ldi	r21, 0x44	; 68
    1fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	8b a3       	std	Y+35, r24	; 0x23
    1fc0:	9c a3       	std	Y+36, r25	; 0x24
    1fc2:	ad a3       	std	Y+37, r26	; 0x25
    1fc4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fc6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fc8:	7c a1       	ldd	r23, Y+36	; 0x24
    1fca:	8d a1       	ldd	r24, Y+37	; 0x25
    1fcc:	9e a1       	ldd	r25, Y+38	; 0x26
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e8       	ldi	r20, 0x80	; 128
    1fd4:	5f e3       	ldi	r21, 0x3F	; 63
    1fd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fda:	88 23       	and	r24, r24
    1fdc:	2c f4       	brge	.+10     	; 0x1fe8 <recieveCommand+0x192>
		__ticks = 1;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	9a a3       	std	Y+34, r25	; 0x22
    1fe4:	89 a3       	std	Y+33, r24	; 0x21
    1fe6:	3f c0       	rjmp	.+126    	; 0x2066 <recieveCommand+0x210>
	else if (__tmp > 65535)
    1fe8:	6b a1       	ldd	r22, Y+35	; 0x23
    1fea:	7c a1       	ldd	r23, Y+36	; 0x24
    1fec:	8d a1       	ldd	r24, Y+37	; 0x25
    1fee:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	3f ef       	ldi	r19, 0xFF	; 255
    1ff4:	4f e7       	ldi	r20, 0x7F	; 127
    1ff6:	57 e4       	ldi	r21, 0x47	; 71
    1ff8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffc:	18 16       	cp	r1, r24
    1ffe:	4c f5       	brge	.+82     	; 0x2052 <recieveCommand+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2000:	6f a1       	ldd	r22, Y+39	; 0x27
    2002:	78 a5       	ldd	r23, Y+40	; 0x28
    2004:	89 a5       	ldd	r24, Y+41	; 0x29
    2006:	9a a5       	ldd	r25, Y+42	; 0x2a
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e2       	ldi	r20, 0x20	; 32
    200e:	51 e4       	ldi	r21, 0x41	; 65
    2010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	9a a3       	std	Y+34, r25	; 0x22
    2026:	89 a3       	std	Y+33, r24	; 0x21
    2028:	0f c0       	rjmp	.+30     	; 0x2048 <recieveCommand+0x1f2>
    202a:	88 ec       	ldi	r24, 0xC8	; 200
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	98 a3       	std	Y+32, r25	; 0x20
    2030:	8f 8f       	std	Y+31, r24	; 0x1f
    2032:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2034:	98 a1       	ldd	r25, Y+32	; 0x20
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	f1 f7       	brne	.-4      	; 0x2036 <recieveCommand+0x1e0>
    203a:	98 a3       	std	Y+32, r25	; 0x20
    203c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203e:	89 a1       	ldd	r24, Y+33	; 0x21
    2040:	9a a1       	ldd	r25, Y+34	; 0x22
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	9a a3       	std	Y+34, r25	; 0x22
    2046:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2048:	89 a1       	ldd	r24, Y+33	; 0x21
    204a:	9a a1       	ldd	r25, Y+34	; 0x22
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	69 f7       	brne	.-38     	; 0x202a <recieveCommand+0x1d4>
    2050:	14 c0       	rjmp	.+40     	; 0x207a <recieveCommand+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2052:	6b a1       	ldd	r22, Y+35	; 0x23
    2054:	7c a1       	ldd	r23, Y+36	; 0x24
    2056:	8d a1       	ldd	r24, Y+37	; 0x25
    2058:	9e a1       	ldd	r25, Y+38	; 0x26
    205a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	9a a3       	std	Y+34, r25	; 0x22
    2064:	89 a3       	std	Y+33, r24	; 0x21
    2066:	89 a1       	ldd	r24, Y+33	; 0x21
    2068:	9a a1       	ldd	r25, Y+34	; 0x22
    206a:	9e 8f       	std	Y+30, r25	; 0x1e
    206c:	8d 8f       	std	Y+29, r24	; 0x1d
    206e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2070:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <recieveCommand+0x21c>
    2076:	9e 8f       	std	Y+30, r25	; 0x1e
    2078:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(50);
			errorHandler();
    207a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <errorHandler>
    207e:	fa c0       	rjmp	.+500    	; 0x2274 <recieveCommand+0x41e>

		}
			}
	else /*- change password*/
	{
		if(match)
    2080:	8a ad       	ldd	r24, Y+58	; 0x3a
    2082:	88 23       	and	r24, r24
    2084:	09 f4       	brne	.+2      	; 0x2088 <recieveCommand+0x232>
    2086:	7f c0       	rjmp	.+254    	; 0x2186 <recieveCommand+0x330>
		{
			UART_sendByte(match);
    2088:	8a ad       	ldd	r24, Y+58	; 0x3a
    208a:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <UART_sendByte>
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	a8 e4       	ldi	r26, 0x48	; 72
    2094:	b2 e4       	ldi	r27, 0x42	; 66
    2096:	89 8f       	std	Y+25, r24	; 0x19
    2098:	9a 8f       	std	Y+26, r25	; 0x1a
    209a:	ab 8f       	std	Y+27, r26	; 0x1b
    209c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209e:	69 8d       	ldd	r22, Y+25	; 0x19
    20a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	4a ef       	ldi	r20, 0xFA	; 250
    20ac:	54 e4       	ldi	r21, 0x44	; 68
    20ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	8d 8b       	std	Y+21, r24	; 0x15
    20b8:	9e 8b       	std	Y+22, r25	; 0x16
    20ba:	af 8b       	std	Y+23, r26	; 0x17
    20bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20be:	6d 89       	ldd	r22, Y+21	; 0x15
    20c0:	7e 89       	ldd	r23, Y+22	; 0x16
    20c2:	8f 89       	ldd	r24, Y+23	; 0x17
    20c4:	98 8d       	ldd	r25, Y+24	; 0x18
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	40 e8       	ldi	r20, 0x80	; 128
    20cc:	5f e3       	ldi	r21, 0x3F	; 63
    20ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d2:	88 23       	and	r24, r24
    20d4:	2c f4       	brge	.+10     	; 0x20e0 <recieveCommand+0x28a>
		__ticks = 1;
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	9c 8b       	std	Y+20, r25	; 0x14
    20dc:	8b 8b       	std	Y+19, r24	; 0x13
    20de:	3f c0       	rjmp	.+126    	; 0x215e <recieveCommand+0x308>
	else if (__tmp > 65535)
    20e0:	6d 89       	ldd	r22, Y+21	; 0x15
    20e2:	7e 89       	ldd	r23, Y+22	; 0x16
    20e4:	8f 89       	ldd	r24, Y+23	; 0x17
    20e6:	98 8d       	ldd	r25, Y+24	; 0x18
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	3f ef       	ldi	r19, 0xFF	; 255
    20ec:	4f e7       	ldi	r20, 0x7F	; 127
    20ee:	57 e4       	ldi	r21, 0x47	; 71
    20f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20f4:	18 16       	cp	r1, r24
    20f6:	4c f5       	brge	.+82     	; 0x214a <recieveCommand+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f8:	69 8d       	ldd	r22, Y+25	; 0x19
    20fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e2       	ldi	r20, 0x20	; 32
    2106:	51 e4       	ldi	r21, 0x41	; 65
    2108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	bc 01       	movw	r22, r24
    2112:	cd 01       	movw	r24, r26
    2114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	9c 8b       	std	Y+20, r25	; 0x14
    211e:	8b 8b       	std	Y+19, r24	; 0x13
    2120:	0f c0       	rjmp	.+30     	; 0x2140 <recieveCommand+0x2ea>
    2122:	88 ec       	ldi	r24, 0xC8	; 200
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	9a 8b       	std	Y+18, r25	; 0x12
    2128:	89 8b       	std	Y+17, r24	; 0x11
    212a:	89 89       	ldd	r24, Y+17	; 0x11
    212c:	9a 89       	ldd	r25, Y+18	; 0x12
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <recieveCommand+0x2d8>
    2132:	9a 8b       	std	Y+18, r25	; 0x12
    2134:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2136:	8b 89       	ldd	r24, Y+19	; 0x13
    2138:	9c 89       	ldd	r25, Y+20	; 0x14
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	9c 8b       	std	Y+20, r25	; 0x14
    213e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2140:	8b 89       	ldd	r24, Y+19	; 0x13
    2142:	9c 89       	ldd	r25, Y+20	; 0x14
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	69 f7       	brne	.-38     	; 0x2122 <recieveCommand+0x2cc>
    2148:	14 c0       	rjmp	.+40     	; 0x2172 <recieveCommand+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214a:	6d 89       	ldd	r22, Y+21	; 0x15
    214c:	7e 89       	ldd	r23, Y+22	; 0x16
    214e:	8f 89       	ldd	r24, Y+23	; 0x17
    2150:	98 8d       	ldd	r25, Y+24	; 0x18
    2152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	9c 8b       	std	Y+20, r25	; 0x14
    215c:	8b 8b       	std	Y+19, r24	; 0x13
    215e:	8b 89       	ldd	r24, Y+19	; 0x13
    2160:	9c 89       	ldd	r25, Y+20	; 0x14
    2162:	98 8b       	std	Y+16, r25	; 0x10
    2164:	8f 87       	std	Y+15, r24	; 0x0f
    2166:	8f 85       	ldd	r24, Y+15	; 0x0f
    2168:	98 89       	ldd	r25, Y+16	; 0x10
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <recieveCommand+0x314>
    216e:	98 8b       	std	Y+16, r25	; 0x10
    2170:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(50);
			uint8 password_1[5];
			uint8 password_2[5];
			passwordCreation(password_1, password_2);
    2172:	ce 01       	movw	r24, r28
    2174:	80 5c       	subi	r24, 0xC0	; 192
    2176:	9f 4f       	sbci	r25, 0xFF	; 255
    2178:	9e 01       	movw	r18, r28
    217a:	2b 5b       	subi	r18, 0xBB	; 187
    217c:	3f 4f       	sbci	r19, 0xFF	; 255
    217e:	b9 01       	movw	r22, r18
    2180:	0e 94 44 11 	call	0x2288	; 0x2288 <passwordCreation>
    2184:	77 c0       	rjmp	.+238    	; 0x2274 <recieveCommand+0x41e>

		}
		else
		{
			UART_sendByte(match);
    2186:	8a ad       	ldd	r24, Y+58	; 0x3a
    2188:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <UART_sendByte>
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	a8 e4       	ldi	r26, 0x48	; 72
    2192:	b2 e4       	ldi	r27, 0x42	; 66
    2194:	8b 87       	std	Y+11, r24	; 0x0b
    2196:	9c 87       	std	Y+12, r25	; 0x0c
    2198:	ad 87       	std	Y+13, r26	; 0x0d
    219a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219c:	6b 85       	ldd	r22, Y+11	; 0x0b
    219e:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	4a ef       	ldi	r20, 0xFA	; 250
    21aa:	54 e4       	ldi	r21, 0x44	; 68
    21ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	8f 83       	std	Y+7, r24	; 0x07
    21b6:	98 87       	std	Y+8, r25	; 0x08
    21b8:	a9 87       	std	Y+9, r26	; 0x09
    21ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21bc:	6f 81       	ldd	r22, Y+7	; 0x07
    21be:	78 85       	ldd	r23, Y+8	; 0x08
    21c0:	89 85       	ldd	r24, Y+9	; 0x09
    21c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e8       	ldi	r20, 0x80	; 128
    21ca:	5f e3       	ldi	r21, 0x3F	; 63
    21cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d0:	88 23       	and	r24, r24
    21d2:	2c f4       	brge	.+10     	; 0x21de <recieveCommand+0x388>
		__ticks = 1;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	9e 83       	std	Y+6, r25	; 0x06
    21da:	8d 83       	std	Y+5, r24	; 0x05
    21dc:	3f c0       	rjmp	.+126    	; 0x225c <recieveCommand+0x406>
	else if (__tmp > 65535)
    21de:	6f 81       	ldd	r22, Y+7	; 0x07
    21e0:	78 85       	ldd	r23, Y+8	; 0x08
    21e2:	89 85       	ldd	r24, Y+9	; 0x09
    21e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	3f ef       	ldi	r19, 0xFF	; 255
    21ea:	4f e7       	ldi	r20, 0x7F	; 127
    21ec:	57 e4       	ldi	r21, 0x47	; 71
    21ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f2:	18 16       	cp	r1, r24
    21f4:	4c f5       	brge	.+82     	; 0x2248 <recieveCommand+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e2       	ldi	r20, 0x20	; 32
    2204:	51 e4       	ldi	r21, 0x41	; 65
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	9e 83       	std	Y+6, r25	; 0x06
    221c:	8d 83       	std	Y+5, r24	; 0x05
    221e:	0f c0       	rjmp	.+30     	; 0x223e <recieveCommand+0x3e8>
    2220:	88 ec       	ldi	r24, 0xC8	; 200
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9c 83       	std	Y+4, r25	; 0x04
    2226:	8b 83       	std	Y+3, r24	; 0x03
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	9c 81       	ldd	r25, Y+4	; 0x04
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <recieveCommand+0x3d6>
    2230:	9c 83       	std	Y+4, r25	; 0x04
    2232:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2234:	8d 81       	ldd	r24, Y+5	; 0x05
    2236:	9e 81       	ldd	r25, Y+6	; 0x06
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	9e 83       	std	Y+6, r25	; 0x06
    223c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223e:	8d 81       	ldd	r24, Y+5	; 0x05
    2240:	9e 81       	ldd	r25, Y+6	; 0x06
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	69 f7       	brne	.-38     	; 0x2220 <recieveCommand+0x3ca>
    2246:	14 c0       	rjmp	.+40     	; 0x2270 <recieveCommand+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2248:	6f 81       	ldd	r22, Y+7	; 0x07
    224a:	78 85       	ldd	r23, Y+8	; 0x08
    224c:	89 85       	ldd	r24, Y+9	; 0x09
    224e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	9e 83       	std	Y+6, r25	; 0x06
    225a:	8d 83       	std	Y+5, r24	; 0x05
    225c:	8d 81       	ldd	r24, Y+5	; 0x05
    225e:	9e 81       	ldd	r25, Y+6	; 0x06
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	9a 81       	ldd	r25, Y+2	; 0x02
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <recieveCommand+0x412>
    226c:	9a 83       	std	Y+2, r25	; 0x02
    226e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
			errorHandler();
    2270:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <errorHandler>
		}
	}
}
    2274:	c7 5b       	subi	r28, 0xB7	; 183
    2276:	df 4f       	sbci	r29, 0xFF	; 255
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	f8 94       	cli
    227c:	de bf       	out	0x3e, r29	; 62
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	cd bf       	out	0x3d, r28	; 61
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <passwordCreation>:

void passwordCreation(uint8 *password_1, uint8 *password_2)
{
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	e5 97       	sbiw	r28, 0x35	; 53
    2292:	0f b6       	in	r0, 0x3f	; 63
    2294:	f8 94       	cli
    2296:	de bf       	out	0x3e, r29	; 62
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	cd bf       	out	0x3d, r28	; 61
    229c:	9b ab       	std	Y+51, r25	; 0x33
    229e:	8a ab       	std	Y+50, r24	; 0x32
    22a0:	7d ab       	std	Y+53, r23	; 0x35
    22a2:	6c ab       	std	Y+52, r22	; 0x34
	uint16 address = EEROM_START_ADDRESS;
    22a4:	81 e1       	ldi	r24, 0x11	; 17
    22a6:	93 e0       	ldi	r25, 0x03	; 3
    22a8:	99 ab       	std	Y+49, r25	; 0x31
    22aa:	88 ab       	std	Y+48, r24	; 0x30
	uint8 match = 1;
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	8f a7       	std	Y+47, r24	; 0x2f

	recievePassword(password_1);
    22b0:	8a a9       	ldd	r24, Y+50	; 0x32
    22b2:	9b a9       	ldd	r25, Y+51	; 0x33
    22b4:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <recievePassword>
	recievePassword(password_2);
    22b8:	8c a9       	ldd	r24, Y+52	; 0x34
    22ba:	9d a9       	ldd	r25, Y+53	; 0x35
    22bc:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <recievePassword>

	for(int i=0 ;i<5;i++)
    22c0:	1e a6       	std	Y+46, r1	; 0x2e
    22c2:	1d a6       	std	Y+45, r1	; 0x2d
    22c4:	19 c0       	rjmp	.+50     	; 0x22f8 <passwordCreation+0x70>
	{
		if(password_1[i] != password_2[i])
    22c6:	2d a5       	ldd	r18, Y+45	; 0x2d
    22c8:	3e a5       	ldd	r19, Y+46	; 0x2e
    22ca:	8a a9       	ldd	r24, Y+50	; 0x32
    22cc:	9b a9       	ldd	r25, Y+51	; 0x33
    22ce:	fc 01       	movw	r30, r24
    22d0:	e2 0f       	add	r30, r18
    22d2:	f3 1f       	adc	r31, r19
    22d4:	40 81       	ld	r20, Z
    22d6:	2d a5       	ldd	r18, Y+45	; 0x2d
    22d8:	3e a5       	ldd	r19, Y+46	; 0x2e
    22da:	8c a9       	ldd	r24, Y+52	; 0x34
    22dc:	9d a9       	ldd	r25, Y+53	; 0x35
    22de:	fc 01       	movw	r30, r24
    22e0:	e2 0f       	add	r30, r18
    22e2:	f3 1f       	adc	r31, r19
    22e4:	80 81       	ld	r24, Z
    22e6:	48 17       	cp	r20, r24
    22e8:	11 f0       	breq	.+4      	; 0x22ee <passwordCreation+0x66>
		{
			match = 0;
    22ea:	1f a6       	std	Y+47, r1	; 0x2f
    22ec:	0a c0       	rjmp	.+20     	; 0x2302 <passwordCreation+0x7a>
	uint8 match = 1;

	recievePassword(password_1);
	recievePassword(password_2);

	for(int i=0 ;i<5;i++)
    22ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    22f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    22f2:	01 96       	adiw	r24, 0x01	; 1
    22f4:	9e a7       	std	Y+46, r25	; 0x2e
    22f6:	8d a7       	std	Y+45, r24	; 0x2d
    22f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    22fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    22fc:	85 30       	cpi	r24, 0x05	; 5
    22fe:	91 05       	cpc	r25, r1
    2300:	14 f3       	brlt	.-60     	; 0x22c6 <passwordCreation+0x3e>
		{
			match = 0;
			break;
		}
	}
	if(match)
    2302:	8f a5       	ldd	r24, Y+47	; 0x2f
    2304:	88 23       	and	r24, r24
    2306:	09 f4       	brne	.+2      	; 0x230a <passwordCreation+0x82>
    2308:	0a c1       	rjmp	.+532    	; 0x251e <passwordCreation+0x296>
	{
		UART_sendByte(match);
    230a:	8f a5       	ldd	r24, Y+47	; 0x2f
    230c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <UART_sendByte>
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	a8 e4       	ldi	r26, 0x48	; 72
    2316:	b2 e4       	ldi	r27, 0x42	; 66
    2318:	8f a3       	std	Y+39, r24	; 0x27
    231a:	98 a7       	std	Y+40, r25	; 0x28
    231c:	a9 a7       	std	Y+41, r26	; 0x29
    231e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2320:	6f a1       	ldd	r22, Y+39	; 0x27
    2322:	78 a5       	ldd	r23, Y+40	; 0x28
    2324:	89 a5       	ldd	r24, Y+41	; 0x29
    2326:	9a a5       	ldd	r25, Y+42	; 0x2a
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	4a ef       	ldi	r20, 0xFA	; 250
    232e:	54 e4       	ldi	r21, 0x44	; 68
    2330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	8b a3       	std	Y+35, r24	; 0x23
    233a:	9c a3       	std	Y+36, r25	; 0x24
    233c:	ad a3       	std	Y+37, r26	; 0x25
    233e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2340:	6b a1       	ldd	r22, Y+35	; 0x23
    2342:	7c a1       	ldd	r23, Y+36	; 0x24
    2344:	8d a1       	ldd	r24, Y+37	; 0x25
    2346:	9e a1       	ldd	r25, Y+38	; 0x26
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e8       	ldi	r20, 0x80	; 128
    234e:	5f e3       	ldi	r21, 0x3F	; 63
    2350:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2354:	88 23       	and	r24, r24
    2356:	2c f4       	brge	.+10     	; 0x2362 <passwordCreation+0xda>
		__ticks = 1;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	9a a3       	std	Y+34, r25	; 0x22
    235e:	89 a3       	std	Y+33, r24	; 0x21
    2360:	3f c0       	rjmp	.+126    	; 0x23e0 <passwordCreation+0x158>
	else if (__tmp > 65535)
    2362:	6b a1       	ldd	r22, Y+35	; 0x23
    2364:	7c a1       	ldd	r23, Y+36	; 0x24
    2366:	8d a1       	ldd	r24, Y+37	; 0x25
    2368:	9e a1       	ldd	r25, Y+38	; 0x26
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	3f ef       	ldi	r19, 0xFF	; 255
    236e:	4f e7       	ldi	r20, 0x7F	; 127
    2370:	57 e4       	ldi	r21, 0x47	; 71
    2372:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2376:	18 16       	cp	r1, r24
    2378:	4c f5       	brge	.+82     	; 0x23cc <passwordCreation+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237a:	6f a1       	ldd	r22, Y+39	; 0x27
    237c:	78 a5       	ldd	r23, Y+40	; 0x28
    237e:	89 a5       	ldd	r24, Y+41	; 0x29
    2380:	9a a5       	ldd	r25, Y+42	; 0x2a
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e2       	ldi	r20, 0x20	; 32
    2388:	51 e4       	ldi	r21, 0x41	; 65
    238a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	bc 01       	movw	r22, r24
    2394:	cd 01       	movw	r24, r26
    2396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	9a a3       	std	Y+34, r25	; 0x22
    23a0:	89 a3       	std	Y+33, r24	; 0x21
    23a2:	0f c0       	rjmp	.+30     	; 0x23c2 <passwordCreation+0x13a>
    23a4:	88 ec       	ldi	r24, 0xC8	; 200
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	98 a3       	std	Y+32, r25	; 0x20
    23aa:	8f 8f       	std	Y+31, r24	; 0x1f
    23ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23ae:	98 a1       	ldd	r25, Y+32	; 0x20
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	f1 f7       	brne	.-4      	; 0x23b0 <passwordCreation+0x128>
    23b4:	98 a3       	std	Y+32, r25	; 0x20
    23b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b8:	89 a1       	ldd	r24, Y+33	; 0x21
    23ba:	9a a1       	ldd	r25, Y+34	; 0x22
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	9a a3       	std	Y+34, r25	; 0x22
    23c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c2:	89 a1       	ldd	r24, Y+33	; 0x21
    23c4:	9a a1       	ldd	r25, Y+34	; 0x22
    23c6:	00 97       	sbiw	r24, 0x00	; 0
    23c8:	69 f7       	brne	.-38     	; 0x23a4 <passwordCreation+0x11c>
    23ca:	14 c0       	rjmp	.+40     	; 0x23f4 <passwordCreation+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23cc:	6b a1       	ldd	r22, Y+35	; 0x23
    23ce:	7c a1       	ldd	r23, Y+36	; 0x24
    23d0:	8d a1       	ldd	r24, Y+37	; 0x25
    23d2:	9e a1       	ldd	r25, Y+38	; 0x26
    23d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9a a3       	std	Y+34, r25	; 0x22
    23de:	89 a3       	std	Y+33, r24	; 0x21
    23e0:	89 a1       	ldd	r24, Y+33	; 0x21
    23e2:	9a a1       	ldd	r25, Y+34	; 0x22
    23e4:	9e 8f       	std	Y+30, r25	; 0x1e
    23e6:	8d 8f       	std	Y+29, r24	; 0x1d
    23e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <passwordCreation+0x164>
    23f0:	9e 8f       	std	Y+30, r25	; 0x1e
    23f2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		for(int i = 0; i < 5; i++)
    23f4:	1c a6       	std	Y+44, r1	; 0x2c
    23f6:	1b a6       	std	Y+43, r1	; 0x2b
    23f8:	89 c0       	rjmp	.+274    	; 0x250c <passwordCreation+0x284>
		{
			EEPROM_writeByte(address, password_1[i]);
    23fa:	2b a5       	ldd	r18, Y+43	; 0x2b
    23fc:	3c a5       	ldd	r19, Y+44	; 0x2c
    23fe:	8a a9       	ldd	r24, Y+50	; 0x32
    2400:	9b a9       	ldd	r25, Y+51	; 0x33
    2402:	fc 01       	movw	r30, r24
    2404:	e2 0f       	add	r30, r18
    2406:	f3 1f       	adc	r31, r19
    2408:	20 81       	ld	r18, Z
    240a:	88 a9       	ldd	r24, Y+48	; 0x30
    240c:	99 a9       	ldd	r25, Y+49	; 0x31
    240e:	62 2f       	mov	r22, r18
    2410:	0e 94 c7 0b 	call	0x178e	; 0x178e <EEPROM_writeByte>
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	a0 e2       	ldi	r26, 0x20	; 32
    241a:	b1 e4       	ldi	r27, 0x41	; 65
    241c:	89 8f       	std	Y+25, r24	; 0x19
    241e:	9a 8f       	std	Y+26, r25	; 0x1a
    2420:	ab 8f       	std	Y+27, r26	; 0x1b
    2422:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2424:	69 8d       	ldd	r22, Y+25	; 0x19
    2426:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2428:	8b 8d       	ldd	r24, Y+27	; 0x1b
    242a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	4a ef       	ldi	r20, 0xFA	; 250
    2432:	54 e4       	ldi	r21, 0x44	; 68
    2434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	8d 8b       	std	Y+21, r24	; 0x15
    243e:	9e 8b       	std	Y+22, r25	; 0x16
    2440:	af 8b       	std	Y+23, r26	; 0x17
    2442:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2444:	6d 89       	ldd	r22, Y+21	; 0x15
    2446:	7e 89       	ldd	r23, Y+22	; 0x16
    2448:	8f 89       	ldd	r24, Y+23	; 0x17
    244a:	98 8d       	ldd	r25, Y+24	; 0x18
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e8       	ldi	r20, 0x80	; 128
    2452:	5f e3       	ldi	r21, 0x3F	; 63
    2454:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2458:	88 23       	and	r24, r24
    245a:	2c f4       	brge	.+10     	; 0x2466 <passwordCreation+0x1de>
		__ticks = 1;
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	9c 8b       	std	Y+20, r25	; 0x14
    2462:	8b 8b       	std	Y+19, r24	; 0x13
    2464:	3f c0       	rjmp	.+126    	; 0x24e4 <passwordCreation+0x25c>
	else if (__tmp > 65535)
    2466:	6d 89       	ldd	r22, Y+21	; 0x15
    2468:	7e 89       	ldd	r23, Y+22	; 0x16
    246a:	8f 89       	ldd	r24, Y+23	; 0x17
    246c:	98 8d       	ldd	r25, Y+24	; 0x18
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	3f ef       	ldi	r19, 0xFF	; 255
    2472:	4f e7       	ldi	r20, 0x7F	; 127
    2474:	57 e4       	ldi	r21, 0x47	; 71
    2476:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    247a:	18 16       	cp	r1, r24
    247c:	4c f5       	brge	.+82     	; 0x24d0 <passwordCreation+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247e:	69 8d       	ldd	r22, Y+25	; 0x19
    2480:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2482:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2484:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e2       	ldi	r20, 0x20	; 32
    248c:	51 e4       	ldi	r21, 0x41	; 65
    248e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	bc 01       	movw	r22, r24
    2498:	cd 01       	movw	r24, r26
    249a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	9c 8b       	std	Y+20, r25	; 0x14
    24a4:	8b 8b       	std	Y+19, r24	; 0x13
    24a6:	0f c0       	rjmp	.+30     	; 0x24c6 <passwordCreation+0x23e>
    24a8:	88 ec       	ldi	r24, 0xC8	; 200
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	9a 8b       	std	Y+18, r25	; 0x12
    24ae:	89 8b       	std	Y+17, r24	; 0x11
    24b0:	89 89       	ldd	r24, Y+17	; 0x11
    24b2:	9a 89       	ldd	r25, Y+18	; 0x12
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	f1 f7       	brne	.-4      	; 0x24b4 <passwordCreation+0x22c>
    24b8:	9a 8b       	std	Y+18, r25	; 0x12
    24ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24bc:	8b 89       	ldd	r24, Y+19	; 0x13
    24be:	9c 89       	ldd	r25, Y+20	; 0x14
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	9c 8b       	std	Y+20, r25	; 0x14
    24c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c6:	8b 89       	ldd	r24, Y+19	; 0x13
    24c8:	9c 89       	ldd	r25, Y+20	; 0x14
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	69 f7       	brne	.-38     	; 0x24a8 <passwordCreation+0x220>
    24ce:	14 c0       	rjmp	.+40     	; 0x24f8 <passwordCreation+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d0:	6d 89       	ldd	r22, Y+21	; 0x15
    24d2:	7e 89       	ldd	r23, Y+22	; 0x16
    24d4:	8f 89       	ldd	r24, Y+23	; 0x17
    24d6:	98 8d       	ldd	r25, Y+24	; 0x18
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	9c 8b       	std	Y+20, r25	; 0x14
    24e2:	8b 8b       	std	Y+19, r24	; 0x13
    24e4:	8b 89       	ldd	r24, Y+19	; 0x13
    24e6:	9c 89       	ldd	r25, Y+20	; 0x14
    24e8:	98 8b       	std	Y+16, r25	; 0x10
    24ea:	8f 87       	std	Y+15, r24	; 0x0f
    24ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ee:	98 89       	ldd	r25, Y+16	; 0x10
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <passwordCreation+0x268>
    24f4:	98 8b       	std	Y+16, r25	; 0x10
    24f6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			address++;
    24f8:	88 a9       	ldd	r24, Y+48	; 0x30
    24fa:	99 a9       	ldd	r25, Y+49	; 0x31
    24fc:	01 96       	adiw	r24, 0x01	; 1
    24fe:	99 ab       	std	Y+49, r25	; 0x31
    2500:	88 ab       	std	Y+48, r24	; 0x30
	}
	if(match)
	{
		UART_sendByte(match);
		_delay_ms(50);
		for(int i = 0; i < 5; i++)
    2502:	8b a5       	ldd	r24, Y+43	; 0x2b
    2504:	9c a5       	ldd	r25, Y+44	; 0x2c
    2506:	01 96       	adiw	r24, 0x01	; 1
    2508:	9c a7       	std	Y+44, r25	; 0x2c
    250a:	8b a7       	std	Y+43, r24	; 0x2b
    250c:	8b a5       	ldd	r24, Y+43	; 0x2b
    250e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2510:	85 30       	cpi	r24, 0x05	; 5
    2512:	91 05       	cpc	r25, r1
    2514:	0c f4       	brge	.+2      	; 0x2518 <passwordCreation+0x290>
    2516:	71 cf       	rjmp	.-286    	; 0x23fa <passwordCreation+0x172>
		{
			EEPROM_writeByte(address, password_1[i]);
			_delay_ms(10);
			address++;
		}
		recieveCommand();
    2518:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <recieveCommand>
    251c:	75 c0       	rjmp	.+234    	; 0x2608 <passwordCreation+0x380>


	}
	else
	{
		UART_sendByte(match);
    251e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2520:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <UART_sendByte>
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	a8 e4       	ldi	r26, 0x48	; 72
    252a:	b2 e4       	ldi	r27, 0x42	; 66
    252c:	8b 87       	std	Y+11, r24	; 0x0b
    252e:	9c 87       	std	Y+12, r25	; 0x0c
    2530:	ad 87       	std	Y+13, r26	; 0x0d
    2532:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2534:	6b 85       	ldd	r22, Y+11	; 0x0b
    2536:	7c 85       	ldd	r23, Y+12	; 0x0c
    2538:	8d 85       	ldd	r24, Y+13	; 0x0d
    253a:	9e 85       	ldd	r25, Y+14	; 0x0e
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	4a ef       	ldi	r20, 0xFA	; 250
    2542:	54 e4       	ldi	r21, 0x44	; 68
    2544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	8f 83       	std	Y+7, r24	; 0x07
    254e:	98 87       	std	Y+8, r25	; 0x08
    2550:	a9 87       	std	Y+9, r26	; 0x09
    2552:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2554:	6f 81       	ldd	r22, Y+7	; 0x07
    2556:	78 85       	ldd	r23, Y+8	; 0x08
    2558:	89 85       	ldd	r24, Y+9	; 0x09
    255a:	9a 85       	ldd	r25, Y+10	; 0x0a
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e8       	ldi	r20, 0x80	; 128
    2562:	5f e3       	ldi	r21, 0x3F	; 63
    2564:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2568:	88 23       	and	r24, r24
    256a:	2c f4       	brge	.+10     	; 0x2576 <passwordCreation+0x2ee>
		__ticks = 1;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	9e 83       	std	Y+6, r25	; 0x06
    2572:	8d 83       	std	Y+5, r24	; 0x05
    2574:	3f c0       	rjmp	.+126    	; 0x25f4 <passwordCreation+0x36c>
	else if (__tmp > 65535)
    2576:	6f 81       	ldd	r22, Y+7	; 0x07
    2578:	78 85       	ldd	r23, Y+8	; 0x08
    257a:	89 85       	ldd	r24, Y+9	; 0x09
    257c:	9a 85       	ldd	r25, Y+10	; 0x0a
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	3f ef       	ldi	r19, 0xFF	; 255
    2582:	4f e7       	ldi	r20, 0x7F	; 127
    2584:	57 e4       	ldi	r21, 0x47	; 71
    2586:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    258a:	18 16       	cp	r1, r24
    258c:	4c f5       	brge	.+82     	; 0x25e0 <passwordCreation+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2590:	7c 85       	ldd	r23, Y+12	; 0x0c
    2592:	8d 85       	ldd	r24, Y+13	; 0x0d
    2594:	9e 85       	ldd	r25, Y+14	; 0x0e
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e2       	ldi	r20, 0x20	; 32
    259c:	51 e4       	ldi	r21, 0x41	; 65
    259e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	9e 83       	std	Y+6, r25	; 0x06
    25b4:	8d 83       	std	Y+5, r24	; 0x05
    25b6:	0f c0       	rjmp	.+30     	; 0x25d6 <passwordCreation+0x34e>
    25b8:	88 ec       	ldi	r24, 0xC8	; 200
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	9c 83       	std	Y+4, r25	; 0x04
    25be:	8b 83       	std	Y+3, r24	; 0x03
    25c0:	8b 81       	ldd	r24, Y+3	; 0x03
    25c2:	9c 81       	ldd	r25, Y+4	; 0x04
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <passwordCreation+0x33c>
    25c8:	9c 83       	std	Y+4, r25	; 0x04
    25ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25cc:	8d 81       	ldd	r24, Y+5	; 0x05
    25ce:	9e 81       	ldd	r25, Y+6	; 0x06
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	9e 83       	std	Y+6, r25	; 0x06
    25d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d6:	8d 81       	ldd	r24, Y+5	; 0x05
    25d8:	9e 81       	ldd	r25, Y+6	; 0x06
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	69 f7       	brne	.-38     	; 0x25b8 <passwordCreation+0x330>
    25de:	14 c0       	rjmp	.+40     	; 0x2608 <passwordCreation+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e0:	6f 81       	ldd	r22, Y+7	; 0x07
    25e2:	78 85       	ldd	r23, Y+8	; 0x08
    25e4:	89 85       	ldd	r24, Y+9	; 0x09
    25e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9e 83       	std	Y+6, r25	; 0x06
    25f2:	8d 83       	std	Y+5, r24	; 0x05
    25f4:	8d 81       	ldd	r24, Y+5	; 0x05
    25f6:	9e 81       	ldd	r25, Y+6	; 0x06
    25f8:	9a 83       	std	Y+2, r25	; 0x02
    25fa:	89 83       	std	Y+1, r24	; 0x01
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <passwordCreation+0x378>
    2604:	9a 83       	std	Y+2, r25	; 0x02
    2606:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
	}

}
    2608:	e5 96       	adiw	r28, 0x35	; 53
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	cf 91       	pop	r28
    2616:	df 91       	pop	r29
    2618:	08 95       	ret

0000261a <main>:


int main()
{
    261a:	df 93       	push	r29
    261c:	cf 93       	push	r28
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	2e 97       	sbiw	r28, 0x0e	; 14
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
	uint8  password_1[5] ;
	uint8  password_2[5] ;

	TWI_ConfigType *TWI_Config;
	TWI_Config ->address = 0x0a;
    262e:	eb 81       	ldd	r30, Y+3	; 0x03
    2630:	fc 81       	ldd	r31, Y+4	; 0x04
    2632:	8a e0       	ldi	r24, 0x0A	; 10
    2634:	80 83       	st	Z, r24
	TWI_Config ->bit_rate = 0x02;
    2636:	eb 81       	ldd	r30, Y+3	; 0x03
    2638:	fc 81       	ldd	r31, Y+4	; 0x04
    263a:	82 e0       	ldi	r24, 0x02	; 2
    263c:	81 83       	std	Z+1, r24	; 0x01
	TWI_init(TWI_Config);
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	9c 81       	ldd	r25, Y+4	; 0x04
    2642:	0e 94 0d 07 	call	0xe1a	; 0xe1a <TWI_init>

	UART_ConfigType * UART_Config;
	UART_Config ->bit_data = 8; /* Use 8-Bits Data*/
    2646:	e9 81       	ldd	r30, Y+1	; 0x01
    2648:	fa 81       	ldd	r31, Y+2	; 0x02
    264a:	88 e0       	ldi	r24, 0x08	; 8
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	a0 e0       	ldi	r26, 0x00	; 0
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	80 83       	st	Z, r24
    2654:	91 83       	std	Z+1, r25	; 0x01
    2656:	a2 83       	std	Z+2, r26	; 0x02
    2658:	b3 83       	std	Z+3, r27	; 0x03
	UART_Config ->stop_bit = oneBit; /*1-Stop Bit*/
    265a:	e9 81       	ldd	r30, Y+1	; 0x01
    265c:	fa 81       	ldd	r31, Y+2	; 0x02
    265e:	15 82       	std	Z+5, r1	; 0x05
	UART_Config ->parity = EVEN; /*Even Parity*/
    2660:	e9 81       	ldd	r30, Y+1	; 0x01
    2662:	fa 81       	ldd	r31, Y+2	; 0x02
    2664:	82 e0       	ldi	r24, 0x02	; 2
    2666:	84 83       	std	Z+4, r24	; 0x04
	UART_Config ->baudrate = 9600;
    2668:	e9 81       	ldd	r30, Y+1	; 0x01
    266a:	fa 81       	ldd	r31, Y+2	; 0x02
    266c:	80 e8       	ldi	r24, 0x80	; 128
    266e:	95 e2       	ldi	r25, 0x25	; 37
    2670:	a0 e0       	ldi	r26, 0x00	; 0
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	86 83       	std	Z+6, r24	; 0x06
    2676:	97 83       	std	Z+7, r25	; 0x07
    2678:	a0 87       	std	Z+8, r26	; 0x08
    267a:	b1 87       	std	Z+9, r27	; 0x09
	UART_init(UART_Config);
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	9a 81       	ldd	r25, Y+2	; 0x02
    2680:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>

	Buzzer_init();
    2684:	0e 94 a4 0c 	call	0x1948	; 0x1948 <Buzzer_init>
	DcMotor_Init();
    2688:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <DcMotor_Init>

	while(1)
	{
		passwordCreation(password_1, password_2);
    268c:	ce 01       	movw	r24, r28
    268e:	05 96       	adiw	r24, 0x05	; 5
    2690:	9e 01       	movw	r18, r28
    2692:	26 5f       	subi	r18, 0xF6	; 246
    2694:	3f 4f       	sbci	r19, 0xFF	; 255
    2696:	b9 01       	movw	r22, r18
    2698:	0e 94 44 11 	call	0x2288	; 0x2288 <passwordCreation>
    269c:	f7 cf       	rjmp	.-18     	; 0x268c <main+0x72>

0000269e <__udivmodsi4>:
    269e:	a1 e2       	ldi	r26, 0x21	; 33
    26a0:	1a 2e       	mov	r1, r26
    26a2:	aa 1b       	sub	r26, r26
    26a4:	bb 1b       	sub	r27, r27
    26a6:	fd 01       	movw	r30, r26
    26a8:	0d c0       	rjmp	.+26     	; 0x26c4 <__udivmodsi4_ep>

000026aa <__udivmodsi4_loop>:
    26aa:	aa 1f       	adc	r26, r26
    26ac:	bb 1f       	adc	r27, r27
    26ae:	ee 1f       	adc	r30, r30
    26b0:	ff 1f       	adc	r31, r31
    26b2:	a2 17       	cp	r26, r18
    26b4:	b3 07       	cpc	r27, r19
    26b6:	e4 07       	cpc	r30, r20
    26b8:	f5 07       	cpc	r31, r21
    26ba:	20 f0       	brcs	.+8      	; 0x26c4 <__udivmodsi4_ep>
    26bc:	a2 1b       	sub	r26, r18
    26be:	b3 0b       	sbc	r27, r19
    26c0:	e4 0b       	sbc	r30, r20
    26c2:	f5 0b       	sbc	r31, r21

000026c4 <__udivmodsi4_ep>:
    26c4:	66 1f       	adc	r22, r22
    26c6:	77 1f       	adc	r23, r23
    26c8:	88 1f       	adc	r24, r24
    26ca:	99 1f       	adc	r25, r25
    26cc:	1a 94       	dec	r1
    26ce:	69 f7       	brne	.-38     	; 0x26aa <__udivmodsi4_loop>
    26d0:	60 95       	com	r22
    26d2:	70 95       	com	r23
    26d4:	80 95       	com	r24
    26d6:	90 95       	com	r25
    26d8:	9b 01       	movw	r18, r22
    26da:	ac 01       	movw	r20, r24
    26dc:	bd 01       	movw	r22, r26
    26de:	cf 01       	movw	r24, r30
    26e0:	08 95       	ret

000026e2 <__prologue_saves__>:
    26e2:	2f 92       	push	r2
    26e4:	3f 92       	push	r3
    26e6:	4f 92       	push	r4
    26e8:	5f 92       	push	r5
    26ea:	6f 92       	push	r6
    26ec:	7f 92       	push	r7
    26ee:	8f 92       	push	r8
    26f0:	9f 92       	push	r9
    26f2:	af 92       	push	r10
    26f4:	bf 92       	push	r11
    26f6:	cf 92       	push	r12
    26f8:	df 92       	push	r13
    26fa:	ef 92       	push	r14
    26fc:	ff 92       	push	r15
    26fe:	0f 93       	push	r16
    2700:	1f 93       	push	r17
    2702:	cf 93       	push	r28
    2704:	df 93       	push	r29
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	ca 1b       	sub	r28, r26
    270c:	db 0b       	sbc	r29, r27
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	cd bf       	out	0x3d, r28	; 61
    2718:	09 94       	ijmp

0000271a <__epilogue_restores__>:
    271a:	2a 88       	ldd	r2, Y+18	; 0x12
    271c:	39 88       	ldd	r3, Y+17	; 0x11
    271e:	48 88       	ldd	r4, Y+16	; 0x10
    2720:	5f 84       	ldd	r5, Y+15	; 0x0f
    2722:	6e 84       	ldd	r6, Y+14	; 0x0e
    2724:	7d 84       	ldd	r7, Y+13	; 0x0d
    2726:	8c 84       	ldd	r8, Y+12	; 0x0c
    2728:	9b 84       	ldd	r9, Y+11	; 0x0b
    272a:	aa 84       	ldd	r10, Y+10	; 0x0a
    272c:	b9 84       	ldd	r11, Y+9	; 0x09
    272e:	c8 84       	ldd	r12, Y+8	; 0x08
    2730:	df 80       	ldd	r13, Y+7	; 0x07
    2732:	ee 80       	ldd	r14, Y+6	; 0x06
    2734:	fd 80       	ldd	r15, Y+5	; 0x05
    2736:	0c 81       	ldd	r16, Y+4	; 0x04
    2738:	1b 81       	ldd	r17, Y+3	; 0x03
    273a:	aa 81       	ldd	r26, Y+2	; 0x02
    273c:	b9 81       	ldd	r27, Y+1	; 0x01
    273e:	ce 0f       	add	r28, r30
    2740:	d1 1d       	adc	r29, r1
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
    274c:	ed 01       	movw	r28, r26
    274e:	08 95       	ret

00002750 <_exit>:
    2750:	f8 94       	cli

00002752 <__stop_program>:
    2752:	ff cf       	rjmp	.-2      	; 0x2752 <__stop_program>
